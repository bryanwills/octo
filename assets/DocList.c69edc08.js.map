{"version":3,"file":"DocList.c69edc08.js","sources":["../../node_modules/decode-named-character-reference/index.dom.js","../../node_modules/micromark-util-chunked/index.js","../../node_modules/micromark-util-combine-extensions/index.js","../../node_modules/micromark-util-decode-numeric-character-reference/index.js","../../node_modules/micromark-util-encode/index.js","../../node_modules/micromark-util-normalize-identifier/index.js","../../node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../../node_modules/micromark-util-character/index.js","../../node_modules/micromark-util-sanitize-uri/index.js","../../node_modules/micromark/lib/compile.js","../../node_modules/micromark-factory-space/index.js","../../node_modules/micromark/lib/initialize/content.js","../../node_modules/micromark/lib/initialize/document.js","../../node_modules/micromark-util-classify-character/index.js","../../node_modules/micromark-util-resolve-all/index.js","../../node_modules/micromark-core-commonmark/lib/attention.js","../../node_modules/micromark-core-commonmark/lib/autolink.js","../../node_modules/micromark-core-commonmark/lib/blank-line.js","../../node_modules/micromark-core-commonmark/lib/block-quote.js","../../node_modules/micromark-core-commonmark/lib/character-escape.js","../../node_modules/micromark-core-commonmark/lib/character-reference.js","../../node_modules/micromark-core-commonmark/lib/code-fenced.js","../../node_modules/micromark-core-commonmark/lib/code-indented.js","../../node_modules/micromark-core-commonmark/lib/code-text.js","../../node_modules/micromark-util-subtokenize/index.js","../../node_modules/micromark-core-commonmark/lib/content.js","../../node_modules/micromark-factory-destination/index.js","../../node_modules/micromark-factory-label/index.js","../../node_modules/micromark-factory-title/index.js","../../node_modules/micromark-factory-whitespace/index.js","../../node_modules/micromark-core-commonmark/lib/definition.js","../../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../../node_modules/micromark-core-commonmark/lib/heading-atx.js","../../node_modules/micromark-util-html-tag-name/index.js","../../node_modules/micromark-core-commonmark/lib/html-flow.js","../../node_modules/micromark-core-commonmark/lib/html-text.js","../../node_modules/micromark-core-commonmark/lib/label-end.js","../../node_modules/micromark-core-commonmark/lib/label-start-image.js","../../node_modules/micromark-core-commonmark/lib/label-start-link.js","../../node_modules/micromark-core-commonmark/lib/line-ending.js","../../node_modules/micromark-core-commonmark/lib/thematic-break.js","../../node_modules/micromark-core-commonmark/lib/list.js","../../node_modules/micromark-core-commonmark/lib/setext-underline.js","../../node_modules/micromark/lib/initialize/flow.js","../../node_modules/micromark/lib/initialize/text.js","../../node_modules/micromark/lib/create-tokenizer.js","../../node_modules/micromark/lib/constructs.js","../../node_modules/micromark/lib/parse.js","../../node_modules/micromark/lib/postprocess.js","../../node_modules/micromark/lib/preprocess.js","../../node_modules/micromark/index.js","../../node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","../../node_modules/micromark-extension-gfm-autolink-literal/lib/html.js","../../node_modules/micromark-extension-gfm-footnote/lib/syntax.js","../../node_modules/micromark-extension-gfm-footnote/lib/html.js","../../node_modules/micromark-extension-gfm-strikethrough/lib/html.js","../../node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","../../node_modules/micromark-extension-gfm-table/lib/html.js","../../node_modules/micromark-extension-gfm-table/lib/syntax.js","../../node_modules/micromark-extension-gfm-tagfilter/index.js","../../node_modules/micromark-extension-gfm-task-list-item/lib/html.js","../../node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","../../node_modules/micromark-extension-gfm/index.js","../../components/Doc.vue","../../components/DocList.vue"],"sourcesContent":["/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {number} start\n * @param {number} remove\n * @param {T[]} items\n * @returns {void}\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {unknown[]} */\n\n  let parameters // Make start between zero and `end` (included).\n\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n\n  remove = remove > 0 ? remove : 0 // No need to chunk the items if there’s only a couple (10k) items.\n\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove) // @ts-expect-error Hush, it’s fine.\n    ;[].splice.apply(list, parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) [].splice.apply(list, [start, remove]) // Insert the items in chunks to not cause stack overflows.\n\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0) // @ts-expect-error Hush, it’s fine.\n      ;[].splice.apply(list, parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {T[]} items\n * @returns {T[]}\n */\n\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine several syntax extensions into one.\n *\n * @param {Extension[]} extensions List of syntax extensions.\n * @returns {NormalizedExtension} A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all Extension to merge into.\n * @param {Extension} extension Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {string} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    for (code in right) {\n      if (!hasOwnProperty.call(left, code)) left[code] = []\n      const value = right[code]\n      constructs(\n        // @ts-expect-error Looks like a list.\n        left[code],\n        Array.isArray(value) ? value : value ? [value] : []\n      )\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {unknown[]} existing\n * @param {unknown[]} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {unknown[]} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine several HTML extensions into one.\n *\n * @param {HtmlExtension[]} htmlExtensions List of HTML extensions.\n * @returns {HtmlExtension} A single combined extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all Extension to merge into.\n * @param {HtmlExtension} extension Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {string} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {string} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n\n  if (\n    // C0 except for HT, LF, FF, CR, space\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) || // Control character (DEL) of the basic block and C1 controls.\n    (code > 126 && code < 160) || // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) || // Noncharacters.\n    (code > 64975 && code < 65008) ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 || // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n\n  return String.fromCharCode(code)\n}\n","const characterReferences = {'\"': 'quot', '&': 'amp', '<': 'lt', '>': 'gt'}\n\n/**\n * Encode only the dangerous HTML characters.\n *\n * This ensures that certain characters which have special meaning in HTML are\n * dealt with.\n * Technically, we can skip `>` and `\"` in many cases, but CM includes them.\n *\n * @param {string} value\n * @returns {string}\n */\nexport function encode(value) {\n  return value.replace(/[\"&<>]/g, replace)\n\n  /**\n   * @param {string} value\n   * @returns {string}\n   */\n  function replace(value) {\n    // @ts-expect-error Hush, it’s fine.\n    return '&' + characterReferences[value] + ';'\n  }\n}\n","/**\n * Normalize an identifier (such as used in definitions).\n *\n * @param {string} value\n * @returns {string}\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value // Collapse Markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ') // Trim.\n      .replace(/^ | $/g, '') // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\nexport const unicodePunctuationRegex =\n  /[!-/:-@[-`{-~\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n */\n\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n */\n\nexport const asciiDigit = regexCheck(/\\d/)\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n */\n\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n */\n\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n */\n\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n */\n\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n */\n\nexport const unicodeWhitespace = regexCheck(/\\s/)\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n */\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => code is number}\n */\n\nfunction regexCheck(regex) {\n  return check\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code Character code\n   * @returns {code is number} Whether the character code matches the bound regex\n   */\n\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri` below).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * Then, a regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`,\n * or `/^https?$/i` for `img[src]`.\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string|undefined} url\n * @param {RegExp} [protocol]\n * @returns {string}\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n\n  if (!protocol) {\n    return value\n  }\n\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 || // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) || // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n/**\n * Normalize a URL (such as used in definitions).\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n * @returns {string}\n */\n\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n\n    let replace = '' // A correct percent encoded value.\n\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    } // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    } // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1) // A correct surrogate pair.\n\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      } // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    } // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n\n  return result.join('') + value.slice(start)\n}\n","/**\n * While micromark is a lexer/tokenizer, the common case of going from markdown\n * to html is currently built in as this module, even though the parts can be\n * used separately to build ASTs, CSTs, or many other output formats.\n *\n * Having an HTML compiler built in is useful because it allows us to check for\n * compliancy to CommonMark, the de facto norm of markdown, specified in roughly\n * 600 input/output cases.\n *\n * This module has an interface that accepts lists of events instead of the\n * whole at once, however, because markdown can’t be truly streaming, we buffer\n * events before processing and outputting the final result.\n */\n\n/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').CompileOptions} CompileOptions\n * @typedef {import('micromark-util-types').CompileData} CompileData\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n * @typedef {import('micromark-util-types').Definition} Definition\n * @typedef {import('micromark-util-types').Compile} Compile\n * @typedef {import('micromark-util-types').Handle} Handle\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedHtmlExtension} NormalizedHtmlExtension\n */\n\n/**\n * @typedef Media\n * @property {boolean} [image]\n * @property {string} [labelId]\n * @property {string} [label]\n * @property {string} [referenceId]\n * @property {string} [destination]\n * @property {string} [title]\n */\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {combineHtmlExtensions} from 'micromark-util-combine-extensions'\nimport {push} from 'micromark-util-chunked'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {encode as _encode} from 'micromark-util-encode'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {sanitizeUri} from 'micromark-util-sanitize-uri'\nconst hasOwnProperty = {}.hasOwnProperty\n/**\n * These two are allowlists of safe protocols for full URLs in respectively the\n * `href` (on `<a>`) and `src` (on `<img>`) attributes.\n * They are based on what is allowed on GitHub,\n * <https://github.com/syntax-tree/hast-util-sanitize/blob/9275b21/lib/github.json#L31>\n */\n\nconst protocolHref = /^(https?|ircs?|mailto|xmpp)$/i\nconst protocolSrc = /^https?$/i\n/**\n * @param {CompileOptions} [options]\n * @returns {Compile}\n */\n\nexport function compile(options = {}) {\n  /**\n   * Tags is needed because according to markdown, links and emphasis and\n   * whatnot can exist in images, however, as HTML doesn’t allow content in\n   * images, the tags are ignored in the `alt` attribute, but the content\n   * remains.\n   *\n   * @type {boolean|undefined}\n   */\n  let tags = true\n  /**\n   * An object to track identifiers to media (URLs and titles) defined with\n   * definitions.\n   *\n   * @type {Record<string, Definition>}\n   */\n\n  const definitions = {}\n  /**\n   * A lot of the handlers need to capture some of the output data, modify it\n   * somehow, and then deal with it.\n   * We do that by tracking a stack of buffers, that can be opened (with\n   * `buffer`) and closed (with `resume`) to access them.\n   *\n   * @type {Array<Array<string>>}\n   */\n\n  const buffers = [[]]\n  /**\n   * As we can have links in images and the other way around, where the deepest\n   * ones are closed first, we need to track which one we’re in.\n   *\n   * @type {Array<Media>}\n   */\n\n  const mediaStack = []\n  /**\n   * Same as `mediaStack` for tightness, which is specific to lists.\n   * We need to track if we’re currently in a tight or loose container.\n   *\n   * @type {Array<boolean>}\n   */\n\n  const tightStack = []\n  /** @type {HtmlExtension} */\n\n  const defaultHandlers = {\n    enter: {\n      blockQuote: onenterblockquote,\n      codeFenced: onentercodefenced,\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: onentercodeindented,\n      codeText: onentercodetext,\n      content: onentercontent,\n      definition: onenterdefinition,\n      definitionDestinationString: onenterdefinitiondestinationstring,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: onenteremphasis,\n      htmlFlow: onenterhtmlflow,\n      htmlText: onenterhtml,\n      image: onenterimage,\n      label: buffer,\n      link: onenterlink,\n      listItemMarker: onenterlistitemmarker,\n      listItemValue: onenterlistitemvalue,\n      listOrdered: onenterlistordered,\n      listUnordered: onenterlistunordered,\n      paragraph: onenterparagraph,\n      reference: buffer,\n      resource: onenterresource,\n      resourceDestinationString: onenterresourcedestinationstring,\n      resourceTitleString: buffer,\n      setextHeading: onentersetextheading,\n      strong: onenterstrong\n    },\n    exit: {\n      atxHeading: onexitatxheading,\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: onexitblockquote,\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: onexitflowcode,\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: resume,\n      codeFlowValue: onexitcodeflowvalue,\n      codeIndented: onexitflowcode,\n      codeText: onexitcodetext,\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: onexitdefinition,\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: onexitemphasis,\n      hardBreakEscape: onexithardbreak,\n      hardBreakTrailing: onexithardbreak,\n      htmlFlow: onexithtml,\n      htmlFlowData: onexitdata,\n      htmlText: onexithtml,\n      htmlTextData: onexitdata,\n      image: onexitmedia,\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: onexitmedia,\n      listOrdered: onexitlistordered,\n      listUnordered: onexitlistunordered,\n      paragraph: onexitparagraph,\n      reference: resume,\n      referenceString: onexitreferencestring,\n      resource: resume,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      setextHeading: onexitsetextheading,\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: onexitstrong,\n      thematicBreak: onexitthematicbreak\n    }\n  }\n  /**\n   * Combine the HTML extensions with the default handlers.\n   * An HTML extension is an object whose fields are either `enter` or `exit`\n   * (reflecting whether a token is entered or exited).\n   * The values at such objects are names of tokens mapping to handlers.\n   * Handlers are called, respectively when a token is opener or closed, with\n   * that token, and a context as `this`.\n   *\n   * @type {NormalizedHtmlExtension}\n   */\n  // @ts-expect-error `defaultHandlers` is full, so the result will be too.\n\n  const handlers = combineHtmlExtensions(\n    [defaultHandlers].concat(options.htmlExtensions || [])\n  )\n  /**\n   * Handlers do often need to keep track of some state.\n   * That state is provided here as a key-value store (an object).\n   *\n   * @type {CompileData}\n   */\n\n  const data = {\n    tightStack,\n    definitions\n  }\n  /**\n   * The context for handlers references a couple of useful functions.\n   * In handlers from extensions, those can be accessed at `this`.\n   * For the handlers here, they can be accessed directly.\n   *\n   * @type {Omit<CompileContext, 'sliceSerialize'>}\n   */\n\n  const context = {\n    lineEndingIfNeeded,\n    options,\n    encode,\n    raw,\n    tag,\n    buffer,\n    resume,\n    setData,\n    getData\n  }\n  /**\n   * Generally, micromark copies line endings (`'\\r'`, `'\\n'`, `'\\r\\n'`) in the\n   * markdown document over to the compiled HTML.\n   * In some cases, such as `> a`, CommonMark requires that extra line endings\n   * are added: `<blockquote>\\n<p>a</p>\\n</blockquote>`.\n   * This variable hold the default line ending when given (or `undefined`),\n   * and in the latter case will be updated to the first found line ending if\n   * there is one.\n   */\n\n  let lineEndingStyle = options.defaultLineEnding // Return the function that handles a slice of events.\n\n  return compile\n  /**\n   * Deal w/ a slice of events.\n   * Return either the empty string if there’s nothing of note to return, or the\n   * result when done.\n   *\n   * @param {Array<Event>} events\n   * @returns {string}\n   */\n\n  function compile(events) {\n    let index = -1\n    let start = 0\n    /** @type {Array<number>} */\n\n    const listStack = [] // As definitions can come after references, we need to figure out the media\n    // (urls and titles) defined by them before handling the references.\n    // So, we do sort of what HTML does: put metadata at the start (in head), and\n    // then put content after (`body`).\n\n    /** @type {Array<Event>} */\n\n    let head = []\n    /** @type {Array<Event>} */\n\n    let body = []\n\n    while (++index < events.length) {\n      // Figure out the line ending style used in the document.\n      if (\n        !lineEndingStyle &&\n        (events[index][1].type === 'lineEnding' ||\n          events[index][1].type === 'lineEndingBlank')\n      ) {\n        // @ts-expect-error Hush, it’s a line ending.\n        lineEndingStyle = events[index][2].sliceSerialize(events[index][1])\n      } // Preprocess lists to infer whether the list is loose or not.\n\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          prepareList(events.slice(listStack.pop(), index))\n        }\n      } // Move definitions to the front.\n\n      if (events[index][1].type === 'definition') {\n        if (events[index][0] === 'enter') {\n          body = push(body, events.slice(start, index))\n          start = index\n        } else {\n          head = push(head, events.slice(start, index + 1))\n          start = index + 1\n        }\n      }\n    }\n\n    head = push(head, body)\n    head = push(head, events.slice(start))\n    index = -1\n    const result = head // Handle the start of the document, if defined.\n\n    if (handlers.enter.null) {\n      handlers.enter.null.call(context)\n    } // Handle all events.\n\n    while (++index < events.length) {\n      const handler = handlers[result[index][0]]\n\n      if (hasOwnProperty.call(handler, result[index][1].type)) {\n        handler[result[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: result[index][2].sliceSerialize\n            },\n            context\n          ),\n          result[index][1]\n        )\n      }\n    } // Handle the end of the document, if defined.\n\n    if (handlers.exit.null) {\n      handlers.exit.null.call(context)\n    }\n\n    return buffers[0].join('')\n  }\n  /**\n   * Figure out whether lists are loose or not.\n   *\n   * @param {Array<Event>} slice\n   * @returns {void}\n   */\n\n  function prepareList(slice) {\n    const length = slice.length\n    let index = 0 // Skip open.\n\n    let containerBalance = 0\n    let loose = false\n    /** @type {boolean|undefined} */\n\n    let atMarker\n\n    while (++index < length) {\n      const event = slice[index]\n\n      if (event[1]._container) {\n        atMarker = undefined\n\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n      } else\n        switch (event[1].type) {\n          case 'listItemPrefix': {\n            if (event[0] === 'exit') {\n              atMarker = true\n            }\n\n            break\n          }\n\n          case 'linePrefix': {\n            // Ignore\n            break\n          }\n\n          case 'lineEndingBlank': {\n            if (event[0] === 'enter' && !containerBalance) {\n              if (atMarker) {\n                atMarker = undefined\n              } else {\n                loose = true\n              }\n            }\n\n            break\n          }\n\n          default: {\n            atMarker = undefined\n          }\n        }\n    }\n\n    slice[0][1]._loose = loose\n  }\n  /**\n   * @type {CompileContext['setData']}\n   * @param [value]\n   */\n\n  function setData(key, value) {\n    data[key] = value\n  }\n  /**\n   * @type {CompileContext['getData']}\n   * @template {string} K\n   * @param {K} key\n   * @returns {CompileData[K]}\n   */\n\n  function getData(key) {\n    return data[key]\n  }\n  /** @type {CompileContext['buffer']} */\n\n  function buffer() {\n    buffers.push([])\n  }\n  /** @type {CompileContext['resume']} */\n\n  function resume() {\n    const buf = buffers.pop()\n    return buf.join('')\n  }\n  /** @type {CompileContext['tag']} */\n\n  function tag(value) {\n    if (!tags) return\n    setData('lastWasTag', true)\n    buffers[buffers.length - 1].push(value)\n  }\n  /** @type {CompileContext['raw']} */\n\n  function raw(value) {\n    setData('lastWasTag')\n    buffers[buffers.length - 1].push(value)\n  }\n  /**\n   * Output an extra line ending.\n   *\n   * @returns {void}\n   */\n\n  function lineEnding() {\n    raw(lineEndingStyle || '\\n')\n  }\n  /** @type {CompileContext['lineEndingIfNeeded']} */\n\n  function lineEndingIfNeeded() {\n    const buffer = buffers[buffers.length - 1]\n    const slice = buffer[buffer.length - 1]\n    const previous = slice ? slice.charCodeAt(slice.length - 1) : null\n\n    if (previous === 10 || previous === 13 || previous === null) {\n      return\n    }\n\n    lineEnding()\n  }\n  /** @type {CompileContext['encode']} */\n\n  function encode(value) {\n    return getData('ignoreEncode') ? value : _encode(value)\n  } //\n  // Handlers.\n  //\n\n  /** @type {Handle} */\n\n  function onenterlistordered(token) {\n    tightStack.push(!token._loose)\n    lineEndingIfNeeded()\n    tag('<ol')\n    setData('expectFirstItem', true)\n  }\n  /** @type {Handle} */\n\n  function onenterlistunordered(token) {\n    tightStack.push(!token._loose)\n    lineEndingIfNeeded()\n    tag('<ul')\n    setData('expectFirstItem', true)\n  }\n  /** @type {Handle} */\n\n  function onenterlistitemvalue(token) {\n    if (getData('expectFirstItem')) {\n      const value = Number.parseInt(this.sliceSerialize(token), 10)\n\n      if (value !== 1) {\n        tag(' start=\"' + encode(String(value)) + '\"')\n      }\n    }\n  }\n  /** @type {Handle} */\n\n  function onenterlistitemmarker() {\n    if (getData('expectFirstItem')) {\n      tag('>')\n    } else {\n      onexitlistitem()\n    }\n\n    lineEndingIfNeeded()\n    tag('<li>')\n    setData('expectFirstItem') // “Hack” to prevent a line ending from showing up if the item is empty.\n\n    setData('lastWasTag')\n  }\n  /** @type {Handle} */\n\n  function onexitlistordered() {\n    onexitlistitem()\n    tightStack.pop()\n    lineEnding()\n    tag('</ol>')\n  }\n  /** @type {Handle} */\n\n  function onexitlistunordered() {\n    onexitlistitem()\n    tightStack.pop()\n    lineEnding()\n    tag('</ul>')\n  }\n  /** @type {Handle} */\n\n  function onexitlistitem() {\n    if (getData('lastWasTag') && !getData('slurpAllLineEndings')) {\n      lineEndingIfNeeded()\n    }\n\n    tag('</li>')\n    setData('slurpAllLineEndings')\n  }\n  /** @type {Handle} */\n\n  function onenterblockquote() {\n    tightStack.push(false)\n    lineEndingIfNeeded()\n    tag('<blockquote>')\n  }\n  /** @type {Handle} */\n\n  function onexitblockquote() {\n    tightStack.pop()\n    lineEndingIfNeeded()\n    tag('</blockquote>')\n    setData('slurpAllLineEndings')\n  }\n  /** @type {Handle} */\n\n  function onenterparagraph() {\n    if (!tightStack[tightStack.length - 1]) {\n      lineEndingIfNeeded()\n      tag('<p>')\n    }\n\n    setData('slurpAllLineEndings')\n  }\n  /** @type {Handle} */\n\n  function onexitparagraph() {\n    if (tightStack[tightStack.length - 1]) {\n      setData('slurpAllLineEndings', true)\n    } else {\n      tag('</p>')\n    }\n  }\n  /** @type {Handle} */\n\n  function onentercodefenced() {\n    lineEndingIfNeeded()\n    tag('<pre><code')\n    setData('fencesCount', 0)\n  }\n  /** @type {Handle} */\n\n  function onexitcodefencedfenceinfo() {\n    const value = resume()\n    tag(' class=\"language-' + value + '\"')\n  }\n  /** @type {Handle} */\n\n  function onexitcodefencedfence() {\n    const count = getData('fencesCount') || 0\n\n    if (!count) {\n      tag('>')\n      setData('slurpOneLineEnding', true)\n    }\n\n    setData('fencesCount', count + 1)\n  }\n  /** @type {Handle} */\n\n  function onentercodeindented() {\n    lineEndingIfNeeded()\n    tag('<pre><code>')\n  }\n  /** @type {Handle} */\n\n  function onexitflowcode() {\n    const count = getData('fencesCount') // One special case is if we are inside a container, and the fenced code was\n    // not closed (meaning it runs to the end).\n    // In that case, the following line ending, is considered *outside* the\n    // fenced code and block quote by micromark, but CM wants to treat that\n    // ending as part of the code.\n\n    if (\n      count !== undefined &&\n      count < 2 && // @ts-expect-error `tightStack` is always set.\n      data.tightStack.length > 0 &&\n      !getData('lastWasTag')\n    ) {\n      lineEnding()\n    } // But in most cases, it’s simpler: when we’ve seen some data, emit an extra\n    // line ending when needed.\n\n    if (getData('flowCodeSeenData')) {\n      lineEndingIfNeeded()\n    }\n\n    tag('</code></pre>')\n    if (count !== undefined && count < 2) lineEndingIfNeeded()\n    setData('flowCodeSeenData')\n    setData('fencesCount')\n    setData('slurpOneLineEnding')\n  }\n  /** @type {Handle} */\n\n  function onenterimage() {\n    mediaStack.push({\n      image: true\n    })\n    tags = undefined // Disallow tags.\n  }\n  /** @type {Handle} */\n\n  function onenterlink() {\n    mediaStack.push({})\n  }\n  /** @type {Handle} */\n\n  function onexitlabeltext(token) {\n    mediaStack[mediaStack.length - 1].labelId = this.sliceSerialize(token)\n  }\n  /** @type {Handle} */\n\n  function onexitlabel() {\n    mediaStack[mediaStack.length - 1].label = resume()\n  }\n  /** @type {Handle} */\n\n  function onexitreferencestring(token) {\n    mediaStack[mediaStack.length - 1].referenceId = this.sliceSerialize(token)\n  }\n  /** @type {Handle} */\n\n  function onenterresource() {\n    buffer() // We can have line endings in the resource, ignore them.\n\n    mediaStack[mediaStack.length - 1].destination = ''\n  }\n  /** @type {Handle} */\n\n  function onenterresourcedestinationstring() {\n    buffer() // Ignore encoding the result, as we’ll first percent encode the url and\n    // encode manually after.\n\n    setData('ignoreEncode', true)\n  }\n  /** @type {Handle} */\n\n  function onexitresourcedestinationstring() {\n    mediaStack[mediaStack.length - 1].destination = resume()\n    setData('ignoreEncode')\n  }\n  /** @type {Handle} */\n\n  function onexitresourcetitlestring() {\n    mediaStack[mediaStack.length - 1].title = resume()\n  }\n  /** @type {Handle} */\n\n  function onexitmedia() {\n    let index = mediaStack.length - 1 // Skip current.\n\n    const media = mediaStack[index]\n    const id = media.referenceId || media.labelId\n    const context =\n      media.destination === undefined\n        ? definitions[normalizeIdentifier(id)]\n        : media\n    tags = true\n\n    while (index--) {\n      if (mediaStack[index].image) {\n        tags = undefined\n        break\n      }\n    }\n\n    if (media.image) {\n      tag(\n        '<img src=\"' +\n          sanitizeUri(\n            context.destination,\n            options.allowDangerousProtocol ? undefined : protocolSrc\n          ) +\n          '\" alt=\"'\n      )\n      raw(media.label)\n      tag('\"')\n    } else {\n      tag(\n        '<a href=\"' +\n          sanitizeUri(\n            context.destination,\n            options.allowDangerousProtocol ? undefined : protocolHref\n          ) +\n          '\"'\n      )\n    }\n\n    tag(context.title ? ' title=\"' + context.title + '\"' : '')\n\n    if (media.image) {\n      tag(' />')\n    } else {\n      tag('>')\n      raw(media.label)\n      tag('</a>')\n    }\n\n    mediaStack.pop()\n  }\n  /** @type {Handle} */\n\n  function onenterdefinition() {\n    buffer()\n    mediaStack.push({})\n  }\n  /** @type {Handle} */\n\n  function onexitdefinitionlabelstring(token) {\n    // Discard label, use the source content instead.\n    resume()\n    mediaStack[mediaStack.length - 1].labelId = this.sliceSerialize(token)\n  }\n  /** @type {Handle} */\n\n  function onenterdefinitiondestinationstring() {\n    buffer()\n    setData('ignoreEncode', true)\n  }\n  /** @type {Handle} */\n\n  function onexitdefinitiondestinationstring() {\n    mediaStack[mediaStack.length - 1].destination = resume()\n    setData('ignoreEncode')\n  }\n  /** @type {Handle} */\n\n  function onexitdefinitiontitlestring() {\n    mediaStack[mediaStack.length - 1].title = resume()\n  }\n  /** @type {Handle} */\n\n  function onexitdefinition() {\n    const media = mediaStack[mediaStack.length - 1]\n    const id = normalizeIdentifier(media.labelId)\n    resume()\n\n    if (!hasOwnProperty.call(definitions, id)) {\n      definitions[id] = mediaStack[mediaStack.length - 1]\n    }\n\n    mediaStack.pop()\n  }\n  /** @type {Handle} */\n\n  function onentercontent() {\n    setData('slurpAllLineEndings', true)\n  }\n  /** @type {Handle} */\n\n  function onexitatxheadingsequence(token) {\n    // Exit for further sequences.\n    if (getData('headingRank')) return\n    setData('headingRank', this.sliceSerialize(token).length)\n    lineEndingIfNeeded()\n    tag('<h' + getData('headingRank') + '>')\n  }\n  /** @type {Handle} */\n\n  function onentersetextheading() {\n    buffer()\n    setData('slurpAllLineEndings')\n  }\n  /** @type {Handle} */\n\n  function onexitsetextheadingtext() {\n    setData('slurpAllLineEndings', true)\n  }\n  /** @type {Handle} */\n\n  function onexitatxheading() {\n    tag('</h' + getData('headingRank') + '>')\n    setData('headingRank')\n  }\n  /** @type {Handle} */\n\n  function onexitsetextheadinglinesequence(token) {\n    setData(\n      'headingRank',\n      this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n    )\n  }\n  /** @type {Handle} */\n\n  function onexitsetextheading() {\n    const value = resume()\n    lineEndingIfNeeded()\n    tag('<h' + getData('headingRank') + '>')\n    raw(value)\n    tag('</h' + getData('headingRank') + '>')\n    setData('slurpAllLineEndings')\n    setData('headingRank')\n  }\n  /** @type {Handle} */\n\n  function onexitdata(token) {\n    raw(encode(this.sliceSerialize(token)))\n  }\n  /** @type {Handle} */\n\n  function onexitlineending(token) {\n    if (getData('slurpAllLineEndings')) {\n      return\n    }\n\n    if (getData('slurpOneLineEnding')) {\n      setData('slurpOneLineEnding')\n      return\n    }\n\n    if (getData('inCodeText')) {\n      raw(' ')\n      return\n    }\n\n    raw(encode(this.sliceSerialize(token)))\n  }\n  /** @type {Handle} */\n\n  function onexitcodeflowvalue(token) {\n    raw(encode(this.sliceSerialize(token)))\n    setData('flowCodeSeenData', true)\n  }\n  /** @type {Handle} */\n\n  function onexithardbreak() {\n    tag('<br />')\n  }\n  /** @type {Handle} */\n\n  function onenterhtmlflow() {\n    lineEndingIfNeeded()\n    onenterhtml()\n  }\n  /** @type {Handle} */\n\n  function onexithtml() {\n    setData('ignoreEncode')\n  }\n  /** @type {Handle} */\n\n  function onenterhtml() {\n    if (options.allowDangerousHtml) {\n      setData('ignoreEncode', true)\n    }\n  }\n  /** @type {Handle} */\n\n  function onenteremphasis() {\n    tag('<em>')\n  }\n  /** @type {Handle} */\n\n  function onenterstrong() {\n    tag('<strong>')\n  }\n  /** @type {Handle} */\n\n  function onentercodetext() {\n    setData('inCodeText', true)\n    tag('<code>')\n  }\n  /** @type {Handle} */\n\n  function onexitcodetext() {\n    setData('inCodeText')\n    tag('</code>')\n  }\n  /** @type {Handle} */\n\n  function onexitemphasis() {\n    tag('</em>')\n  }\n  /** @type {Handle} */\n\n  function onexitstrong() {\n    tag('</strong>')\n  }\n  /** @type {Handle} */\n\n  function onexitthematicbreak() {\n    lineEndingIfNeeded()\n    tag('<hr />')\n  }\n  /** @type {Handle} */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n  /** @type {Handle} */\n\n  function onexitcharacterreferencevalue(token) {\n    let value = this.sliceSerialize(token) // @ts-expect-error `decodeNamedCharacterReference` can return false for\n    // invalid named character references, but everything we’ve tokenized is\n    // valid.\n\n    value = getData('characterReferenceType')\n      ? decodeNumericCharacterReference(\n          value,\n          getData('characterReferenceType') ===\n            'characterReferenceMarkerNumeric'\n            ? 10\n            : 16\n        )\n      : decodeNamedCharacterReference(value)\n    raw(encode(value))\n    setData('characterReferenceType')\n  }\n  /** @type {Handle} */\n\n  function onexitautolinkprotocol(token) {\n    const uri = this.sliceSerialize(token)\n    tag(\n      '<a href=\"' +\n        sanitizeUri(\n          uri,\n          options.allowDangerousProtocol ? undefined : protocolHref\n        ) +\n        '\">'\n    )\n    raw(encode(uri))\n    tag('</a>')\n  }\n  /** @type {Handle} */\n\n  function onexitautolinkemail(token) {\n    const uri = this.sliceSerialize(token)\n    tag('<a href=\"' + sanitizeUri('mailto:' + uri) + '\">')\n    raw(encode(uri))\n    tag('</a>')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownSpace} from 'micromark-util-character'\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {string} type\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n/** @type {Initializer} */\n\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n\n  let previous\n  return contentStart\n  /** @type {State} */\n\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n  /** @type {State} */\n\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n\n    if (previous) {\n      previous.next = token\n    }\n\n    previous = token\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Point} Point\n */\n\n/**\n * @typedef {Record<string, unknown>} StackState\n * @typedef {[Construct, StackState]} StackItem\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\n\nexport const document = {\n  tokenize: initializeDocument\n}\n/** @type {Construct} */\n\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n/** @type {Initializer} */\n\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext|undefined} */\n\n  let childFlow\n  /** @type {Token|undefined} */\n\n  let childToken\n  /** @type {number} */\n\n  let lineStartOffset\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    } // Done.\n\n    return checkNewContainers(code)\n  }\n  /** @type {State} */\n\n  function documentContinue(code) {\n    continued++ // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n\n      if (childFlow) {\n        closeFlow()\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point|undefined} */\n\n      let point // Find the flow chunk.\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      let index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n\n    return start(code)\n  }\n  /** @type {State} */\n\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      } // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      } // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    } // Check if there is a new container.\n\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n  /** @type {State} */\n\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n  /** @type {State} */\n\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n  /** @type {State} */\n\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState]) // Try another.\n\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n  /** @type {State} */\n\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow')) // Get ready for the next line.\n\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n\n    effects.consume(code)\n    return flowContinue\n  }\n  /**\n   * @param {Token} token\n   * @param {boolean} [eof]\n   * @returns {void}\n   */\n\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream) // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset && // …and either is not ended yet…\n          (!childFlow.events[index][1].end || // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean|undefined} */\n\n      let seen\n      /** @type {Point|undefined} */\n\n      let point // Find the previous chunk (the one before the lazy line).\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n\n          seen = true\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n    }\n  }\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n\n  function exitContainers(size) {\n    let index = stack.length // Exit open containers.\n\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n\n    stack.length = size\n  }\n\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContainer(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n\n/**\n * Classify whether a character code represents whitespace, punctuation, or\n * something else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * Note that eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n * @returns {number|undefined}\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {{resolveAll?: Resolver}[]} constructs\n * @param {Event[]} events\n * @param {TokenizeContext} context\n * @returns {Event[]}\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Resolver[]} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Point} Point\n */\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n\n  let open\n  /** @type {Token} */\n\n  let group\n  /** @type {Token} */\n\n  let text\n  /** @type {Token} */\n\n  let openingSequence\n  /** @type {Token} */\n\n  let closingSequence\n  /** @type {number} */\n\n  let use\n  /** @type {Event[]} */\n\n  let nextEvents\n  /** @type {number} */\n\n  let offset // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index // Now walk back to find an opener.\n\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open && // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          } // Number of markers to use from the sequence.\n\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = [] // If there are more markers in the opening, add them before.\n\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          } // Opening.\n\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ]) // Between.\n\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          ) // Closing.\n\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ]) // If there are more markers in the closing, add them after.\n\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  } // Remove remaining sequences.\n\n  index = -1\n\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('attentionSequence')\n    marker = code\n    return sequence(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return sequence\n    }\n\n    const token = effects.exit('attentionSequence')\n    const after = classifyCharacter(code)\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\n\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 1\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n\n    return asciiAtext(code) ? emailAtext(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function schemeOrEmailAtext(code) {\n    return code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)\n      ? schemeInsideOrEmailAtext(code)\n      : emailAtext(code)\n  }\n  /** @type {State} */\n\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      return urlInside\n    }\n\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n\n    return emailAtext(code)\n  }\n  /** @type {State} */\n\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      return end(code)\n    }\n\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return urlInside\n  }\n  /** @type {State} */\n\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (code === 62) {\n      // Exit, then change the type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      return end(code)\n    }\n\n    return emailValue(code)\n  }\n  /** @type {State} */\n\n  function emailValue(code) {\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      effects.consume(code)\n      return code === 45 ? emailValue : emailLabel\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.exit('autolink')\n    return ok\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return factorySpace(effects, afterWhitespace, 'linePrefix')\n  /** @type {State} */\n\n  function afterWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(blockQuote, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n/** @type {Exiter} */\n\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {asciiPunctuation} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n\n  let max\n  /** @type {(code: Code) => code is number} */\n\n  let test\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n  /** @type {State} */\n\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n  /** @type {State} */\n\n  function value(code) {\n    /** @type {Token} */\n    let token\n\n    if (code === 59 && size) {\n      token = effects.exit('characterReferenceValue')\n\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n\n  const closingFenceConstruct = {\n    tokenize: tokenizeClosingFence,\n    partial: true\n  }\n  /** @type {Construct} */\n\n  const nonLazyLine = {\n    tokenize: tokenizeNonLazyLine,\n    partial: true\n  }\n  const tail = this.events[this.events.length - 1]\n  const initialPrefix =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    marker = code\n    return sequenceOpen(code)\n  }\n  /** @type {State} */\n\n  function sequenceOpen(code) {\n    if (code === marker) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n\n    effects.exit('codeFencedFenceSequence')\n    return sizeOpen < 3\n      ? nok(code)\n      : factorySpace(effects, infoOpen, 'whitespace')(code)\n  }\n  /** @type {State} */\n\n  function infoOpen(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n  /** @type {State} */\n\n  function info(code) {\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, infoAfter, 'whitespace')(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return info\n  }\n  /** @type {State} */\n\n  function infoAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n  /** @type {State} */\n\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return openAfter(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return meta\n  }\n  /** @type {State} */\n\n  function openAfter(code) {\n    effects.exit('codeFencedFence')\n    return self.interrupt ? ok(code) : contentStart(code)\n  }\n  /** @type {State} */\n\n  function contentStart(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        nonLazyLine,\n        effects.attempt(\n          closingFenceConstruct,\n          after,\n          initialPrefix\n            ? factorySpace(\n                effects,\n                contentStart,\n                'linePrefix',\n                initialPrefix + 1\n              )\n            : contentStart\n        ),\n        after\n      )(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return contentContinue(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return contentStart(code)\n    }\n\n    effects.consume(code)\n    return contentContinue\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeNonLazyLine(effects, ok, nok) {\n    const self = this\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeClosingFence(effects, ok, nok) {\n    let size = 0\n    return factorySpace(\n      effects,\n      closingSequenceStart,\n      'linePrefix',\n      this.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n    /** @type {State} */\n\n    function closingSequenceStart(code) {\n      effects.enter('codeFencedFence')\n      effects.enter('codeFencedFenceSequence')\n      return closingSequence(code)\n    }\n    /** @type {State} */\n\n    function closingSequence(code) {\n      if (code === marker) {\n        effects.consume(code)\n        size++\n        return closingSequence\n      }\n\n      if (size < sizeOpen) return nok(code)\n      effects.exit('codeFencedFenceSequence')\n      return factorySpace(effects, closingSequenceEnd, 'whitespace')(code)\n    }\n    /** @type {State} */\n\n    function closingSequenceEnd(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n\n      return nok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n/** @type {Construct} */\n\nconst indentedContent = {\n  tokenize: tokenizeIndentedContent,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeIndented')\n    return factorySpace(effects, afterStartPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterStartPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? afterPrefix(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(indentedContent, afterPrefix, after)(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return content(code)\n  }\n  /** @type {State} */\n\n  function content(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return afterPrefix(code)\n    }\n\n    effects.consume(code)\n    return content\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeIndented')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeIndentedContent(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? start(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n/** @type {Resolver} */\n\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n\n  let index\n  /** @type {number|undefined} */\n\n  let enter // If we start and end with an EOL or a space.\n\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex // And we have data.\n\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  } // Merge adjacent spaces and data.\n\n  index = headEnterIndex - 1\n  tailExitIndex++\n\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n\n      enter = undefined\n    }\n  }\n\n  return events\n}\n/** @type {Previous} */\n\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n\n  let size\n  /** @type {Token} */\n\n  let token\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return openingSequence(code)\n  }\n  /** @type {State} */\n\n  function openingSequence(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return openingSequence\n    }\n\n    effects.exit('codeTextSequence')\n    return gap(code)\n  }\n  /** @type {State} */\n\n  function gap(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    } // Closing fence?\n    // Could also be data.\n\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return closingSequence(code)\n    } // Tabs don’t work, and virtual spaces don’t make sense.\n\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return gap\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return gap\n    } // Data.\n\n    effects.enter('codeTextData')\n    return data(code)\n  } // In code.\n\n  /** @type {State} */\n\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return gap(code)\n    }\n\n    effects.consume(code)\n    return data\n  } // Closing fence.\n\n  /** @type {State} */\n\n  function closingSequence(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return closingSequence\n    } // Done!\n\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    } // More or less accents: mark as data.\n\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {splice} from 'micromark-util-chunked'\n\n/**\n * Tokenize subcontent.\n *\n * @param {Event[]} events\n * @returns {boolean}\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n\n  let event\n  /** @type {number|undefined} */\n\n  let lineIndex\n  /** @type {number} */\n\n  let otherIndex\n  /** @type {Event} */\n\n  let otherEvent\n  /** @type {Event[]} */\n\n  let parameters\n  /** @type {Event[]} */\n\n  let subevents\n  /** @type {boolean|undefined} */\n\n  let more\n\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n\n    event = events[index] // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    } // Enter.\n\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    } // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start) // Switch container exit w/ line endings.\n\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n\n  return !more\n}\n/**\n * Tokenize embedded tokens.\n *\n * @param {Event[]} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\n\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {number[]} */\n\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {[number, number][]} */\n\n  const jumps = []\n  /** @type {Record<string, number>} */\n\n  const gaps = {}\n  /** @type {Chunk[]} */\n\n  let stream\n  /** @type {Token|undefined} */\n\n  let previous\n  let index = -1\n  /** @type {Token|undefined} */\n\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start] // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n\n    startPositions.push(startPosition)\n\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n\n      if (!current.next) {\n        stream.push(null)\n      }\n\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n\n      tokenizer.write(stream)\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    } // Unravel the next token.\n\n    previous = current\n    current = current.next\n  } // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n\n  current = token\n\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start) // Help GC.\n\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  } // Help GC.\n\n  tokenizer.events = [] // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  } // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n\n  index = breaks.length\n\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n\n  index = -1\n\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n/** @type {Construct} */\n\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\n\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token} */\n  let previous\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n  /** @type {State} */\n\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return data\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n  /** @type {State} */\n\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    const tail = self.events[self.events.length - 1]\n\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} literalType\n * @param {string} literalMarkerType\n * @param {string} rawType\n * @param {string} stringType\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return destinationEnclosedBefore\n    }\n\n    if (code === null || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationRaw(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return destinationEnclosedBefore(code)\n    }\n\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? destinationEnclosedEscape : destinationEnclosed\n  }\n  /** @type {State} */\n\n  function destinationEnclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return destinationEnclosed\n    }\n\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationRaw(code) {\n    if (code === 40) {\n      if (++balance > limit) return nok(code)\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === 41) {\n      if (!balance--) {\n        effects.exit('chunkString')\n        effects.exit(stringType)\n        effects.exit(rawType)\n        effects.exit(type)\n        return ok(code)\n      }\n\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      if (balance) return nok(code)\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n\n    if (asciiControl(code)) return nok(code)\n    effects.consume(code)\n    return code === 92 ? destinationRawEscape : destinationRaw\n  }\n  /** @type {State} */\n\n  function destinationRawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    return destinationRaw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @this {TokenizeContext}\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n\n  let data\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      (code === 93 && !data) ||\n      /* To do: remove in the future once we’ve switched from\n       * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n       * which doesn’t need this */\n\n      /* Hidden footnotes hook */\n\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs) ||\n      size > 999\n    ) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return label(code)\n  }\n  /** @type {State} */\n\n  function label(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n\n    effects.consume(code)\n    data = data || !markdownSpace(code)\n    return code === 92 ? labelEscape : label\n  }\n  /** @type {State} */\n\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return label\n    }\n\n    return label(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    marker = code === 40 ? 41 : code\n    return atFirstTitleBreak\n  }\n  /** @type {State} */\n\n  function atFirstTitleBreak(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    return atTitleBreak(code)\n  }\n  /** @type {State} */\n\n  function atTitleBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return atFirstTitleBreak(marker)\n    }\n\n    if (code === null) {\n      return nok(code)\n    } // Note: blank lines can’t exist in content.\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atTitleBreak, 'linePrefix')\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return title(code)\n  }\n  /** @type {State} */\n\n  function title(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atTitleBreak(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? titleEscape : title\n  }\n  /** @type {State} */\n\n  function titleEscape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return title\n    }\n\n    return title(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n/** @type {Construct} */\n\nconst titleConstruct = {\n  tokenize: tokenizeTitle,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n\n  let identifier\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('definition')\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker') // Note: blank lines can’t exist in content.\n\n      return factoryWhitespace(\n        effects,\n        factoryDestination(\n          effects,\n          effects.attempt(\n            titleConstruct,\n            factorySpace(effects, after, 'whitespace'),\n            factorySpace(effects, after, 'whitespace')\n          ),\n          nok,\n          'definitionDestination',\n          'definitionDestinationLiteral',\n          'definitionDestinationLiteralMarker',\n          'definitionDestinationRaw',\n          'definitionDestinationString'\n        )\n      )\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      if (!self.parser.defined.includes(identifier)) {\n        self.parser.defined.push(identifier)\n      }\n\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeTitle(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, before)(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function before(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factorySpace(effects, after, 'whitespace'),\n        nok,\n        'definitionTitle',\n        'definitionTitleMarker',\n        'definitionTitleString'\n      )(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('escapeMarker')\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n/** @type {Resolver} */\n\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n\n  let content\n  /** @type {Token} */\n\n  let text // Prefix whitespace, part of the opening.\n\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  } // Suffix whitespace, part of the closing.\n\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      // @ts-expect-error Constants are fine to assign.\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  const self = this\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('atxHeading')\n    effects.enter('atxHeadingSequence')\n    return fenceOpenInside(code)\n  }\n  /** @type {State} */\n\n  function fenceOpenInside(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return fenceOpenInside\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return self.interrupt ? ok(code) : headingBreak(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function headingBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequence(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      return ok(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headingBreak, 'whitespace')(code)\n    }\n\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequence\n    }\n\n    effects.exit('atxHeadingSequence')\n    return headingBreak(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return headingBreak(code)\n    }\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result\n * in more relaxed rules (condition 6): because they are known blocks, the\n * HTML-like syntax doesn’t have to be strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result in\n * HTML that can include lines w/o exiting, until a closing tag also in this\n * list is found (condition 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * Note that `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n/** @type {Construct} */\n\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n/** @type {Construct} */\n\nconst nextBlankConstruct = {\n  tokenize: tokenizeNextBlank,\n  partial: true\n}\n/** @type {Resolver} */\n\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start // Add the prefix start to the HTML line token.\n\n    events[index + 1][1].start = events[index - 2][1].start // Remove the line prefix.\n\n    events.splice(index - 2, 2)\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n\n  let kind\n  /** @type {boolean} */\n\n  let startTag\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {Code} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationStart\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      kind = 3 // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      startTag = true\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationStart(code) {\n    if (code === 45) {\n      effects.consume(code)\n      kind = 2\n      return commentOpenInside\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      kind = 5\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpenInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      kind = 4\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdataOpenInside(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length\n        ? self.interrupt\n          ? ok\n          : continuation\n        : cdataOpenInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      if (\n        code !== 47 &&\n        startTag &&\n        htmlRawNames.includes(buffer.toLowerCase())\n      ) {\n        kind = 1\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        kind = 6\n\n        if (code === 47) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      kind = 7 // Do not support complete HTML when interrupting\n\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : startTag\n        ? completeAttributeNameBefore(code)\n        : completeClosingTagAfter(code)\n    }\n\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuation\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    return completeAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n\n    return completeAttributeNameBefore(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return completeAttributeValueQuoted\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    marker = null\n    return completeAttributeValueUnquoted(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuoted(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    if (code === marker) {\n      effects.consume(code)\n      return completeAttributeValueQuotedAfter\n    }\n\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return code === null || markdownLineEnding(code)\n      ? continuation(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function continuation(code) {\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n\n    if (code === 60 && kind === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n\n    if (code === 62 && kind === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (code === 63 && kind === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    if (code === 93 && kind === 5) {\n      effects.consume(code)\n      return continuationCharacterDataInside\n    }\n\n    if (markdownLineEnding(code) && (kind === 6 || kind === 7)) {\n      return effects.check(\n        nextBlankConstruct,\n        continuationClose,\n        continuationAtLineEnding\n      )(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      return continuationAtLineEnding(code)\n    }\n\n    effects.consume(code)\n    return continuation\n  }\n  /** @type {State} */\n\n  function continuationAtLineEnding(code) {\n    effects.exit('htmlFlowData')\n    return htmlContinueStart(code)\n  }\n  /** @type {State} */\n\n  function htmlContinueStart(code) {\n    if (code === null) {\n      return done(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        {\n          tokenize: htmlLineEnd,\n          partial: true\n        },\n        htmlContinueStart,\n        done\n      )(code)\n    }\n\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n  /** @type {Tokenizer} */\n\n  function htmlLineEnd(effects, ok, nok) {\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {State} */\n\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawEndTag(code) {\n    if (code === 62 && htmlRawNames.includes(buffer.toLowerCase())) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationCharacterDataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    } // More dashes.\n\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return done(code)\n    }\n\n    effects.consume(code)\n    return continuationClose\n  }\n  /** @type {State} */\n\n  function done(code) {\n    effects.exit('htmlFlow')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeNextBlank(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.exit('htmlFlowData')\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>|undefined} */\n\n  let marker\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {State} */\n\n  let returnState\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpen\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpen\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentStart\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentStart(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentStartDash\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function commentStartDash(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return comment\n  }\n  /** @type {State} */\n\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return end\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function cdataOpen(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length ? cdata : cdataOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return cdata\n  }\n  /** @type {State} */\n\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return declaration\n  }\n  /** @type {State} */\n\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return instruction\n  }\n  /** @type {State} */\n\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagClose(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return tagCloseBetween(code)\n  }\n  /** @type {State} */\n\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpen(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    return tagOpenAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n\n    return tagOpenBetween(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    effects.consume(code)\n    marker = undefined\n    return tagOpenAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return tagOpenAttributeValueQuotedAfter\n    }\n\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 62 || code === 47 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  } // We can’t have blank lines in content, so no need to worry about empty\n  // tokens.\n\n  /** @type {State} */\n\n  function atLineEnding(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(\n      effects,\n      afterPrefix,\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n/** @type {Construct} */\n\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\n\nconst fullReferenceConstruct = {\n  tokenize: tokenizeFullReference\n}\n/** @type {Construct} */\n\nconst collapsedReferenceConstruct = {\n  tokenize: tokenizeCollapsedReference\n}\n/** @type {Resolver} */\n\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  /** @type {Token} */\n\n  let token\n\n  while (++index < events.length) {\n    token = events[index][1]\n\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n\n  return events\n}\n/** @type {Resolver} */\n\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n\n  let token\n  /** @type {number|undefined} */\n\n  let open\n  /** @type {number|undefined} */\n\n  let close\n  /** @type {Event[]} */\n\n  let media // Find an opening.\n\n  while (index--) {\n    token = events[index][1]\n\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      } // Mark other link openings as inactive, as we can’t have links in\n      // links.\n\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ] // Opening marker.\n\n  media = push(media, events.slice(open + 1, open + offset + 3)) // Text open.\n\n  media = push(media, [['enter', text, context]]) // Between.\n\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  ) // Text close, marker close, label close.\n\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ]) // Reference, resource, or so.\n\n  media = push(media, events.slice(close + 1)) // Media close.\n\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n\n  let labelStart\n  /** @type {boolean} */\n\n  let defined // Find an opening.\n\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!labelStart) {\n      return nok(code)\n    } // It’s a balanced bracket, but contains a link.\n\n    if (labelStart._inactive) return balanced(code)\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return afterLabelEnd\n  }\n  /** @type {State} */\n\n  function afterLabelEnd(code) {\n    // Resource: `[asd](fgh)`.\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        ok,\n        defined ? ok : balanced\n      )(code)\n    } // Collapsed (`[asd][]`) or full (`[asd][fgh]`) reference?\n\n    if (code === 91) {\n      return effects.attempt(\n        fullReferenceConstruct,\n        ok,\n        defined\n          ? effects.attempt(collapsedReferenceConstruct, ok, balanced)\n          : balanced\n      )(code)\n    } // Shortcut reference: `[asd]`?\n\n    return defined ? ok(code) : balanced(code)\n  }\n  /** @type {State} */\n\n  function balanced(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeResource(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return factoryWhitespace(effects, open)\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 41) {\n      return end(code)\n    }\n\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      nok,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n  /** @type {State} */\n\n  function destinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, between)(code)\n      : end(code)\n  }\n  /** @type {State} */\n\n  function between(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factoryWhitespace(effects, end),\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeFullReference(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      afterLabel,\n      nok,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function afterLabel(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCollapsedReference(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook. */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('thematicBreak')\n    marker = code\n    return atBreak(code)\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    if (size < 3 || (code !== null && !markdownLineEnding(code))) {\n      return nok(code)\n    }\n\n    effects.exit('thematicBreak')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n\n    effects.exit('thematicBreakSequence')\n    return atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @typedef {Record<string, unknown> & {marker: Code, type: string, size: number}} ListContainerState\n * @typedef {TokenizeContext & {containerState: ListContainerState}} TokenizeContextWithState\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n/** @type {Construct} */\n\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n/** @type {Construct} */\n\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n/** @type {Construct} */\n\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n\n    return nok(code)\n  }\n  /**\n   * @type {State}\n   **/\n\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine, // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n  /** @type {State} */\n\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine // We have a blank line.\n    // Still, try to consume at most the items size.\n\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n  /** @type {State} */\n\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n  /** @type {State} */\n\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true // As we’re closing flow, we’re no longer interrupting.\n\n    self.interrupt = undefined\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n/**\n * @type {Exiter}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n/** @type {Resolver} */\n\nfunction resolveToSetextUnderline(events, context) {\n  let index = events.length\n  /** @type {number|undefined} */\n\n  let content\n  /** @type {number|undefined} */\n\n  let text\n  /** @type {number|undefined} */\n\n  let definition // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    } // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  } // Change the paragraph to setext heading text.\n\n  events[text][1].type = 'setextHeadingText' // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  } // Add the heading exit at the end.\n\n  events.push(['exit', heading, context])\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  /** @type {boolean} */\n\n  let paragraph // Find an opening.\n\n  while (index--) {\n    // Skip enter/exit of line ending, line prefix, and content.\n    // We can now either have a definition or a paragraph.\n    if (\n      self.events[index][1].type !== 'lineEnding' &&\n      self.events[index][1].type !== 'linePrefix' &&\n      self.events[index][1].type !== 'content'\n    ) {\n      paragraph = self.events[index][1].type === 'paragraph'\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      effects.enter('setextHeadingLineSequence')\n      marker = code\n      return closingSequence(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function closingSequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return closingSequence\n    }\n\n    effects.exit('setextHeadingLineSequence')\n    return factorySpace(effects, closingSequenceEnd, 'lineSuffix')(code)\n  }\n  /** @type {State} */\n\n  function closingSequenceEnd(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n/** @type {Initializer} */\n\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding, // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n  /** @type {State} */\n\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n  /** @type {State} */\n\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n/**\n * @param {'string'|'text'} field\n * @returns {InitialConstruct}\n */\n\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n  /** @type {Initializer} */\n\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n    /** @type {State} */\n\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n    /** @type {State} */\n\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      } // Data.\n\n      effects.consume(code)\n      return data\n    }\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n\n      const list = constructs[code]\n      let index = -1\n\n      if (list) {\n        while (++index < list.length) {\n          const item = list[index]\n\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n\n      return false\n    }\n  }\n}\n/**\n * @param {Resolver} [extraResolver]\n * @returns {Resolver}\n */\n\nfunction createResolver(extraResolver) {\n  return resolveAllText\n  /** @type {Resolver} */\n\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number|undefined} */\n\n    let enter // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n\n        enter = undefined\n      }\n    }\n\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\n\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean|undefined} */\n\n      let tabs\n\n      while (index--) {\n        const chunk = chunks[index]\n\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n\n          if (bufferIndex) break\n          bufferIndex = -1\n        } // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n\n      eventIndex++\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n */\n\n/**\n * @typedef Info\n * @property {() => void} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_index'|'_bufferIndex'>} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n\n  let chunks = []\n  /** @type {Array<Token>} */\n\n  let stack = []\n  /** @type {boolean|undefined} */\n\n  let consumed = true\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n  /**\n   * The state function.\n   *\n   * @type {State|void}\n   */\n\n  let state = initialize.tokenize.call(context, effects)\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n\n  let expectedCode\n\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n\n  return context\n  /** @type {TokenizeContext['write']} */\n\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main() // Exit if we’re not done, resolve might change stuff.\n\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n\n    addResult(initialize, 0) // Otherwise, resolve, and exit.\n\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  } //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n  /** @type {TokenizeContext['sliceStream']} */\n\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n  /** @type {TokenizeContext['now']} */\n\n  function now() {\n    return Object.assign({}, point)\n  }\n  /** @type {TokenizeContext['defineSkip']} */\n\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  } //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index] // If we’re in a buffer chunk, loop through it.\n\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n  /** @type {Effects['consume']} */\n\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    } // Not in a string chunk.\n\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++ // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    } // Expose the previous character.\n\n    context.previous = code // Mark as consumed.\n\n    consumed = true\n  }\n  /** @type {Effects['enter']} */\n\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n  /** @type {Effects['exit']} */\n\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {Record<string, unknown>} [fields]\n   */\n\n  function constructFactory(onreturn, fields) {\n    return hook\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Construct|Array<Construct>|ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State} [bogusState]\n     * @returns {State}\n     */\n\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n\n      let constructIndex\n      /** @type {Construct} */\n\n      let currentConstruct\n      /** @type {Info} */\n\n      let info\n      return Array.isArray(constructs)\n        ? /* c8 ignore next 1 */\n          handleListOfConstructs(constructs)\n        : 'tokenize' in constructs // @ts-expect-error Looks like a construct.\n        ? handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n\n      function handleMapOfConstructs(map) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n\n        if (list.length === 0) {\n          return bogusState\n        }\n\n        return handleConstruct(list[constructIndex])\n      }\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n\n      function handleConstruct(construct) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n      /** @type {State} */\n\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n      /** @type {State} */\n\n      function nok(code) {\n        consumed = true\n        info.restore()\n\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n\n        return bogusState\n      }\n    }\n  }\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'start'|'end'>} token\n * @returns {Array<Chunk>}\n */\n\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n\n  let view\n\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n\n    if (startBufferIndex > -1) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view[0] = view[0].slice(startBufferIndex)\n    }\n\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n\n  return view\n}\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean} [expandTabs=false]\n * @returns {string}\n */\n\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n\n  const result = []\n  /** @type {boolean|undefined} */\n\n  let atTab\n\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n\n    let value\n\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n\n        case -4: {\n          value = '\\n'\n          break\n        }\n\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n\n    atTab = chunk === -2\n    result.push(value)\n  }\n\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n/** @type {Extension['document']} */\n\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n/** @type {Extension['contentInitial']} */\n\nexport const contentInitial = {\n  [91]: definition\n}\n/** @type {Extension['flowInitial']} */\n\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n/** @type {Extension['flow']} */\n\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n/** @type {Extension['string']} */\n\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n/** @type {Extension['text']} */\n\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n/** @type {Extension['insideSpan']} */\n\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n/** @type {Extension['attentionMarkers']} */\n\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n/** @type {Extension['disable']} */\n\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Create} Create\n */\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n/**\n * @param {ParseOptions} [options]\n * @returns {ParseContext}\n */\n\nexport function parse(options = {}) {\n  /** @type {FullNormalizedExtension} */\n  // @ts-expect-error `defaultConstructs` is full, so the result will be too.\n  const constructs = combineExtensions(\n    // @ts-expect-error Same as above.\n    [defaultConstructs].concat(options.extensions || [])\n  )\n  /** @type {ParseContext} */\n\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n  /**\n   * @param {InitialConstruct} initial\n   */\n\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\n\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding} [encoding]\n * @param {boolean} [end=false]\n * @returns {Array<Chunk>}\n */\nconst search = /[\\0\\t\\n\\r]/g\n/**\n * @returns {Preprocessor}\n */\n\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean|undefined} */\n\n  let start = true\n  /** @type {boolean|undefined} */\n\n  let atCarriageReturn\n  return preprocessor\n  /** @type {Preprocessor} */\n\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray|null} */\n\n    let match\n    /** @type {number} */\n\n    let next\n    /** @type {number} */\n\n    let startPosition\n    /** @type {number} */\n\n    let endPosition\n    /** @type {Code} */\n\n    let code // @ts-expect-error `Buffer` does allow an encoding.\n\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n\n    if (start) {\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n\n      start = undefined\n    }\n\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n\n            while (column++ < next) chunks.push(-1)\n\n            break\n          }\n\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n\n      startPosition = endPosition + 1\n    }\n\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n\n    return chunks\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Options} Options\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('micromark-util-types').Encoding} Encoding\n */\nimport {compile} from './lib/compile.js'\nimport {parse} from './lib/parse.js'\nimport {postprocess} from './lib/postprocess.js'\nimport {preprocess} from './lib/preprocess.js'\n/**\n * @param value Markdown to parse (`string` or `Buffer`).\n * @param [encoding] Character encoding to understand `value` as when it’s a `Buffer` (`string`, default: `'utf8'`).\n * @param [options] Configuration\n */\n\nexport const micromark =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options) => string) &\n   *   ((value: Value, options?: Options) => string)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding} [encoding]\n   * @param {Options} [options]\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n\n    return compile(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiControl,\n  asciiDigit,\n  markdownLineEndingOrSpace,\n  markdownLineEnding,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\nconst www = {\n  tokenize: tokenizeWww,\n  partial: true\n}\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n}\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n}\nconst punctuation = {\n  tokenize: tokenizePunctuation,\n  partial: true\n}\nconst namedCharacterReference = {\n  tokenize: tokenizeNamedCharacterReference,\n  partial: true\n}\nconst wwwAutolink = {\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n}\nconst httpAutolink = {\n  tokenize: tokenizeHttpAutolink,\n  previous: previousHttp\n}\nconst emailAutolink = {\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n}\n/** @type {ConstructRecord} */\n\nconst text = {}\n/** @type {Extension} */\n\nexport const gfmAutolinkLiteral = {\n  text\n}\nlet code = 48 // Add alphanumerics.\n\nwhile (code < 123) {\n  text[code] = emailAutolink\n  code++\n  if (code === 58) code = 65\n  else if (code === 91) code = 97\n}\n\ntext[43] = emailAutolink\ntext[45] = emailAutolink\ntext[46] = emailAutolink\ntext[95] = emailAutolink\ntext[72] = [emailAutolink, httpAutolink]\ntext[104] = [emailAutolink, httpAutolink]\ntext[87] = [emailAutolink, wwwAutolink]\ntext[119] = [emailAutolink, wwwAutolink]\n/** @type {Tokenizer} */\n\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this\n  /** @type {boolean} */\n\n  let hasDot\n  /** @type {boolean|undefined} */\n\n  let hasDigitInLastSegment\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (\n      !gfmAtext(code) ||\n      !previousEmail(self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkEmail')\n    return atext(code)\n  }\n  /** @type {State} */\n\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code)\n      return atext\n    }\n\n    if (code === 64) {\n      effects.consume(code)\n      return label\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function label(code) {\n    if (code === 46) {\n      return effects.check(punctuation, done, dotContinuation)(code)\n    }\n\n    if (code === 45 || code === 95) {\n      return effects.check(punctuation, nok, dashOrUnderscoreContinuation)(code)\n    }\n\n    if (asciiAlphanumeric(code)) {\n      if (!hasDigitInLastSegment && asciiDigit(code)) {\n        hasDigitInLastSegment = true\n      }\n\n      effects.consume(code)\n      return label\n    }\n\n    return done(code)\n  }\n  /** @type {State} */\n\n  function dotContinuation(code) {\n    effects.consume(code)\n    hasDot = true\n    hasDigitInLastSegment = undefined\n    return label\n  }\n  /** @type {State} */\n\n  function dashOrUnderscoreContinuation(code) {\n    effects.consume(code)\n    return afterDashOrUnderscore\n  }\n  /** @type {State} */\n\n  function afterDashOrUnderscore(code) {\n    if (code === 46) {\n      return effects.check(punctuation, nok, dotContinuation)(code)\n    }\n\n    return label(code)\n  }\n  /** @type {State} */\n\n  function done(code) {\n    if (hasDot && !hasDigitInLastSegment) {\n      effects.exit('literalAutolinkEmail')\n      effects.exit('literalAutolink')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (\n      (code !== 87 && code !== 119) ||\n      !previousWww(self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkWww') // For `www.` we check instead of attempt, because when it matches, GH\n    // treats it as part of a domain (yes, it says a valid domain must come\n    // after `www.`, but that’s not how it’s implemented by them).\n\n    return effects.check(\n      www,\n      effects.attempt(domain, effects.attempt(path, done), nok),\n      nok\n    )(code)\n  }\n  /** @type {State} */\n\n  function done(code) {\n    effects.exit('literalAutolinkWww')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHttpAutolink(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (\n      (code !== 72 && code !== 104) ||\n      !previousHttp(self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkHttp')\n    effects.consume(code)\n    return t1\n  }\n  /** @type {State} */\n\n  function t1(code) {\n    if (code === 84 || code === 116) {\n      effects.consume(code)\n      return t2\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function t2(code) {\n    if (code === 84 || code === 116) {\n      effects.consume(code)\n      return p\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function p(code) {\n    if (code === 80 || code === 112) {\n      effects.consume(code)\n      return s\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function s(code) {\n    if (code === 83 || code === 115) {\n      effects.consume(code)\n      return colon\n    }\n\n    return colon(code)\n  }\n  /** @type {State} */\n\n  function colon(code) {\n    if (code === 58) {\n      effects.consume(code)\n      return slash1\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function slash1(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return slash2\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function slash2(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    return code === null ||\n      asciiControl(code) ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)\n      ? nok(code)\n      : effects.attempt(domain, effects.attempt(path, done), nok)(code)\n  }\n  /** @type {State} */\n\n  function done(code) {\n    effects.exit('literalAutolinkHttp')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeWww(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.consume(code)\n    return w2\n  }\n  /** @type {State} */\n\n  function w2(code) {\n    if (code === 87 || code === 119) {\n      effects.consume(code)\n      return w3\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function w3(code) {\n    if (code === 87 || code === 119) {\n      effects.consume(code)\n      return dot\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function dot(code) {\n    if (code === 46) {\n      effects.consume(code)\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? nok(code) : ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean|undefined} */\n  let hasUnderscoreInLastSegment\n  /** @type {boolean|undefined} */\n\n  let hasUnderscoreInLastLastSegment\n  return domain\n  /** @type {State} */\n\n  function domain(code) {\n    if (code === 38) {\n      return effects.check(\n        namedCharacterReference,\n        done,\n        punctuationContinuation\n      )(code)\n    }\n\n    if (code === 46 || code === 95) {\n      return effects.check(punctuation, done, punctuationContinuation)(code)\n    } // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n\n    if (\n      code === null ||\n      asciiControl(code) ||\n      unicodeWhitespace(code) ||\n      (code !== 45 && unicodePunctuation(code))\n    ) {\n      return done(code)\n    }\n\n    effects.consume(code)\n    return domain\n  }\n  /** @type {State} */\n\n  function punctuationContinuation(code) {\n    if (code === 46) {\n      hasUnderscoreInLastLastSegment = hasUnderscoreInLastSegment\n      hasUnderscoreInLastSegment = undefined\n      effects.consume(code)\n      return domain\n    }\n\n    if (code === 95) hasUnderscoreInLastSegment = true\n    effects.consume(code)\n    return domain\n  }\n  /** @type {State} */\n\n  function done(code) {\n    if (!hasUnderscoreInLastLastSegment && !hasUnderscoreInLastSegment) {\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizePath(effects, ok) {\n  let balance = 0\n  return inPath\n  /** @type {State} */\n\n  function inPath(code) {\n    if (code === 38) {\n      return effects.check(\n        namedCharacterReference,\n        ok,\n        continuedPunctuation\n      )(code)\n    }\n\n    if (code === 40) {\n      balance++\n    }\n\n    if (code === 41) {\n      return effects.check(\n        punctuation,\n        parenAtPathEnd,\n        continuedPunctuation\n      )(code)\n    }\n\n    if (pathEnd(code)) {\n      return ok(code)\n    }\n\n    if (trailingPunctuation(code)) {\n      return effects.check(punctuation, ok, continuedPunctuation)(code)\n    }\n\n    effects.consume(code)\n    return inPath\n  }\n  /** @type {State} */\n\n  function continuedPunctuation(code) {\n    effects.consume(code)\n    return inPath\n  }\n  /** @type {State} */\n\n  function parenAtPathEnd(code) {\n    balance--\n    return balance < 0 ? ok(code) : continuedPunctuation(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeNamedCharacterReference(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.consume(code)\n    return inside\n  }\n  /** @type {State} */\n\n  function inside(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return inside\n    }\n\n    if (code === 59) {\n      effects.consume(code)\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    // If the named character reference is followed by the end of the path, it’s\n    // not continued punctuation.\n    return pathEnd(code) ? ok(code) : nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizePunctuation(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.consume(code)\n    return after\n  }\n  /** @type {State} */\n\n  function after(code) {\n    // Check the next.\n    if (trailingPunctuation(code)) {\n      effects.consume(code)\n      return after\n    } // If the punctuation marker is followed by the end of the path, it’s not\n    // continued punctuation.\n\n    return pathEnd(code) ? ok(code) : nok(code)\n  }\n}\n/**\n * @param {Code} code\n * @returns {boolean}\n */\n\nfunction trailingPunctuation(code) {\n  return (\n    code === 33 ||\n    code === 34 ||\n    code === 39 ||\n    code === 41 ||\n    code === 42 ||\n    code === 44 ||\n    code === 46 ||\n    code === 58 ||\n    code === 59 ||\n    code === 60 ||\n    code === 63 ||\n    code === 95 ||\n    code === 126\n  )\n}\n/**\n * @param {Code} code\n * @returns {boolean}\n */\n\nfunction pathEnd(code) {\n  return code === null || code === 60 || markdownLineEndingOrSpace(code)\n}\n/**\n * @param {Code} code\n * @returns {boolean}\n */\n\nfunction gfmAtext(code) {\n  return (\n    code === 43 ||\n    code === 45 ||\n    code === 46 ||\n    code === 95 ||\n    asciiAlphanumeric(code)\n  )\n}\n/** @type {Previous} */\n\nfunction previousWww(code) {\n  return (\n    code === null ||\n    code === 40 ||\n    code === 42 ||\n    code === 95 ||\n    code === 126 ||\n    markdownLineEndingOrSpace(code)\n  )\n}\n/** @type {Previous} */\n\nfunction previousHttp(code) {\n  return code === null || !asciiAlpha(code)\n}\n/** @type {Previous} */\n\nfunction previousEmail(code) {\n  return code !== 47 && previousHttp(code)\n}\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\n\nfunction previousUnbalanced(events) {\n  let index = events.length\n  let result = false\n\n  while (index--) {\n    const token = events[index][1]\n\n    if (\n      (token.type === 'labelLink' || token.type === 'labelImage') &&\n      !token._balanced\n    ) {\n      result = true\n      break\n    } // @ts-expect-error If we’ve seen this token, and it was marked as not\n    // having any unbalanced bracket before it, we can exit.\n\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false\n      break\n    }\n  }\n\n  if (events.length > 0 && !result) {\n    // @ts-expect-error Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true\n  }\n\n  return result\n}\n","/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').Handle} Handle\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n * @typedef {import('micromark-util-types').Token} Token\n */\nimport {sanitizeUri} from 'micromark-util-sanitize-uri'\n/** @type {HtmlExtension} */\n\nexport const gfmAutolinkLiteralHtml = {\n  exit: {\n    literalAutolinkEmail,\n    literalAutolinkHttp,\n    literalAutolinkWww\n  }\n}\n/** @type {Handle} */\n\nfunction literalAutolinkWww(token) {\n  anchorFromToken.call(this, token, 'http://')\n}\n/** @type {Handle} */\n\nfunction literalAutolinkEmail(token) {\n  anchorFromToken.call(this, token, 'mailto:')\n}\n/** @type {Handle} */\n\nfunction literalAutolinkHttp(token) {\n  anchorFromToken.call(this, token)\n}\n/**\n * @this CompileContext\n * @param {Token} token\n * @param {string} [protocol]\n * @returns {void}\n */\n\nfunction anchorFromToken(token, protocol) {\n  const url = this.sliceSerialize(token)\n  this.tag('<a href=\"' + sanitizeUri((protocol || '') + url) + '\">')\n  this.raw(this.encode(url))\n  this.tag('</a>')\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {blankLine} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n/**\n * @returns {Extension}\n */\n\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {Token} */\n\n  let labelStart // Find an opening.\n\n  while (index--) {\n    const token = self.events[index][1]\n\n    if (token.type === 'labelImage') {\n      labelStart = token\n      break\n    } // Exit if we’ve walked far enough.\n\n    if (\n      token.type === 'gfmFootnoteCall' ||\n      token.type === 'labelLink' ||\n      token.type === 'label' ||\n      token.type === 'image' ||\n      token.type === 'link'\n    ) {\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code)\n    }\n\n    const id = normalizeIdentifier(\n      self.sliceSerialize({\n        start: labelStart.end,\n        end: self.now()\n      })\n    )\n\n    if (id.charCodeAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code)\n    }\n\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return ok(code)\n  }\n}\n/** @type {Resolver} */\n\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length\n  /** @type {Token|undefined} */\n\n  let labelStart // Find an opening.\n\n  while (index--) {\n    if (\n      events[index][1].type === 'labelImage' &&\n      events[index][0] === 'enter'\n    ) {\n      labelStart = events[index][1]\n      break\n    }\n  }\n\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = 'data'\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker' // The whole (without `!`):\n\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  } // The `^` marker\n\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  } // Increment the end 1 character.\n\n  marker.end.column++\n  marker.end.offset++\n  marker.end._bufferIndex++\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  }\n  const chunk = {\n    type: 'chunkString',\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  }\n  /** @type {Array<Event>} */\n\n  const replacement = [\n    // Take the `labelImageMarker` (now `data`, the `!`)\n    events[index + 1],\n    events[index + 2],\n    ['enter', call, context], // The `[`\n    events[index + 3],\n    events[index + 4], // The `^`.\n    ['enter', marker, context],\n    ['exit', marker, context], // Everything in between.\n    ['enter', string, context],\n    ['enter', chunk, context],\n    ['exit', chunk, context],\n    ['exit', string, context], // The ending (`]`, properly parsed and labelled).\n    events[events.length - 2],\n    events[events.length - 1],\n    ['exit', call, context]\n  ]\n  events.splice(index, events.length - index + 1, ...replacement)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  let size = 0\n  /** @type {boolean} */\n\n  let data\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('gfmFootnoteCall')\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return callStart\n  }\n  /** @type {State} */\n\n  function callStart(code) {\n    if (code !== 94) return nok(code)\n    effects.enter('gfmFootnoteCallMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallMarker')\n    effects.enter('gfmFootnoteCallString')\n    effects.enter('chunkString').contentType = 'string'\n    return callData\n  }\n  /** @type {State} */\n\n  function callData(code) {\n    /** @type {Token} */\n    let token\n\n    if (code === null || code === 91 || size++ > 999) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      if (!data) {\n        return nok(code)\n      }\n\n      effects.exit('chunkString')\n      token = effects.exit('gfmFootnoteCallString')\n      return defined.includes(normalizeIdentifier(self.sliceSerialize(token)))\n        ? end(code)\n        : nok(code)\n    }\n\n    effects.consume(code)\n\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n\n    return code === 92 ? callEscape : callData\n  }\n  /** @type {State} */\n\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return callData\n    }\n\n    return callData(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    effects.exit('gfmFootnoteCall')\n    return ok\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {string} */\n\n  let identifier\n  let size = 0\n  /** @type {boolean|undefined} */\n\n  let data\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true\n    effects.enter('gfmFootnoteDefinitionLabel')\n    effects.enter('gfmFootnoteDefinitionLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteDefinitionLabelMarker')\n    return labelStart\n  }\n  /** @type {State} */\n\n  function labelStart(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionMarker')\n      effects.enter('gfmFootnoteDefinitionLabelString')\n      return atBreak\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    /** @type {Token} */\n    let token\n\n    if (code === null || code === 91 || size > 999) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      if (!data) {\n        return nok(code)\n      }\n\n      token = effects.exit('gfmFootnoteDefinitionLabelString')\n      identifier = normalizeIdentifier(self.sliceSerialize(token))\n      effects.enter('gfmFootnoteDefinitionLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionLabelMarker')\n      effects.exit('gfmFootnoteDefinitionLabel')\n      return labelAfter\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      size++\n      return atBreak\n    }\n\n    effects.enter('chunkString').contentType = 'string'\n    return label(code)\n  }\n  /** @type {State} */\n\n  function label(code) {\n    if (\n      code === null ||\n      markdownLineEnding(code) ||\n      code === 91 ||\n      code === 93 ||\n      size > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n\n    size++\n    effects.consume(code)\n    return code === 92 ? labelEscape : label\n  }\n  /** @type {State} */\n\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return label\n    }\n\n    return label(code)\n  }\n  /** @type {State} */\n\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker') // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n\n      return factorySpace(effects, done, 'gfmFootnoteDefinitionWhitespace')\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function done(code) {\n    if (!defined.includes(identifier)) {\n      defined.push(identifier)\n    }\n\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok))\n}\n/** @type {Exiter} */\n\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition')\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'gfmFootnoteDefinitionIndent',\n    4 + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'gfmFootnoteDefinitionIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === 4\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n *\n * @typedef Options\n * @property {string} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute to prevent it from *clobbering*.\n *   attributes.\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=x></p>\n *   <script>alert(x)</script>\n *   ```\n *\n *   Elements by their ID are made available in browsers on the `window` object.\n *   Using a prefix prevents this from being a problem.\n * @property {string} [label='Footnotes']\n *   Label to use for the footnotes section.\n *   Affects screen reader users.\n *   Change it if you’re authoring in a different language.\n * @property {string} [backLabel='Back to content']\n *   Label to use from backreferences back to their footnote call.\n *   Affects screen reader users.\n *   Change it if you’re authoring in a different language.\n */\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {sanitizeUri} from 'micromark-util-sanitize-uri'\nconst own = {}.hasOwnProperty\n/**\n * @param {Options} [options={}]\n * @returns {HtmlExtension}\n */\n\nexport function gfmFootnoteHtml(options = {}) {\n  const label = options.label || 'Footnotes'\n  const backLabel = options.backLabel || 'Back to content'\n  const clobberPrefix =\n    options.clobberPrefix === undefined || options.clobberPrefix === null\n      ? 'user-content-'\n      : options.clobberPrefix\n  return {\n    enter: {\n      gfmFootnoteDefinition() {\n        const stack =\n          /** @type {Array<boolean>} */\n          this.getData('tightStack')\n        stack.push(false)\n      },\n\n      gfmFootnoteDefinitionLabelString() {\n        this.buffer()\n      },\n\n      gfmFootnoteCallString() {\n        this.buffer()\n      }\n    },\n    exit: {\n      gfmFootnoteDefinition() {\n        let definitions =\n          /** @type {Record<string, string>} */\n          this.getData('gfmFootnoteDefinitions')\n        const footnoteStack =\n          /** @type {Array<string>} */\n          this.getData('gfmFootnoteDefinitionStack')\n        const tightStack =\n          /** @type {Array<boolean>} */\n          this.getData('tightStack')\n        const current = footnoteStack.pop()\n        const value = this.resume()\n\n        if (!definitions) {\n          this.setData('gfmFootnoteDefinitions', (definitions = {}))\n        }\n\n        if (!own.call(definitions, current)) definitions[current] = value\n        tightStack.pop()\n        this.setData('slurpOneLineEnding', true) // “Hack” to prevent a line ending from showing up if we’re in a definition in\n        // an empty list item.\n\n        this.setData('lastWasTag')\n      },\n\n      gfmFootnoteDefinitionLabelString(token) {\n        let footnoteStack =\n          /** @type {Array<string>} */\n          this.getData('gfmFootnoteDefinitionStack')\n\n        if (!footnoteStack) {\n          this.setData('gfmFootnoteDefinitionStack', (footnoteStack = []))\n        }\n\n        footnoteStack.push(normalizeIdentifier(this.sliceSerialize(token)))\n        this.resume() // Drop the label.\n\n        this.buffer() // Get ready for a value.\n      },\n\n      gfmFootnoteCallString(token) {\n        let calls =\n          /** @type {Array<string>|undefined} */\n          this.getData('gfmFootnoteCallOrder')\n        let counts =\n          /** @type {Record<string, number>|undefined} */\n          this.getData('gfmFootnoteCallCounts')\n        const id = normalizeIdentifier(this.sliceSerialize(token))\n        /** @type {number} */\n\n        let counter\n        this.resume()\n        if (!calls) this.setData('gfmFootnoteCallOrder', (calls = []))\n        if (!counts) this.setData('gfmFootnoteCallCounts', (counts = {}))\n        const index = calls.indexOf(id)\n        const safeId = sanitizeUri(id.toLowerCase())\n\n        if (index === -1) {\n          calls.push(id)\n          counts[id] = 1\n          counter = calls.length\n        } else {\n          counts[id]++\n          counter = index + 1\n        }\n\n        const reuseCounter = counts[id]\n        this.tag(\n          '<sup><a href=\"#' +\n            clobberPrefix +\n            'fn-' +\n            safeId +\n            '\" id=\"' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (reuseCounter > 1 ? '-' + reuseCounter : '') +\n            '\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">' +\n            String(counter) +\n            '</a></sup>'\n        )\n      },\n\n      null() {\n        const calls =\n          /** @type {Array<string>} */\n          this.getData('gfmFootnoteCallOrder') || []\n        const counts =\n          /** @type {Record<string, number>} */\n          this.getData('gfmFootnoteCallCounts') || {}\n        const definitions =\n          /** @type {Record<string, string>} */\n          this.getData('gfmFootnoteDefinitions') || {}\n        let index = -1\n\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded()\n          this.tag(\n            '<section data-footnotes=\"\" class=\"footnotes\"><h2 id=\"footnote-label\" class=\"sr-only\">'\n          )\n          this.raw(this.encode(label))\n          this.tag('</h2>')\n          this.lineEndingIfNeeded()\n          this.tag('<ol>')\n        }\n\n        while (++index < calls.length) {\n          // Called definitions are always defined.\n          const id = calls[index]\n          const safeId = sanitizeUri(id.toLowerCase())\n          let referenceIndex = 0\n          /** @type {Array<string>} */\n\n          const references = []\n\n          while (++referenceIndex <= counts[id]) {\n            references.push(\n              '<a href=\"#' +\n                clobberPrefix +\n                'fnref-' +\n                safeId +\n                (referenceIndex > 1 ? '-' + referenceIndex : '') +\n                '\" data-footnote-backref=\"\" class=\"data-footnote-backref\" aria-label=\"' +\n                this.encode(backLabel) +\n                '\">↩' +\n                (referenceIndex > 1\n                  ? '<sup>' + referenceIndex + '</sup>'\n                  : '') +\n                '</a>'\n            )\n          }\n\n          const reference = references.join(' ')\n          let injected = false\n          this.lineEndingIfNeeded()\n          this.tag('<li id=\"' + clobberPrefix + 'fn-' + safeId + '\">')\n          this.lineEndingIfNeeded()\n          this.tag(\n            definitions[id].replace(\n              /<\\/p>(?:\\r?\\n|\\r)?$/,\n              (\n                /** @type {string} */\n                $0\n              ) => {\n                injected = true\n                return ' ' + reference + $0\n              }\n            )\n          )\n\n          if (!injected) {\n            this.lineEndingIfNeeded()\n            this.tag(reference)\n          }\n\n          this.lineEndingIfNeeded()\n          this.tag('</li>')\n        }\n\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded()\n          this.tag('</ol>')\n          this.lineEndingIfNeeded()\n          this.tag('</section>')\n        }\n      }\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\n/** @type {HtmlExtension} */\nexport const gfmStrikethroughHtml = {\n  enter: {\n    strikethrough() {\n      this.tag('<del>')\n    }\n  },\n  exit: {\n    strikethrough() {\n      this.tag('</del>')\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n/**\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean} [singleTilde=true]\n *   Whether to support strikethrough with a single tilde (`boolean`, default:\n *   `true`).\n *   Single tildes work on github.com, but are technically prohibited by the\n *   GFM spec.\n */\nimport {splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/**\n * @param {Options} [options]\n * @returns {Extension}\n */\nexport function gfmStrikethrough(options = {}) {\n  let single = options.singleTilde\n  const tokenizer = {\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  }\n\n  if (single === null || single === undefined) {\n    single = true\n  }\n\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  }\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n\n  function resolveAllStrikethrough(events, context) {\n    let index = -1 // Walk through all events.\n\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (\n        events[index][0] === 'enter' &&\n        events[index][1].type === 'strikethroughSequenceTemporary' &&\n        events[index][1]._close\n      ) {\n        let open = index // Now walk back to find an opener.\n\n        while (open--) {\n          // Find a token that can open the closer.\n          if (\n            events[open][0] === 'exit' &&\n            events[open][1].type === 'strikethroughSequenceTemporary' &&\n            events[open][1]._open && // If the sizes are the same:\n            events[index][1].end.offset - events[index][1].start.offset ===\n              events[open][1].end.offset - events[open][1].start.offset\n          ) {\n            events[index][1].type = 'strikethroughSequence'\n            events[open][1].type = 'strikethroughSequence'\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            }\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            } // Opening.\n\n            const nextEvents = [\n              ['enter', strikethrough, context],\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context],\n              ['enter', text, context]\n            ] // Between.\n\n            splice(\n              nextEvents,\n              nextEvents.length,\n              0,\n              resolveAll(\n                context.parser.constructs.insideSpan.null,\n                events.slice(open + 1, index),\n                context\n              )\n            ) // Closing.\n\n            splice(nextEvents, nextEvents.length, 0, [\n              ['exit', text, context],\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context],\n              ['exit', strikethrough, context]\n            ])\n            splice(events, open - 1, index - open + 3, nextEvents)\n            index = open + nextEvents.length - 2\n            break\n          }\n        }\n      }\n    }\n\n    index = -1\n\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = 'data'\n      }\n    }\n\n    return events\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous\n    const events = this.events\n    let size = 0\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      if (\n        previous === 126 &&\n        events[events.length - 1][1].type !== 'characterEscape'\n      ) {\n        return nok(code)\n      }\n\n      effects.enter('strikethroughSequenceTemporary')\n      return more(code)\n    }\n    /** @type {State} */\n\n    function more(code) {\n      const before = classifyCharacter(previous)\n\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code)\n        effects.consume(code)\n        size++\n        return more\n      }\n\n      if (size < 2 && !single) return nok(code)\n      const token = effects.exit('strikethroughSequenceTemporary')\n      const after = classifyCharacter(code)\n      token._open = !after || (after === 2 && Boolean(before))\n      token._close = !before || (before === 2 && Boolean(after))\n      return ok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('./syntax.js').Align} Align\n */\nconst alignment = {\n  none: '',\n  left: ' align=\"left\"',\n  right: ' align=\"right\"',\n  center: ' align=\"center\"'\n}\n/** @type {HtmlExtension} */\n\nexport const gfmTableHtml = {\n  enter: {\n    table(token) {\n      /** @type {Array<Align>} */\n      // @ts-expect-error Custom.\n      const tableAlign = token._align\n      this.lineEndingIfNeeded()\n      this.tag('<table>')\n      this.setData('tableAlign', tableAlign)\n    },\n\n    tableBody() {\n      // Clear slurping line ending from the delimiter row.\n      this.setData('slurpOneLineEnding')\n      this.tag('<tbody>')\n    },\n\n    tableData() {\n      const tableAlign =\n        /** @type {Array<Align>} */\n        this.getData('tableAlign')\n      const tableColumn =\n        /** @type {number} */\n        this.getData('tableColumn')\n      const align = alignment[tableAlign[tableColumn]]\n\n      if (align === undefined) {\n        // Capture results to ignore them.\n        this.buffer()\n      } else {\n        this.lineEndingIfNeeded()\n        this.tag('<td' + align + '>')\n      }\n    },\n\n    tableHead() {\n      this.lineEndingIfNeeded()\n      this.tag('<thead>')\n    },\n\n    tableHeader() {\n      const tableAlign =\n        /** @type {Array<Align>} */\n        this.getData('tableAlign')\n      const tableColumn =\n        /** @type {number} */\n        this.getData('tableColumn')\n      const align = alignment[tableAlign[tableColumn]]\n      this.lineEndingIfNeeded()\n      this.tag('<th' + align + '>')\n    },\n\n    tableRow() {\n      this.setData('tableColumn', 0)\n      this.lineEndingIfNeeded()\n      this.tag('<tr>')\n    }\n  },\n  exit: {\n    // Overwrite the default code text data handler to unescape escaped pipes when\n    // they are in tables.\n    codeTextData(token) {\n      let value = this.sliceSerialize(token)\n\n      if (this.getData('tableAlign')) {\n        value = value.replace(/\\\\([\\\\|])/g, replace)\n      }\n\n      this.raw(this.encode(value))\n    },\n\n    table() {\n      this.setData('tableAlign') // If there was no table body, make sure the slurping from the delimiter row\n      // is cleared.\n\n      this.setData('slurpAllLineEndings')\n      this.lineEndingIfNeeded()\n      this.tag('</table>')\n    },\n\n    tableBody() {\n      this.lineEndingIfNeeded()\n      this.tag('</tbody>')\n    },\n\n    tableData() {\n      const tableAlign =\n        /** @type {Array<Align>} */\n        this.getData('tableAlign')\n      const tableColumn =\n        /** @type {number} */\n        this.getData('tableColumn')\n\n      if (tableColumn in tableAlign) {\n        this.tag('</td>')\n        this.setData('tableColumn', tableColumn + 1)\n      } else {\n        // Stop capturing.\n        this.resume()\n      }\n    },\n\n    tableHead() {\n      this.lineEndingIfNeeded()\n      this.tag('</thead>')\n      this.setData('slurpOneLineEnding', true) // Slurp the line ending from the delimiter row.\n    },\n\n    tableHeader() {\n      const tableColumn =\n        /** @type {number} */\n        this.getData('tableColumn')\n      this.tag('</th>')\n      this.setData('tableColumn', tableColumn + 1)\n    },\n\n    tableRow() {\n      const tableAlign =\n        /** @type {Array<Align>} */\n        this.getData('tableAlign')\n      let tableColumn =\n        /** @type {number} */\n        this.getData('tableColumn')\n\n      while (tableColumn < tableAlign.length) {\n        this.lineEndingIfNeeded()\n        this.tag('<td' + alignment[tableAlign[tableColumn]] + '></td>')\n        tableColumn++\n      }\n\n      this.setData('tableColumn', tableColumn)\n      this.lineEndingIfNeeded()\n      this.tag('</tr>')\n    }\n  }\n}\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\n\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n */\n\n/**\n * @typedef {'left'|'center'|'right'|'none'} Align\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n\n/** @type {Extension} */\nexport const gfmTable = {\n  flow: {\n    null: {\n      tokenize: tokenizeTable,\n      resolve: resolveTable\n    }\n  }\n}\nconst nextPrefixedOrBlank = {\n  tokenize: tokenizeNextPrefixedOrBlank,\n  partial: true\n}\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1\n  /** @type {boolean|undefined} */\n\n  let inHead\n  /** @type {boolean|undefined} */\n\n  let inDelimiterRow\n  /** @type {boolean|undefined} */\n\n  let inRow\n  /** @type {number|undefined} */\n\n  let contentStart\n  /** @type {number|undefined} */\n\n  let contentEnd\n  /** @type {number|undefined} */\n\n  let cellStart\n  /** @type {boolean|undefined} */\n\n  let seenCellInRow\n\n  while (++index < events.length) {\n    const token = events[index][1]\n\n    if (inRow) {\n      if (token.type === 'temporaryTableCellContent') {\n        contentStart = contentStart || index\n        contentEnd = index\n      }\n\n      if (\n        // Combine separate content parts into one.\n        (token.type === 'tableCellDivider' || token.type === 'tableRow') &&\n        contentEnd\n      ) {\n        const content = {\n          type: 'tableContent',\n          start: events[contentStart][1].start,\n          end: events[contentEnd][1].end\n        }\n        /** @type {Token} */\n\n        const text = {\n          type: 'chunkText',\n          start: content.start,\n          end: content.end,\n          // @ts-expect-error It’s fine.\n          contentType: 'text'\n        }\n        events.splice(\n          contentStart,\n          contentEnd - contentStart + 1,\n          ['enter', content, context],\n          ['enter', text, context],\n          ['exit', text, context],\n          ['exit', content, context]\n        )\n        index -= contentEnd - contentStart - 3\n        contentStart = undefined\n        contentEnd = undefined\n      }\n    }\n\n    if (\n      events[index][0] === 'exit' &&\n      cellStart !== undefined &&\n      cellStart + (seenCellInRow ? 0 : 1) < index &&\n      (token.type === 'tableCellDivider' ||\n        (token.type === 'tableRow' &&\n          (cellStart + 3 < index ||\n            events[cellStart][1].type !== 'whitespace')))\n    ) {\n      const cell = {\n        type: inDelimiterRow\n          ? 'tableDelimiter'\n          : inHead\n          ? 'tableHeader'\n          : 'tableData',\n        start: events[cellStart][1].start,\n        end: events[index][1].end\n      }\n      events.splice(index + (token.type === 'tableCellDivider' ? 1 : 0), 0, [\n        'exit',\n        cell,\n        context\n      ])\n      events.splice(cellStart, 0, ['enter', cell, context])\n      index += 2\n      cellStart = index + 1\n      seenCellInRow = true\n    }\n\n    if (token.type === 'tableRow') {\n      inRow = events[index][0] === 'enter'\n\n      if (inRow) {\n        cellStart = index + 1\n        seenCellInRow = false\n      }\n    }\n\n    if (token.type === 'tableDelimiterRow') {\n      inDelimiterRow = events[index][0] === 'enter'\n\n      if (inDelimiterRow) {\n        cellStart = index + 1\n        seenCellInRow = false\n      }\n    }\n\n    if (token.type === 'tableHead') {\n      inHead = events[index][0] === 'enter'\n    }\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this\n  /** @type {Array<Align>} */\n\n  const align = []\n  let tableHeaderCount = 0\n  /** @type {boolean|undefined} */\n\n  let seenDelimiter\n  /** @type {boolean|undefined} */\n\n  let hasDash\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // @ts-expect-error Custom.\n    effects.enter('table')._align = align\n    effects.enter('tableHead')\n    effects.enter('tableRow') // If we start with a pipe, we open a cell marker.\n\n    if (code === 124) {\n      return cellDividerHead(code)\n    }\n\n    tableHeaderCount++\n    effects.enter('temporaryTableCellContent') // Can’t be space or eols at the start of a construct, so we’re in a cell.\n\n    return inCellContentHead(code)\n  }\n  /** @type {State} */\n\n  function cellDividerHead(code) {\n    effects.enter('tableCellDivider')\n    effects.consume(code)\n    effects.exit('tableCellDivider')\n    seenDelimiter = true\n    return cellBreakHead\n  }\n  /** @type {State} */\n\n  function cellBreakHead(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return atRowEndHead(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter('whitespace')\n      effects.consume(code)\n      return inWhitespaceHead\n    }\n\n    if (seenDelimiter) {\n      seenDelimiter = undefined\n      tableHeaderCount++\n    }\n\n    if (code === 124) {\n      return cellDividerHead(code)\n    } // Anything else is cell content.\n\n    effects.enter('temporaryTableCellContent')\n    return inCellContentHead(code)\n  }\n  /** @type {State} */\n\n  function inWhitespaceHead(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return inWhitespaceHead\n    }\n\n    effects.exit('whitespace')\n    return cellBreakHead(code)\n  }\n  /** @type {State} */\n\n  function inCellContentHead(code) {\n    // EOF, whitespace, pipe\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('temporaryTableCellContent')\n      return cellBreakHead(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? inCellContentEscapeHead : inCellContentHead\n  }\n  /** @type {State} */\n\n  function inCellContentEscapeHead(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return inCellContentHead\n    } // Anything else.\n\n    return inCellContentHead(code)\n  }\n  /** @type {State} */\n\n  function atRowEndHead(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    effects.exit('tableRow')\n    effects.exit('tableHead')\n    const originalInterrupt = self.interrupt\n    self.interrupt = true\n    return effects.attempt(\n      {\n        tokenize: tokenizeRowEnd,\n        partial: true\n      },\n      function (code) {\n        self.interrupt = originalInterrupt\n        effects.enter('tableDelimiterRow')\n        return atDelimiterRowBreak(code)\n      },\n      function (code) {\n        self.interrupt = originalInterrupt\n        return nok(code)\n      }\n    )(code)\n  }\n  /** @type {State} */\n\n  function atDelimiterRowBreak(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return rowEndDelimiter(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter('whitespace')\n      effects.consume(code)\n      return inWhitespaceDelimiter\n    }\n\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller')\n      effects.consume(code)\n      hasDash = true\n      align.push('none')\n      return inFillerDelimiter\n    }\n\n    if (code === 58) {\n      effects.enter('tableDelimiterAlignment')\n      effects.consume(code)\n      effects.exit('tableDelimiterAlignment')\n      align.push('left')\n      return afterLeftAlignment\n    } // If we start with a pipe, we open a cell marker.\n\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return atDelimiterRowBreak\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function inWhitespaceDelimiter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return inWhitespaceDelimiter\n    }\n\n    effects.exit('whitespace')\n    return atDelimiterRowBreak(code)\n  }\n  /** @type {State} */\n\n  function inFillerDelimiter(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return inFillerDelimiter\n    }\n\n    effects.exit('tableDelimiterFiller')\n\n    if (code === 58) {\n      effects.enter('tableDelimiterAlignment')\n      effects.consume(code)\n      effects.exit('tableDelimiterAlignment')\n      align[align.length - 1] =\n        align[align.length - 1] === 'left' ? 'center' : 'right'\n      return afterRightAlignment\n    }\n\n    return atDelimiterRowBreak(code)\n  }\n  /** @type {State} */\n\n  function afterLeftAlignment(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller')\n      effects.consume(code)\n      hasDash = true\n      return inFillerDelimiter\n    } // Anything else is not ok.\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function afterRightAlignment(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return rowEndDelimiter(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter('whitespace')\n      effects.consume(code)\n      return inWhitespaceDelimiter\n    } // `|`\n\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return atDelimiterRowBreak\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function rowEndDelimiter(code) {\n    effects.exit('tableDelimiterRow') // Exit if there was no dash at all, or if the header cell count is not the\n    // delimiter cell count.\n\n    if (!hasDash || tableHeaderCount !== align.length) {\n      return nok(code)\n    }\n\n    if (code === null) {\n      return tableClose(code)\n    }\n\n    return effects.check(\n      nextPrefixedOrBlank,\n      tableClose,\n      effects.attempt(\n        {\n          tokenize: tokenizeRowEnd,\n          partial: true\n        },\n        factorySpace(effects, bodyStart, 'linePrefix', 4),\n        tableClose\n      )\n    )(code)\n  }\n  /** @type {State} */\n\n  function tableClose(code) {\n    effects.exit('table')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function bodyStart(code) {\n    effects.enter('tableBody')\n    return rowStartBody(code)\n  }\n  /** @type {State} */\n\n  function rowStartBody(code) {\n    effects.enter('tableRow') // If we start with a pipe, we open a cell marker.\n\n    if (code === 124) {\n      return cellDividerBody(code)\n    }\n\n    effects.enter('temporaryTableCellContent') // Can’t be space or eols at the start of a construct, so we’re in a cell.\n\n    return inCellContentBody(code)\n  }\n  /** @type {State} */\n\n  function cellDividerBody(code) {\n    effects.enter('tableCellDivider')\n    effects.consume(code)\n    effects.exit('tableCellDivider')\n    return cellBreakBody\n  }\n  /** @type {State} */\n\n  function cellBreakBody(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return atRowEndBody(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter('whitespace')\n      effects.consume(code)\n      return inWhitespaceBody\n    } // `|`\n\n    if (code === 124) {\n      return cellDividerBody(code)\n    } // Anything else is cell content.\n\n    effects.enter('temporaryTableCellContent')\n    return inCellContentBody(code)\n  }\n  /** @type {State} */\n\n  function inWhitespaceBody(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return inWhitespaceBody\n    }\n\n    effects.exit('whitespace')\n    return cellBreakBody(code)\n  }\n  /** @type {State} */\n\n  function inCellContentBody(code) {\n    // EOF, whitespace, pipe\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('temporaryTableCellContent')\n      return cellBreakBody(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? inCellContentEscapeBody : inCellContentBody\n  }\n  /** @type {State} */\n\n  function inCellContentEscapeBody(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return inCellContentBody\n    } // Anything else.\n\n    return inCellContentBody(code)\n  }\n  /** @type {State} */\n\n  function atRowEndBody(code) {\n    effects.exit('tableRow')\n\n    if (code === null) {\n      return tableBodyClose(code)\n    }\n\n    return effects.check(\n      nextPrefixedOrBlank,\n      tableBodyClose,\n      effects.attempt(\n        {\n          tokenize: tokenizeRowEnd,\n          partial: true\n        },\n        factorySpace(effects, rowStartBody, 'linePrefix', 4),\n        tableBodyClose\n      )\n    )(code)\n  }\n  /** @type {State} */\n\n  function tableBodyClose(code) {\n    effects.exit('tableBody')\n    return tableClose(code)\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeRowEnd(effects, ok, nok) {\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, prefixed, 'linePrefix')\n    }\n    /** @type {State} */\n\n    function prefixed(code) {\n      // Blank or interrupting line.\n      if (\n        self.parser.lazy[self.now().line] ||\n        code === null ||\n        markdownLineEnding(code)\n      ) {\n        return nok(code)\n      }\n\n      const tail = self.events[self.events.length - 1] // Indented code can interrupt delimiter and body rows.\n\n      if (\n        !self.parser.constructs.disable.null.includes('codeIndented') &&\n        tail &&\n        tail[1].type === 'linePrefix' &&\n        tail[2].sliceSerialize(tail[1], true).length >= 4\n      ) {\n        return nok(code)\n      }\n\n      self._gfmTableDynamicInterruptHack = true\n      return effects.check(\n        self.parser.constructs.flow,\n        function (code) {\n          self._gfmTableDynamicInterruptHack = false\n          return nok(code)\n        },\n        function (code) {\n          self._gfmTableDynamicInterruptHack = false\n          return ok(code)\n        }\n      )(code)\n    }\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeNextPrefixedOrBlank(effects, ok, nok) {\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // This is a check, so we don’t care about tokens, but we open a bogus one\n    // so we’re valid.\n    effects.enter('check') // EOL.\n\n    effects.consume(code)\n    return whitespace\n  }\n  /** @type {State} */\n\n  function whitespace(code) {\n    if (code === -1 || code === 32) {\n      effects.consume(code)\n      size++\n      return size === 4 ? ok : whitespace\n    } // EOF or whitespace\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      return ok(code)\n    } // Anything else.\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n */\n\n/**\n * An opening or closing tag, followed by a case-insensitive specific tag name,\n * followed by HTML whitespace, a greater than, or a slash.\n */\nconst reFlow =\n  /<(\\/?)(iframe|noembed|noframes|plaintext|script|style|title|textarea|xmp)(?=[\\t\\n\\f\\r />])/gi\n\n/**\n * As HTML (text) parses tags separately (and v. strictly), we don’t need to be\n * global.\n */\nconst reText = new RegExp('^' + reFlow.source, 'i')\n\n/** @type {HtmlExtension} */\nexport const gfmTagfilterHtml = {\n  exit: {\n    htmlFlowData(token) {\n      exitHtmlData.call(this, token, reFlow)\n    },\n    htmlTextData(token) {\n      exitHtmlData.call(this, token, reText)\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @param {Token} token\n * @param {RegExp} filter\n */\nfunction exitHtmlData(token, filter) {\n  let value = this.sliceSerialize(token)\n\n  if (this.options.allowDangerousHtml) {\n    value = value.replace(filter, '&lt;$1$2')\n  }\n\n  this.raw(this.encode(value))\n}\n","/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\n/** @type {HtmlExtension} */\nexport const gfmTaskListItemHtml = {\n  enter: {\n    taskListCheck() {\n      this.tag('<input type=\"checkbox\" disabled=\"\" ')\n    }\n  },\n  exit: {\n    taskListCheck() {\n      this.tag('/>')\n    },\n\n    taskListCheckValueChecked() {\n      this.tag('checked=\"\" ')\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\nconst tasklistCheck = {\n  tokenize: tokenizeTasklistCheck\n}\nexport const gfmTaskListItem = {\n  text: {\n    [91]: tasklistCheck\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this\n  return open\n  /** @type {State} */\n\n  function open(code) {\n    if (\n      // Exit if there’s stuff before.\n      self.previous !== null || // Exit if not in the first content that is the first child of a list\n      // item.\n      !self._gfmTasklistFirstContentOfListItem\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('taskListCheck')\n    effects.enter('taskListCheckMarker')\n    effects.consume(code)\n    effects.exit('taskListCheckMarker')\n    return inside\n  }\n  /** @type {State} */\n\n  function inside(code) {\n    // To match how GH works in comments, use `markdownSpace` (`[ \\t]`) instead\n    // of `markdownLineEndingOrSpace` (`[ \\t\\r\\n]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueUnchecked')\n      return close\n    }\n\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueChecked')\n      return close\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker')\n      effects.consume(code)\n      effects.exit('taskListCheckMarker')\n      effects.exit('taskListCheck')\n      return effects.check(\n        {\n          tokenize: spaceThenNonSpace\n        },\n        ok,\n        nok\n      )\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction spaceThenNonSpace(effects, ok, nok) {\n  const self = this\n  return factorySpace(effects, after, 'whitespace')\n  /** @type {State} */\n\n  function after(code) {\n    const tail = self.events[self.events.length - 1]\n    return (\n      // We either found spaces…\n      ((tail && tail[1].type === 'whitespace') || // …or it was followed by a line ending, in which case, there has to be\n        // non-whitespace after that line ending, because otherwise we’d get an\n        // EOF as the content is closed with blank lines.\n        markdownLineEnding(code)) &&\n        code !== null\n        ? ok(code)\n        : nok(code)\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Support GFM or markdown on github.com.\n *\n * @param {Options} [options]\n * @returns {Extension}\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral,\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable,\n    gfmTaskListItem\n  ])\n}\n\n/**\n * Support to compile GFM to HTML.\n *\n * @param {HtmlOptions} [options]\n * @returns {HtmlExtension}\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml,\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml,\n    gfmTableHtml,\n    gfmTagfilterHtml,\n    gfmTaskListItemHtml\n  ])\n}\n","<template>\n  <div class=\"shadow relative flex flex-col min-w-0 rounded text-sm overflow-hidden cursor-pointer bg-gray-100 dark:bg-darkest dark:text-gray-300\">\n    <div v-html=\"html\" class=\"flex-grow flex-shrink overflow-hidden p-4 prose max-w-none prose-sm prose-img:rounded prose-h1:font-normal prose-h1:text-2xl dark:prose-invert\"></div>\n    <CoreDivider class=\"mx-2\" />\n    <div class=\"flex items-center justify-between p-4\">\n      <p class=\"text-gray-500\">{{ updated }}</p>\n      <div v-if=\"allowDiscard\">\n        <button v-if=\"discardedAt\" @click.stop=\"restore\" class=\"destroy button-flat button-size-medium text-sm bg-gray-200 hover:bg-gray-300 dark:bg-gray-900 dark:hover:bg-gray-800\">\n          <svg height=\"1.25em\" width=\"1.25em\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\n          </svg>\n          <span class=\"ml-2\">Restore</span>\n        </button>\n        <button v-else @click.stop=\"discard\" class=\"destroy button-flat button-size-medium button-color-surface text-sm text-red-500\">\n          <svg height=\"1.25em\" width=\"1.25em\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\n          </svg>\n          <span class=\"ml-2\">Discard</span>\n        </button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { micromark } from 'micromark'\nimport { gfm, gfmHtml } from 'micromark-extension-gfm'\nimport moment from 'moment'\nimport CoreDivider from '/components/CoreDivider.vue'\n\nimport {\n  DISCARD_DOCUMENT,\n  RESTORE_DOCUMENT,\n} from '/src/store/actions.js';\n\nexport default {\n  components: {\n    CoreDivider,\n  },\n  props: {\n    id: String,\n    text: String,\n    updatedAt: Date,\n    discardedAt: Date,\n    allowDiscard: Boolean,\n  },\n  computed: {\n    html() {\n      return micromark(this.text, { extensions: [gfm()], htmlExtensions: [gfmHtml()] })\n    },\n    updated() {\n      return `Updated on ${moment(this.updatedAt).format('ddd, MMM Do, YYYY [at] h:mm A')}`;\n    },\n  },\n  methods: {\n    discard() {\n      this.$store.dispatch(DISCARD_DOCUMENT, { id: this.id });\n    },\n    restore() {\n      this.$store.dispatch(RESTORE_DOCUMENT, { id: this.id });\n    },\n  },\n};\n</script>\n","<template>\n  <div class=\"flex flex-col w-full\">\n    <h2 class=\"action text-3xl capitalize mb-2\">My Docs</h2>\n    <p v-if=\"tag || filter\" class=\"flex items-center gap-1 text-gray-500\">\n      Filtering docs as\n      <strong class=\"inline-flex items-center\">\n        <span v-if=\"tag\" class=\"inline-flex items-center gap-0.5\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"3\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M7 20l4-16m2 16l4-16M6 9h14M4 15h14\" />\n          </svg>\n          <span>{{ tag }}</span>\n        </span>\n        <span v-else class=\"\">{{ filter }}</span>\n      </strong>\n    </p>\n    <div class=\"mb-4 mt-8\">\n      <button @click=\"toggleIsEditing\" class=\"button button-size-medium button-color-gray shadow\">{{ isEditing ? 'Cancel' : 'Manage Docs' }}</button>\n      <button v-if=\"canMerge\" @click=\"mergeDocs\" class=\"button button-size-medium button-color-gray shadow ml-2\">Merge Docs</button>\n      <div>\n        <p v-if=\"isEditing\" class=\"text-gray-700 mt-2\">Select two or more docs to merge them together.</p>\n      </div>\n    </div>\n    <div class=\"mb-4\">\n      <div class=\"flex align-items-bottom\">\n        <div class=\"flex-grow\">\n          <div class=\"flex\">\n            <input v-model=\"q\" ref=\"input\" type=\"text\" class=\"form-text w-full shadow\" placeholder=\"Search with /regex/i or plain text...\" autocomplete=\"off\">\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"grid gap-4 grid-cols-1\" :class=\"cols === 2 && 'lg:grid-cols-2'\">\n      <div v-for=\"doc in visibleDocs\" :key=\"doc.id\" @keypress.enter.prevent=\"selectDoc(doc.id)\" @click=\"selectDoc(doc.id)\" tabindex=\"0\" class=\"rounded relative cursor-pointer outline-none focus:ring\">\n        <Doc v-bind=\"doc\" :allowDiscard=\"isEditing\" class=\"h-96\" />\n        <div v-if=\"doc.selected\" class=\"flex items-center justify-center rounded absolute inset-0 bg-black bg-opacity-10 dark:bg-opacity-50\">\n          <svg height=\"3em\" width=\"3em\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n          </svg>\n        </div>\n      </div>\n      <div v-if=\"showLoadMore\" class=\"flex items-center justify-center rounded cursor-pointer\">\n        <div @click=\"loadMore\" class=\"button button-color-gray text-lg px-8 py-6\">\n          <svg height=\"1.25em\" width=\"1.25em\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n          </svg>\n          <span class=\"ml-3\">Load More</span>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Doc from '/components/Doc.vue'\nimport Tag from '/components/Tag.vue'\n\nimport { open } from '/src/router.js'\n\nimport {\n  MERGE_DOCUMENTS,\n} from '/src/store/actions.js'\n\nconst REGEX_QUERY = /^\\/(?<regex>.+)\\/(?<flags>[a-z]*)$/s\n\nexport default {\n  emits: ['update:query'],\n  components: {\n    Doc,\n    Tag,\n  },\n  props: {\n    cols: {\n      default: 2,\n      type: Number,\n    },\n    filter: String,\n    query: String,\n    tag: String,\n  },\n  data() {\n    return {\n      isEditing: false,\n      q: this.query,\n      selectedDocs: [],\n      visibleCount: 25,\n    }\n  },\n  watch: {\n    q(value) {\n      this.$emit('update:query', value)\n    }\n  },\n  computed: {\n    action() {\n      return this.tag || this.filter || 'My docs'\n    },\n    canMerge() {\n      return this.selectedDocs.length > 1\n    },\n    docs() {\n      if (this.tag) { return this.$store.getters.withTag(this.tag) }\n      if (this.filter === 'tasks') { return this.$store.getters.tasks }\n      if (this.filter === 'discarded') { return this.$store.getters.discarded }\n      if (this.filter === 'untagged') { return this.$store.getters.untagged }\n\n      return this.$store.getters.kept\n    },\n    filteredDocs() {\n      return this.docs.filter((doc) => {\n        if (!this.q) { return true }\n\n        try {\n          const { groups: { flags, regex } } = REGEX_QUERY.exec(this.q)\n\n          return (new RegExp(regex, flags)).test(doc.text)\n        } catch (_error) {\n          return doc.text.toLowerCase().includes(this.q.toLowerCase())\n        }\n      })\n    },\n    finalDocs() {\n      return this.filteredDocs.map((doc) => ({\n        ...doc,\n        selected: this.selectedDocs.includes(doc),\n      }))\n    },\n    showLoadMore() {\n      return this.visibleCount <= this.finalDocs.length\n    },\n    visibleDocs() {\n      return this.finalDocs.slice(0, this.visibleCount)\n    },\n  },\n  methods: {\n    loadMore() {\n      this.visibleCount += 25\n    },\n    mergeDocs() {\n      this.$store.dispatch(MERGE_DOCUMENTS, this.selectedDocs)\n\n      this.selectedDocs = []\n    },\n    toggleIsEditing() {\n      this.isEditing = !this.isEditing\n\n      if (!this.isEditing) {\n        this.selectedDocs = []\n      }\n    },\n    selectDoc(id) {\n      if (this.isEditing) {\n        if (this.selectedDocs.find(doc => doc.id === id)) {\n          this.selectedDocs = this.selectedDocs.filter(doc => doc.id !== id)\n        } else {\n          this.selectedDocs.push(this.filteredDocs.find(doc => doc.id === id))\n        }\n      } else {\n        open({ path: `/docs/${id}` })\n      }\n    },\n  },\n  mounted() {\n    this.$refs.input.focus()\n  },\n}\n</script>\n"],"names":["characterReference","list","hasOwnProperty","code","replace","value","encode","compile","lineEnding","buffer","previous","_encode","context","content","document","constructs","open","text","attentionMarkers","effects","ok","nok","self","start","tokenizeIndent","definition","flow","string","exit","from","resolveText","domain","_sfc_main","moment","_hoisted_1","_hoisted_3","_hoisted_4","_createElementVNode","_hoisted_7","_hoisted_6","_hoisted_10","_hoisted_9","_openBlock","_createElementBlock","_createVNode","_toDisplayString","_hoisted_5","Tag","_normalizeClass","_Fragment","_renderList","_withKeys","_withModifiers","_mergeProps"],"mappings":"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"}