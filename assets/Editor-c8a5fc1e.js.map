{"version":3,"file":"Editor-c8a5fc1e.js","sources":["../../node_modules/ink-mde/vue/dist/client.js","../../node_modules/mime-db/index.js","../../__vite-browser-external","../../node_modules/mime-types/index.js","../../src/firebase/storage.ts","../../src/vendor/plugins/hashtags/completions.ts","../../src/vendor/plugins/hashtags/index.ts","../../node_modules/khroma/dist/methods/contrast.js","../../src/utils/dom.ts","../../src/vendor/plugins/mermaid/theme.ts","../../src/vendor/plugins/mermaid/widget.ts","../../src/vendor/plugins/mermaid/index.ts","../../src/vendor/plugins/references/completions.ts","../../src/vendor/plugins/references/replacements.ts","../../src/vendor/plugins/references/index.ts","../../src/vendor/plugins/urls/utils.ts","../../src/vendor/plugins/urls/clickable.ts","../../src/vendor/plugins/urls/theme.ts","../../src/vendor/plugins/urls/grammar.ts","../../src/vendor/plugins/urls/index.ts","../../src/vendor/plugins/index.ts","../../components/Editor.vue"],"sourcesContent":["import { ink as s, renderToString as r } from \"ink-mde\";\nimport { defineComponent as a, openBlock as d, createElementBlock as p } from \"vue\";\nconst h = a({\n  name: \"InkMde\",\n  emits: [\"update:modelValue\"],\n  props: {\n    modelValue: {\n      type: String\n    },\n    options: {\n      type: Object\n    }\n  },\n  data() {\n    return {\n      html: \"\",\n      instance: void 0\n    };\n  },\n  watch: {\n    modelValue(t) {\n      var n, e;\n      ((n = this.instance) == null ? void 0 : n.getDoc()) !== t && ((e = this.instance) == null || e.update(t));\n    },\n    options: {\n      deep: !0,\n      handler(t, n) {\n        var e;\n        (e = this.instance) == null || e.reconfigure(t);\n      }\n    }\n  },\n  methods: {\n    tryInit() {\n      var t;\n      this.$refs.ink && !this.instance && (this.instance = s(this.$refs.ink, {\n        ...this.options,\n        doc: this.modelValue,\n        hooks: {\n          ...(t = this.options) == null ? void 0 : t.hooks,\n          afterUpdate: (n) => {\n            var e, i;\n            this.$emit(\"update:modelValue\", n), (i = (e = this.options) == null ? void 0 : e.hooks) != null && i.afterUpdate && this.options.hooks.afterUpdate(n);\n          }\n        }\n      }), this.$refs.ink.addEventListener(\"input\", (n) => {\n        n.stopPropagation();\n      }), this.instance.focus());\n    }\n  },\n  created() {\n    ({ BASE_URL: \"/\", MODE: \"production\", DEV: !1, PROD: !0 }).VITE_SSR && (this.html = r(this.options));\n  },\n  mounted() {\n    this.tryInit();\n  },\n  updated() {\n    this.tryInit();\n  }\n}), c = (t, n) => {\n  const e = t.__vccOpts || t;\n  for (const [i, o] of n)\n    e[i] = o;\n  return e;\n}, f = [\"innerHTML\"];\nfunction l(t, n, e, i, o, u) {\n  return d(), p(\"div\", {\n    ref: \"ink\",\n    innerHTML: t.html\n  }, null, 8, f);\n}\nconst _ = /* @__PURE__ */ c(h, [[\"render\", l]]);\nexport {\n  _ as default\n};\n//# sourceMappingURL=client.js.map\n","/*!\n * mime-db\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015-2022 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n/**\n * Module exports.\n */\n\nmodule.exports = require('./db.json')\n","export default {}","/*!\n * mime-types\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar db = require('mime-db')\nvar extname = require('path').extname\n\n/**\n * Module variables.\n * @private\n */\n\nvar EXTRACT_TYPE_REGEXP = /^\\s*([^;\\s]*)(?:;|\\s|$)/\nvar TEXT_TYPE_REGEXP = /^text\\//i\n\n/**\n * Module exports.\n * @public\n */\n\nexports.charset = charset\nexports.charsets = { lookup: charset }\nexports.contentType = contentType\nexports.extension = extension\nexports.extensions = Object.create(null)\nexports.lookup = lookup\nexports.types = Object.create(null)\n\n// Populate the extensions/types maps\npopulateMaps(exports.extensions, exports.types)\n\n/**\n * Get the default charset for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction charset (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\n  var mime = match && db[match[1].toLowerCase()]\n\n  if (mime && mime.charset) {\n    return mime.charset\n  }\n\n  // default text/* to utf-8\n  if (match && TEXT_TYPE_REGEXP.test(match[1])) {\n    return 'UTF-8'\n  }\n\n  return false\n}\n\n/**\n * Create a full Content-Type header given a MIME type or extension.\n *\n * @param {string} str\n * @return {boolean|string}\n */\n\nfunction contentType (str) {\n  // TODO: should this even be in this module?\n  if (!str || typeof str !== 'string') {\n    return false\n  }\n\n  var mime = str.indexOf('/') === -1\n    ? exports.lookup(str)\n    : str\n\n  if (!mime) {\n    return false\n  }\n\n  // TODO: use content-type or other module\n  if (mime.indexOf('charset') === -1) {\n    var charset = exports.charset(mime)\n    if (charset) mime += '; charset=' + charset.toLowerCase()\n  }\n\n  return mime\n}\n\n/**\n * Get the default extension for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction extension (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\n\n  // get extensions\n  var exts = match && exports.extensions[match[1].toLowerCase()]\n\n  if (!exts || !exts.length) {\n    return false\n  }\n\n  return exts[0]\n}\n\n/**\n * Lookup the MIME type for a file path/extension.\n *\n * @param {string} path\n * @return {boolean|string}\n */\n\nfunction lookup (path) {\n  if (!path || typeof path !== 'string') {\n    return false\n  }\n\n  // get the extension (\"ext\" or \".ext\" or full path)\n  var extension = extname('x.' + path)\n    .toLowerCase()\n    .substr(1)\n\n  if (!extension) {\n    return false\n  }\n\n  return exports.types[extension] || false\n}\n\n/**\n * Populate the extensions and types maps.\n * @private\n */\n\nfunction populateMaps (extensions, types) {\n  // source preference (least -> most)\n  var preference = ['nginx', 'apache', undefined, 'iana']\n\n  Object.keys(db).forEach(function forEachMimeType (type) {\n    var mime = db[type]\n    var exts = mime.extensions\n\n    if (!exts || !exts.length) {\n      return\n    }\n\n    // mime -> extensions\n    extensions[type] = exts\n\n    // extension -> mime\n    for (var i = 0; i < exts.length; i++) {\n      var extension = exts[i]\n\n      if (types[extension]) {\n        var from = preference.indexOf(db[types[extension]].source)\n        var to = preference.indexOf(mime.source)\n\n        if (types[extension] !== 'application/octet-stream' &&\n          (from > to || (from === to && types[extension].substr(0, 12) === 'application/'))) {\n          // skip the remapping\n          continue\n        }\n      }\n\n      // set the extension -> mime\n      types[extension] = type\n    }\n  })\n}\n","import { getAuth } from 'firebase/auth'\nimport { getStorage, ref, uploadBytes } from 'firebase/storage'\nimport mime from 'mime-types'\nimport { nanoid } from 'nanoid'\n\nexport const addFile = async (file: File) => {\n  const user = getAuth().currentUser\n\n  if (user) {\n    const fileExtension = resolveExtension(file)\n    const fileName = [nanoid(10), fileExtension].join('.')\n    const storageRef = ref(getStorage())\n    const fileRef = ref(storageRef, fileName)\n    const metadata = {\n      contentType: file.type,\n      customMetadata: {\n        ownerId: user.uid,\n      },\n    }\n\n    return uploadBytes(fileRef, file, metadata).then((_snapshot) => {\n      return {\n        extension: fileExtension,\n        mimeType: file.type,\n        url: `${import.meta.env.VITE_APP_CDN_URL}/${fileName}`,\n      }\n    })\n  }\n}\n\nexport const resolveExtension = (file: File) => {\n  return mime.extension(file.type)\n}\n","import { matchStarts } from '/lib/hashtagged/parser'\nimport { Config } from '../index'\nimport type { CompletionContext, CompletionResult } from '@codemirror/autocomplete'\n\nexport const completions = (config: Config) => {\n  return (context: CompletionContext): CompletionResult | null => {\n    // matchBefore calls .search on the line text up to the current position\n    // const match = context.matchBefore(hashtagWithBoundary)\n    const line = context.state.doc.lineAt(context.pos)\n    const text = line.text.slice(0, context.pos - line.from)\n    const match = matchStarts(text).pop()\n\n    if (!match) { return null }\n\n    const offset = match.index + match.length\n\n    return {\n      from: line.from + offset,\n      options: config.tags.map((tag) => {\n        return {\n          apply: tag,\n          label: tag,\n          type: 'text',\n        }\n      })\n    }\n  }\n}\n","// https://discuss.codemirror.net/t/adding-support-for-the-additional-inline-syntax-to-markdown/3099\nimport { HighlightStyle, syntaxHighlighting } from '@codemirror/language'\nimport { Tag } from '@lezer/highlight'\nimport { HASHTAG_CODES, matchHashtag, matchHashtagPrefix } from '/lib/hashtagged/parser'\nimport { completions } from './completions'\nimport type { InlineContext, MarkdownConfig } from '@lezer/markdown'\nimport type * as Ink from 'ink-mde'\nimport type { Config } from '../index'\n\nconst tags = {\n  hashtag: Tag.define(),\n}\n\nconst Hashtag: MarkdownConfig = {\n  defineNodes: [\n    {\n      name: 'Hashtag',\n      style: tags.hashtag,\n    },\n  ],\n  parseInline: [\n    {\n      name: 'Hashtag',\n      parse: (inline, charCode, index) => {\n        if (!HASHTAG_CODES.includes(charCode) || HASHTAG_CODES.includes(inline.char(index + 1))) return -1\n\n        // \"A #hashtag in a line.\" -> \"A #\"\n        const text = inline.slice(inline.offset, index + 1)\n        // \"A #\" will match but \"A#\" will not\n        const prefixMatch = matchHashtagPrefix(text)\n\n        if (prefixMatch) {\n          const start = index - prefixMatch.boundary.length\n          const fullMatch = matchHashtag(inline.slice(start, inline.end))\n\n          if (fullMatch) {\n            return inline.addElement(\n              inline.elt(\n                'Hashtag',\n                index,\n                index + fullMatch.length - fullMatch.boundary.length,\n              )\n            )\n          }\n        }\n\n        return -1\n      },\n      after: 'Emphasis',\n    },\n  ],\n}\n\nconst theme = syntaxHighlighting(\n  HighlightStyle.define([\n    {\n      tag: tags.hashtag,\n      backgroundColor: 'var(--ink-internal-syntax-hashtag-background-color)',\n      borderRadius: '0.25rem',\n      color: 'var(--ink-internal-syntax-hashtag-color)',\n      padding: '0.125rem 0.25rem',\n    },\n  ])\n)\n\nexport const hashtags = (config: Config): Ink.Options.Plugin[] => {\n  return [\n    { type: 'completion', value: completions(config) },\n    { type: 'default', value: theme },\n    { type: 'grammar', value: Hashtag },\n  ]\n}\n","/* IMPORT */\nimport _ from '../utils/index.js';\nimport luminance from './luminance.js';\n/* MAIN */\nconst contrast = (color1, color2) => {\n    const luminance1 = luminance(color1);\n    const luminance2 = luminance(color2);\n    const max = Math.max(luminance1, luminance2);\n    const min = Math.min(luminance1, luminance2);\n    const ratio = (max + Number.EPSILON) / (min + Number.EPSILON);\n    return _.lang.round(_.lang.clamp(ratio, 1, 10));\n};\n/* EXPORT */\nexport default contrast;\n","export const toEl = <T extends ChildNode>(html: string): T => {\n  const template = document.createElement('template')\n\n  template.insertAdjacentHTML('afterbegin', html)\n\n  return template.firstChild as T\n}\n","// https://github.com/mermaid-js/mermaid/blob/449dfe8b8ef41909eeef65f2adbd8a0411b36396/packages/mermaid/src/themes/theme-base.js\nimport { adjust, contrast, darken, invert, lighten } from 'khroma'\nimport { toEl } from '/src/utils/dom'\n\n// Todo: Pull this from the app configuration.\nconst background = '#121212'\nconst font = '\"Inter\", helvetica, sans-serif'\n\nconst primary = adjust('rgb(59, 130, 246)', { h: 10 })\n\nconst makeColors = (color: string) => {\n  const lighter = lighten(color, 50)\n  const darker = darken(color, 50)\n\n  return {\n    background: color,\n    border: darken(color, 5),\n    text: contrast(lighter, color) > contrast(darker, color) ? lighter : darker,\n  }\n}\n\nconst colors = {\n  primary: makeColors(primary),\n  secondary: makeColors(adjust(primary, { h: 30 })),\n  tertiary: makeColors(adjust(primary, { h: 60 })),\n  fourth: makeColors(adjust(primary, { h: 90 })),\n  fifth: makeColors(adjust(primary, { h: 120 })),\n  sixth: makeColors(adjust(primary, { h: 150 })),\n  seventh: makeColors(adjust(primary, { h: 180 })),\n  eighth: makeColors(adjust(primary, { h: 210 })),\n  ninth: makeColors(adjust(primary, { h: 240 })),\n  tenth: makeColors(adjust(primary, { h: 270 })),\n  eleventh: makeColors(adjust(primary, { h: 300 })),\n  twelfth: makeColors(adjust(primary, { h: 330 })),\n  neutral: makeColors('#eaeaea'),\n  active: makeColors(primary),\n  inactive: makeColors('#777777'),\n  danger: makeColors('#ff0000'),\n}\n\nconst textSize = '16px'\nconst textSizeLarge = '24px'\n\nconst makePattern = (id: string, pattern: string) => {\n  return `\n    <defs xmlns=\"http://www.w3.org/2000/svg\">\n      <pattern id=\"${id}\" height=\"10\" width=\"10\" patternUnits=\"userSpaceOnUse\">\n        ${pattern}\n      </pattern>\n    </defs>\n  `\n}\n\nconst makeStripes = (colorKey: keyof typeof colors) => {\n  return makePattern(`stripes-${colorKey}`, `\n    <rect class=\"ignore\" height=\"100%\" width=\"100%\" fill=\"${background}\" />\n    <line class=\"ignore\" x1=\"0\" y1=\"0\" x2=\"10\" y2=\"10\" stroke=\"${colors[colorKey].background}\" stroke-width=\"1px\" stroke-linecap=\"square\" />\n  `)\n}\n\nconst makeScale = (index: number, color: string) => {\n  const backgroundKey = `cScale${index}`\n  const foregroundKey = `cScaleInv${index}`\n  const borderKey = `cScalePeer${index}`\n\n  return {\n    [backgroundKey]: color,\n    [foregroundKey]: invert(color),\n    [borderKey]: darken(color, 10),\n  }\n}\n\nexport const buildSvg = (html: string) => {\n  const svg = toEl<SVGElement>(html)\n  const colorKeys = Object.keys(colors) as Array<keyof typeof colors>\n\n  colorKeys.forEach((colorKey: keyof typeof colors) => {\n    svg.insertAdjacentHTML('afterbegin', makeStripes(colorKey))\n  })\n\n  return svg\n}\n\nexport const themeCss = `\n  .edgeLabel:not(:empty) {\n    border-radius: 2px;\n    padding: 2px 4px;\n  }\n\n  svg {\n    stroke-linejoin: round;\n    line-height: 1.5;\n    margin: auto;\n    max-width: 100%;\n  }\n\n  svg marker#arrowhead path {\n    d: path('M 1,1 L5,5 L1,9 L10,5 Z');\n  }\n\n  svg marker#crosshead path:first-child {\n    d: path('M 10,1.75 L12,4 L10,6.25 L15,4 Z');\n    stroke-linecap: round;\n    stroke-linejoin: round;\n    stroke-width: 0.5px;\n  }\n\n  svg marker#crosshead path:last-child {\n    d: path('M2.5,1.5 L7.5,6.5 M7.5,1.5 L2.5,6.5');\n    stroke-linecap: round;\n    stroke-width: 0.75px;\n    stroke-linejoin: round;\n  }\n\n  svg marker#flowchart-pointEnd path {\n    d: path('M 1,1 L5,5 L1,9 L10,5 Z');\n  }\n\n  svg circle:not(.ignore),\n  svg line:not(.ignore),\n  svg polygon:not(.ignore),\n  svg rect:not(.ignore) {\n    stroke-linecap: round;\n    stroke-linejoin: round;\n    stroke-width: 2px !important;\n  }\n\n  svg .commit-label-bkg {\n    stroke: ${darken(colors.inactive.background, 30)};\n    stroke-linejoin: round;\n    stroke-width: 2px !important;\n  }\n\n  svg .edge-pattern-dotted {\n    stroke-linecap: round;\n    stroke-dasharray: 2, 4 !important;\n  }\n\n  svg .loopLine {\n    opacity: 0.8;\n    stroke-dasharray: 2, 4 !important;\n  }\n\n  svg .mindmap-node {\n    stroke-linecap: round;\n    stroke-linejoin: round;\n    stroke-width: 2px !important;\n  }\n\n  svg .section,\n  svg .task {\n    opacity: 0.75;\n  }\n`\n\nexport const themeVariables = {\n  // Shared\n  background,\n  primaryColor: colors.primary.background,\n  secondaryColor: colors.secondary.background,\n  tertiaryColor: colors.tertiary.background,\n  primaryTextColor: colors.primary.text,\n  secondaryTextColor: colors.secondary.text,\n  tertiaryTextColor: colors.tertiary.text,\n  mainBkg: colors.primary.background,\n  secondBkg: colors.secondary.background,\n  tertiaryBkg: colors.tertiary.background,\n  primaryBorderColor: colors.primary.border,\n  secondaryBorderColor: colors.secondary.border,\n  tertiaryBorderColor: colors.tertiary.border,\n  lineColor: colors.neutral.background,\n  fontFamily: font,\n  fontSize: textSize,\n  labelBackground: colors.neutral.background,\n  labelTextColor: colors.primary.text,\n  textColor: invert(colors.primary.text),\n  titleColor: invert(colors.secondary.text),\n  THEME_COLOR_LIMIT: 12,\n\n  // Notes\n  // noteBkgColor: '',\n  // noteBorderColor: '',\n  // noteTextColor: '',\n\n  // Diagram: C4\n  personBkg: colors.primary.background,\n  personBorder: colors.primary.border,\n\n  // Diagram: Flowchart\n  clusterBkg: 'url(#stripes-secondary)',\n  clusterBorder: colors.secondary.border,\n  edgeLabelBackground: adjust(colors.tertiary.background, { a: -0.2 }),\n  nodeTextColor: colors.tertiary.text,\n\n  // Diagram: Gantt\n  sectionBkgColor: 'url(#stripes-primary)',\n  altSectionBkgColor: 'url(#stripes-secondary)',\n  sectionBkgColor2: 'url(#stripes-tertiary)',\n  taskBkgColor: colors.neutral.background,\n  taskBorderColor: colors.neutral.border,\n  taskTextColor: colors.primary.text,\n  // taskTextOutsideColor: '',\n  // taskTextClickableColor: '',\n  activeTaskBkgColor: colors.active.background,\n  activeTaskBorderColor: colors.active.border,\n  taskTextDarkColor: colors.active.text,\n  gridColor: colors.tertiary.border,\n  doneTaskBkgColor: colors.inactive.background,\n  doneTaskBorderColor: colors.inactive.border,\n  critBkgColor: colors.danger.background,\n  critBorderColor: colors.danger.border,\n  todayLineColor: colors.secondary.background,\n\n  // Diagram: Git\n  commitLabelColor: invert(colors.primary.text),\n  commitLabelBackground: darken(colors.inactive.background, 30),\n  // commitLabelFontSize: '',\n  git0: colors.primary.background,\n  git1: colors.secondary.background,\n  git2: colors.tertiary.background,\n  git3: colors.fourth.background,\n  git4: colors.fifth.background,\n  git5: colors.sixth.background,\n  git6: colors.seventh.background,\n  git7: colors.eighth.background,\n  gitInv0: colors.neutral.background,\n  gitInv1: colors.neutral.background,\n  gitInv2: colors.neutral.background,\n  gitInv3: colors.neutral.background,\n  gitInv4: colors.neutral.background,\n  gitInv5: colors.neutral.background,\n  gitInv6: colors.neutral.background,\n  gitInv7: colors.neutral.background,\n\n  // Diagram: Pie\n  pie1: colors.primary.background,\n  pie2: colors.secondary.background,\n  pie3: colors.tertiary.background,\n  pie4: colors.fourth.background,\n  pie5: colors.fifth.background,\n  pie6: colors.sixth.background,\n  pie7: colors.seventh.background,\n  pie8: colors.eighth.background,\n  pie9: colors.ninth.background,\n  pie10: colors.tenth.background,\n  pie11: colors.eleventh.background,\n  pie12: colors.twelfth.background,\n  pieTitleTextSize: textSizeLarge,\n  pieTitleTextColor: invert(colors.primary.text),\n  pieSectionTextSize: textSize,\n  pieSectionTextColor: colors.primary.text,\n  pieLegendTextSize: textSize,\n  pieLegendTextColor: invert(colors.primary.text),\n  pieStrokeColor: background,\n  pieStrokeWidth: '2px',\n  pieOpacity: '1',\n\n  // Diagram: Sequence\n  actorTextColor: colors.primary.text,\n  actorLineColor: colors.neutral.background,\n  signalColor: colors.neutral.background,\n  activationBkgColor: colors.secondary.background,\n  activationBorderColor: colors.secondary.border,\n  loopTextColor: invert(colors.neutral.text),\n\n  // Diagram: State\n  labelColor: 'black',\n  errorBkgColor: '#552222',\n  errorTextColor: '#552222',\n  ...makeScale(0, colors.primary.background),\n  ...makeScale(1, colors.secondary.background),\n  ...makeScale(2, colors.tertiary.background),\n  ...makeScale(3, colors.fourth.background),\n  ...makeScale(4, colors.fifth.background),\n  ...makeScale(5, colors.sixth.background),\n  ...makeScale(6, colors.seventh.background),\n  ...makeScale(7, colors.eighth.background),\n  ...makeScale(8, colors.ninth.background),\n  ...makeScale(9, colors.tenth.background),\n  ...makeScale(10, colors.eleventh.background),\n  ...makeScale(11, colors.twelfth.background),\n}\n","import { syntaxTree } from '@codemirror/language'\nimport { RangeSet, StateField } from '@codemirror/state'\nimport { Decoration, DecorationSet, EditorView } from '@codemirror/view'\nimport type { EditorState, Extension, Range } from '@codemirror/state'\nimport type { WidgetType } from '@codemirror/view'\nimport { customAlphabet } from 'nanoid'\nimport type { Config } from '../index'\nimport { buildSvg, themeCss as themeCSS, themeVariables } from './theme'\n\ninterface PreviewWidget extends WidgetType {\n  compare: (widget: PreviewWidget) => boolean\n  text: string\n}\n\nconst alpha = customAlphabet('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')\nconst state = { isMermaidLoaded: false }\n\nconst preview = (text: string): PreviewWidget => {\n  return {\n    compare: (other: PreviewWidget) => {\n      return other.text === text\n    },\n    destroy: () => {},\n    eq: (other: PreviewWidget) => {\n      return other.text === text\n    },\n    estimatedHeight: -1,\n    ignoreEvent: () => true,\n    text: text,\n    toDOM: () => {\n      const container = document.createElement('div')\n      const content = document.createElement('div')\n      const targetId = alpha()\n\n      container.className = 'ink-mde-widget'\n      container.style.paddingBottom = '0.5rem'\n      container.style.paddingTop = '0.5rem'\n      container.setAttribute('aria-hidden', 'true')\n      content.style.backgroundColor = '#121212'\n      content.style.borderRadius = '0.25rem'\n      content.style.minHeight = '0'\n      content.style.width = '100%'\n\n      container.appendChild(content)\n\n      import('mermaid').then(({ default: mermaid }) => {\n        mermaid.renderAsync(targetId, text, (svgCode, bindFunctions) => {\n          const svg = buildSvg(svgCode)\n\n          svg.setAttribute('height', '100%')\n          svg.setAttribute('width', '100%')\n\n          content.replaceChildren(svg)\n\n          if (bindFunctions) {\n            bindFunctions(svg)\n          }\n        })\n      }).catch((error) => {\n        console.log('[mermaid]', error)\n      })\n\n      return container\n    },\n    updateDOM: () => false,\n  }\n}\n\nexport const widget = async (_config: Config): Promise<Extension> => {\n  if (!state.isMermaidLoaded) {\n    try {\n      const { default: mermaid } = await import('mermaid')\n\n      mermaid.initialize({\n        startOnLoad: false,\n        theme: 'base',\n        themeCSS,\n        themeVariables,\n      })\n\n      const { default: mindmap } = await import('@mermaid-js/mermaid-mindmap')\n\n      await mermaid.registerExternalDiagrams([mindmap], { lazyLoad: true })\n\n      // This will prevent mermaid from being loaded multiple times in a single session.\n      state.isMermaidLoaded = true\n    } catch (error) {\n      console.log('[mermaid]', error)\n\n      return []\n    }\n  }\n\n  const previewDecoration = (text: string) => Decoration.widget({\n    block: true,\n    side: -1,\n    widget: preview(text),\n  })\n\n  const decorate = (state: EditorState) => {\n    const widgets: Range<Decoration>[] = []\n\n    syntaxTree(state).iterate({\n      enter: ({ type, from, to }) => {\n        if (type.name === 'FencedCode') {\n          // Do not run on empty references\n          if (from + 2 === to - 2) { return }\n\n          const block = state.sliceDoc(from, to)\n          const isMermaid = /^`+mermaid(?:\\s|$)/.test(block)\n\n          if (isMermaid) {\n            const position = state.doc.lineAt(from).from\n            const lines = block.split('\\n')\n\n            lines.shift()\n            lines.pop()\n\n            const text = lines.join('\\n')\n\n            if (text) {\n              widgets.push(previewDecoration(text).range(position))\n            }\n          }\n        }\n      },\n    })\n\n    return widgets.length > 0 ? RangeSet.of(widgets) : Decoration.none\n  }\n\n  const stateField = StateField.define<DecorationSet>({\n    create(state) {\n      return decorate(state)\n    },\n    update(references, transaction) {\n      if (transaction.docChanged || transaction.reconfigured || transaction.effects.length > 0) {\n        return decorate(transaction.state)\n      }\n\n      return references\n    },\n    provide(field) {\n      return EditorView.decorations.from(field)\n    },\n  })\n\n  return [\n    stateField,\n  ]\n}\n","import { widget } from './widget'\nimport type { Config } from '../index'\n\nexport const mermaid = async (config: Config) => {\n  return [\n    { type: 'default', value: await widget(config) },\n  ]\n}\n","import { Config } from './index'\nimport type { CompletionContext, CompletionResult } from '@codemirror/autocomplete'\n\nexport const completions = (config: Config) => {\n  return (context: CompletionContext): CompletionResult | null => {\n    const match = context.matchBefore(/\\[\\[.*?/)\n\n    if (!match) { return null }\n\n    return {\n      from: match.from + 2,\n      options: config.docs.map((doc) => {\n        return {\n          apply: doc.id,\n          label: doc.title || doc.id,\n          type: 'text',\n        }\n      })\n    }\n  }\n}\n","import { syntaxTree } from '@codemirror/language'\nimport { RangeSet, StateField } from '@codemirror/state'\nimport { Decoration, DecorationSet, EditorView } from '@codemirror/view'\nimport type { EditorState, Extension, Range } from '@codemirror/state'\nimport type { WidgetType } from '@codemirror/view'\nimport type { Config } from './index'\n\ninterface ReferenceWidget extends WidgetType {\n  compare: (widget: ReferenceWidget) => boolean\n  text: string\n}\n\nconst referenceWidget = (text: string): ReferenceWidget => {\n  return {\n    compare: (other: ReferenceWidget) => {\n      return other.text === text\n    },\n    destroy: () => {},\n    eq: (other: ReferenceWidget) => {\n      return other.text === text\n    },\n    estimatedHeight: -1,\n    ignoreEvent: () => true,\n    text: text,\n    toDOM: () => {\n      const span = document.createElement('span')\n\n      span.innerText = text\n      // Todo: Do we need to hide the overlay?\n      span.setAttribute('aria-hidden', 'true')\n\n      return span\n    },\n    updateDOM: () => false,\n  }\n}\n\nconst hasOverlap = (x1: number, x2: number, y1: number, y2: number) => {\n  return Math.max(x1, y1) <= Math.min(x2, y2)\n}\n\nconst isCursorInRange = (state: EditorState, from: number, to: number) => {\n  return state.selection.ranges.some((range) => {\n    return hasOverlap(from, to, range.from, range.to)\n  })\n}\n\nexport const replacements = (config: Config): Extension => {\n  const referenceDecoration = (text: string) => Decoration.replace({\n    widget: referenceWidget(text),\n  })\n\n  const decorate = (state: EditorState) => {\n    const widgets: Range<Decoration>[] = []\n\n    syntaxTree(state).iterate({\n      enter: ({ type, from, to }) => {\n        if (type.name === 'Reference') {\n          // Do not run on empty references\n          if (from + 2 === to - 2) { return }\n\n          const id = state.sliceDoc(from + 2, to - 2)\n          const doc = config.docs.find(doc => doc.id === id)\n\n          if (doc && !isCursorInRange(state, from + 2, to - 2)) {\n            widgets.push(referenceDecoration(doc.title).range(from + 2, to - 2))\n          }\n        }\n      },\n    })\n\n    return widgets.length > 0 ? RangeSet.of(widgets) : Decoration.none\n  }\n\n  const stateField = StateField.define<DecorationSet>({\n    create(state) {\n      return decorate(state)\n    },\n    update(_references, { state }) {\n      return decorate(state)\n    },\n    provide(field) {\n      return EditorView.decorations.from(field)\n    },\n  })\n\n  return [\n    stateField,\n  ]\n}\n","import { HighlightStyle, syntaxHighlighting } from '@codemirror/language'\nimport { Tag, tags as highlightTags } from '@lezer/highlight'\nimport { completions } from './completions'\nimport { replacements } from './replacements'\nimport type { MarkdownConfig } from '@lezer/markdown'\n\nconst LEFT_BRACKET_CODE = 91\nconst RIGHT_BRACKET_CODE = 93\n\nexport interface Config {\n  docs: Doc[]\n}\n\nexport interface Doc {\n  id: string\n  title: string\n}\n\nconst tags = {\n  reference: Tag.define(),\n  referenceMark: Tag.define(),\n}\n\nconst ReferenceStartDelimiter = {}\n\nconst grammar: MarkdownConfig = {\n  defineNodes: [\n    {\n      name: 'Reference',\n      style: tags.reference,\n    },\n    {\n      name: 'ReferenceMark',\n      style: [tags.referenceMark, highlightTags.processingInstruction],\n    },\n  ],\n  parseInline: [\n    {\n      name: 'ReferenceStart',\n      parse(cx, next, pos) {\n        return next === LEFT_BRACKET_CODE && cx.char(pos + 1) === LEFT_BRACKET_CODE\n          ? cx.addDelimiter(ReferenceStartDelimiter, pos, pos + 2, true, false)\n          : -1\n      },\n      after: 'Emphasis',\n    },\n    {\n      name: 'Reference',\n      parse(cx, next, pos) {\n        if (!(next === RIGHT_BRACKET_CODE && cx.char(pos + 1) === RIGHT_BRACKET_CODE)) { return -1 }\n\n        // @ts-ignore\n        const parts = cx.parts\n        const openIndex = cx.findOpeningDelimiter(ReferenceStartDelimiter)\n\n        if (Number.isInteger(openIndex)) {\n          const start = parts[openIndex].from\n          const end = pos + 2\n          const content = cx.takeContent(openIndex)\n\n          content.unshift(cx.elt('ReferenceMark', start, start + 2))\n          content.push(cx.elt('ReferenceMark', end - 2, end))\n\n          let ref = parts[openIndex] = cx.elt('Reference', start, end, content)\n\n          return ref.to\n        }\n\n        return -1\n      },\n      after: 'ReferenceStart',\n    },\n  ],\n}\n\nconst theme = syntaxHighlighting(\n  HighlightStyle.define([\n    {\n      tag: tags.reference,\n    },\n    {\n      tag: tags.referenceMark,\n    },\n  ])\n)\n\nexport const references = (config: Config) => {\n  return [\n    { type: 'completion', value: completions(config) },\n    { type: 'default', value: theme },\n    { type: 'default', value: replacements(config) },\n    { type: 'grammar', value: grammar },\n  ]\n}\n","// This regex should support an array of unicode characters. This was made with the following references.\n// - https://stackoverflow.com/questions/5984116/regular-expression-for-w3c-compliant-urls\n// - https://stackoverflow.com/questions/4713216/what-is-the-rfc-compliant-and-working-regular-expression-to-check-if-a-string-is\n// - https://stackoverflow.com/questions/3809401/what-is-a-good-regular-expression-to-match-a-url\n// - https://stackoverflow.com/questions/161738/what-is-the-best-regular-expression-to-check-if-a-string-is-a-valid-url\nexport const URL_REGEX_HEAD = /\\b[a-z](?:[-a-z0-9\\+\\.])*:\\/\\//\nexport const URL_REGEX_TAIL = /(?:(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\uA0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF\\u10000-\\u1FFFD\\u20000-\\u2FFFD\\u30000-\\u3FFFD\\u40000-\\u4FFFD\\u50000-\\u5FFFD\\u60000-\\u6FFFD\\u70000-\\u7FFFD\\u80000-\\u8FFFD\\u90000-\\u9FFFD\\uA0000-\\uAFFFD\\uB0000-\\uBFFFD\\uC0000-\\uCFFFD\\uD0000-\\uDFFFD\\uE1000-\\uEFFFD!\\$&\\'\\(\\)\\*\\+,;=:])*@)?(?:\\[(?:(?:(?:[0-9a-f]{1,4}:){6}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|::(?:[0-9a-f]{1,4}:){5}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:[0-9a-f]{1,4}:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|v[0-9a-f]+[-a-z0-9\\._~!\\$&\\'\\(\\)\\*\\+,;=:]+)\\]|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}|(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\uA0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF\\u10000-\\u1FFFD\\u20000-\\u2FFFD\\u30000-\\u3FFFD\\u40000-\\u4FFFD\\u50000-\\u5FFFD\\u60000-\\u6FFFD\\u70000-\\u7FFFD\\u80000-\\u8FFFD\\u90000-\\u9FFFD\\uA0000-\\uAFFFD\\uB0000-\\uBFFFD\\uC0000-\\uCFFFD\\uD0000-\\uDFFFD\\uE1000-\\uEFFFD!\\$&\\'\\(\\)\\*\\+,;=@])*)(?::[0-9]*)?(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\uA0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF\\u10000-\\u1FFFD\\u20000-\\u2FFFD\\u30000-\\u3FFFD\\u40000-\\u4FFFD\\u50000-\\u5FFFD\\u60000-\\u6FFFD\\u70000-\\u7FFFD\\u80000-\\u8FFFD\\u90000-\\u9FFFD\\uA0000-\\uAFFFD\\uB0000-\\uBFFFD\\uC0000-\\uCFFFD\\uD0000-\\uDFFFD\\uE1000-\\uEFFFD!\\$&\\'\\(\\)\\*\\+,;=:@]))*)*|\\/(?:(?:(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\uA0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF\\u10000-\\u1FFFD\\u20000-\\u2FFFD\\u30000-\\u3FFFD\\u40000-\\u4FFFD\\u50000-\\u5FFFD\\u60000-\\u6FFFD\\u70000-\\u7FFFD\\u80000-\\u8FFFD\\u90000-\\u9FFFD\\uA0000-\\uAFFFD\\uB0000-\\uBFFFD\\uC0000-\\uCFFFD\\uD0000-\\uDFFFD\\uE1000-\\uEFFFD!\\$&\\'\\(\\)\\*\\+,;=:@]))+)(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\uA0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF\\u10000-\\u1FFFD\\u20000-\\u2FFFD\\u30000-\\u3FFFD\\u40000-\\u4FFFD\\u50000-\\u5FFFD\\u60000-\\u6FFFD\\u70000-\\u7FFFD\\u80000-\\u8FFFD\\u90000-\\u9FFFD\\uA0000-\\uAFFFD\\uB0000-\\uBFFFD\\uC0000-\\uCFFFD\\uD0000-\\uDFFFD\\uE1000-\\uEFFFD!\\$&\\'\\(\\)\\*\\+,;=:@]))*)*)?|(?:(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\uA0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF\\u10000-\\u1FFFD\\u20000-\\u2FFFD\\u30000-\\u3FFFD\\u40000-\\u4FFFD\\u50000-\\u5FFFD\\u60000-\\u6FFFD\\u70000-\\u7FFFD\\u80000-\\u8FFFD\\u90000-\\u9FFFD\\uA0000-\\uAFFFD\\uB0000-\\uBFFFD\\uC0000-\\uCFFFD\\uD0000-\\uDFFFD\\uE1000-\\uEFFFD!\\$&\\'\\(\\)\\*\\+,;=:@]))+)(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\uA0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF\\u10000-\\u1FFFD\\u20000-\\u2FFFD\\u30000-\\u3FFFD\\u40000-\\u4FFFD\\u50000-\\u5FFFD\\u60000-\\u6FFFD\\u70000-\\u7FFFD\\u80000-\\u8FFFD\\u90000-\\u9FFFD\\uA0000-\\uAFFFD\\uB0000-\\uBFFFD\\uC0000-\\uCFFFD\\uD0000-\\uDFFFD\\uE1000-\\uEFFFD!\\$&\\'\\(\\)\\*\\+,;=:@]))*)*|(?!(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\uA0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF\\u10000-\\u1FFFD\\u20000-\\u2FFFD\\u30000-\\u3FFFD\\u40000-\\u4FFFD\\u50000-\\u5FFFD\\u60000-\\u6FFFD\\u70000-\\u7FFFD\\u80000-\\u8FFFD\\u90000-\\u9FFFD\\uA0000-\\uAFFFD\\uB0000-\\uBFFFD\\uC0000-\\uCFFFD\\uD0000-\\uDFFFD\\uE1000-\\uEFFFD!\\$&\\'\\(\\)\\*\\+,;=:@])))(?:\\?(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\uA0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF\\u10000-\\u1FFFD\\u20000-\\u2FFFD\\u30000-\\u3FFFD\\u40000-\\u4FFFD\\u50000-\\u5FFFD\\u60000-\\u6FFFD\\u70000-\\u7FFFD\\u80000-\\u8FFFD\\u90000-\\u9FFFD\\uA0000-\\uAFFFD\\uB0000-\\uBFFFD\\uC0000-\\uCFFFD\\uD0000-\\uDFFFD\\uE1000-\\uEFFFD!\\$&\\'\\(\\)\\*\\+,;=:@])|[\\uE000-\\uF8FF\\uF0000-\\uFFFFD|\\u100000-\\u10FFFD\\/\\?])*)?(?:\\#(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\uA0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF\\u10000-\\u1FFFD\\u20000-\\u2FFFD\\u30000-\\u3FFFD\\u40000-\\u4FFFD\\u50000-\\u5FFFD\\u60000-\\u6FFFD\\u70000-\\u7FFFD\\u80000-\\u8FFFD\\u90000-\\u9FFFD\\uA0000-\\uAFFFD\\uB0000-\\uBFFFD\\uC0000-\\uCFFFD\\uD0000-\\uDFFFD\\uE1000-\\uEFFFD!\\$&\\'\\(\\)\\*\\+,;=:@])|[\\/\\?])*)?\\b/i\nexport const URL_REGEX_FULL = new RegExp(URL_REGEX_HEAD.source + URL_REGEX_TAIL.source, 'i')\n\nconst MATCH_URL = new RegExp(`(${URL_REGEX_HEAD.source}${URL_REGEX_TAIL.source})`, 'i')\nconst MATCH_URL_PREFIX = new RegExp(`.*(${URL_REGEX_HEAD.source})$`, 'i')\n\nexport const matchUrlPrefix = (text: string) => {\n  return text.match(MATCH_URL_PREFIX)\n}\n\nexport const matchUrl = (text: string) => {\n  return text.match(MATCH_URL)\n}\n\nexport const matchUrls = (text: string) => {\n  const regex = new RegExp(URL_REGEX_FULL.source, 'gi')\n\n  return [...text.matchAll(regex)]\n}\n","import { EditorView } from '@codemirror/view'\nimport { matchUrls } from './utils'\nimport type { Config } from '../index'\n\nconst findUrl = (text: string, position: number) => {\n  const matches = matchUrls(text)\n  const found = matches.find((match) => {\n    const start = Number(match.index)\n    const end = Number(match.index) + match[0].length\n\n    if (start < position && end > position) {\n      return true\n    }\n  })\n\n  if (found) {\n    const [url] = found\n\n    return url\n  }\n}\n\nconst clickHandler = EditorView.domEventHandlers({\n  click: (event, view) => {\n    if (event.metaKey) {\n      const selection = view.state.selection\n      const line = view.state.doc.lineAt(selection.main.from)\n      const text = line.text\n      const offset = selection.main.from - line.from\n      const url = findUrl(text, offset)\n\n      if (url) {\n        window.open(url, '_blank')\n      }\n    }\n  },\n})\n\nexport const clickable = (_config: Config) => {\n  return clickHandler\n}\n","import { HighlightStyle, syntaxHighlighting } from '@codemirror/language'\nimport { Tag, tags as vendorTags } from '@lezer/highlight'\nimport type { Config } from '../index'\n\nexport const tags = {\n  url: Tag.define(),\n}\n\nexport const theme = (_config: Config) => {\n  return syntaxHighlighting(\n    HighlightStyle.define([\n      {\n        tag: tags.url,\n        textDecoration: 'underline',\n        // Todo: The cursor should only show as a pointer when the meta key is pressed.\n        // '&:hover': { cursor: 'pointer' },\n      },\n      {\n        tag: vendorTags.url,\n        textDecoration: 'underline',\n      },\n    ])\n  )\n}\n","import { tags } from './theme'\nimport { matchUrl, matchUrlPrefix } from './utils'\nimport type { InlineContext, MarkdownConfig } from '@lezer/markdown'\nimport type { Config } from '../index'\n\nexport const grammar = (_config: Config): MarkdownConfig => {\n  return {\n    defineNodes: [\n      {\n        name: 'ClickableUrl',\n        style: tags.url,\n      },\n    ],\n    parseInline: [\n      {\n        name: 'ClickableUrl',\n        parse: (inline: InlineContext, nextChar: number, index: number) => {\n          // Attempts to parse URLs when the current position matches \"://\" and not \":///\"\n          if (nextChar !== 58 || inline.char(index + 1) !== 47 || inline.char(index + 2) !== 47 || inline.char(index + 3) === 47) return -1\n\n          const text = inline.slice(\n            inline.offset,\n            index + 3, // '/'\n          )\n          const prefixMatch = matchUrlPrefix(text)\n\n          if (prefixMatch) {\n            const start = index - prefixMatch[1].length + 3\n\n            const fullMatch = matchUrl(inline.slice(start, inline.end))\n\n            if (fullMatch) {\n              return inline.addElement(\n                inline.elt(\n                  'ClickableUrl',\n                  start,\n                  start + fullMatch[1].length,\n                )\n              )\n            }\n          }\n\n          return -1\n        },\n      },\n    ],\n  }\n}\n","import { clickable } from './clickable'\nimport { grammar } from './grammar'\nimport { theme } from './theme'\nimport type { Config } from '../index'\n\nexport const urls = (config: Config) => {\n  return [\n    { type: 'default', value: clickable(config) },\n    { type: 'default', value: theme(config) },\n    { type: 'grammar', value: grammar(config) },\n  ]\n}\n","import { hashtags } from './hashtags'\nimport { mermaid } from './mermaid'\nimport { references } from './references'\nimport { urls } from './urls'\n\nexport interface Config {\n  docs: Doc[]\n  tags: string[]\n}\n\nexport interface Doc {\n  id: string\n  title: string\n}\n\nexport { mermaid }\n\nexport const plugins = (config: Config) => {\n  return [\n    ...hashtags(config),\n    // ...mermaid(config),\n    ...references(config),\n    ...urls(config),\n  ]\n}\n","<template>\n  <div @click=\"focusEditor\" class=\"flex flex-col flex-grow relative\">\n    <div class=\"editor flex flex-col flex-grow flex-shrink min-h-0 min-w-0 w-full\">\n      <Ink ref=\"editable\" class=\"ink-editor flex flex-col flex-grow flex-shrink min-h-0\" :options=\"options\" v-model=\"text\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport Ink from 'ink-mde/vue'\nimport { OverlayScrollbars } from 'overlayscrollbars'\nimport { addFile } from '/src/firebase/storage'\nimport { mermaid, plugins } from '/src/vendor/plugins'\n\nexport default defineComponent({\n  emits: ['input'],\n  components: {\n    Ink,\n  },\n  inject: ['mq', 'user'],\n  props: {\n    appearance: {\n      type: String,\n      default: () => ('auto'),\n      validator: (value) => (\n        ['auto', 'dark', 'light'].includes(value)\n      ),\n    },\n    doc: {\n      type: Object,\n    },\n    initialFocus: {\n      type: String,\n      default: () => ('any'),\n      validator: (position) => (\n        ['any', 'start', 'end'].includes(position)\n      ),\n    },\n    initialSelections: {\n      type: Array,\n    },\n    initialVimMode: {\n      type: String\n    },\n    ro: {\n      type: Boolean,\n    },\n    settings: {\n      type: Object,\n    },\n  },\n  data() {\n    return {\n      lazyPlugins: [],\n    }\n  },\n  computed: {\n    cssMaxWidth() {\n      return `${this.maxWidthInChars}ch`\n    },\n    docs() {\n      return this.$store.getters.kept.reduce((docs, doc) => {\n        if (doc.id && doc.id !== this.doc.id && doc.headers.length > 0) {\n          docs.push({\n            id: doc.id,\n            title: doc.headers[0],\n          })\n        }\n\n        return docs\n      }, [])\n    },\n    editor() {\n      return this.$refs.editable?.instance\n    },\n    maxWidthInChars() {\n      return this.settings.readability.maxWidthInChars\n    },\n    options() {\n      const isExperimentalEnabled = this.$store.state.settings.experimental\n      const hasLazyPlugins = this.lazyPlugins.length > 0\n\n      return {\n        files: {\n          clipboard: this.pro,\n          dragAndDrop: this.pro,\n          handler: (files) => {\n            return this.uploadFiles(files)\n          },\n          injectMarkup: false,\n        },\n        interface: {\n          appearance: this.appearance,\n          attribution: false,\n          autocomplete: true,\n          images: this.settings.images.enabled,\n          lists: this.settings.lists.enabled,\n          readonly: this.ro,\n          spellcheck: this.settings.spellcheck,\n          toolbar: this.settings.toolbar && !this.ro,\n        },\n        // Todo: Make these configurable.\n        plugins: [\n          ...this.plugins,\n          ...(isExperimentalEnabled && hasLazyPlugins ? this.lazyPlugins : []),\n        ],\n        readability: this.settings.readability.enabled,\n        selections: this.initialSelections || [],\n        toolbar: {\n          upload: this.pro,\n        },\n        vim: this.settings.keyMap === 'vim',\n      }\n    },\n    plugins() {\n      // For now, passing the current context in allows us to not recalculate the plugins on every doc change. Since the\n      // object we're passing in is a reference, the editor automatically gets access to the live lists of docs and tags\n      // without needing to recalculate.\n      return plugins(this)\n    },\n    pro() {\n      return this.user.value.roles.includes('ambassador') || this.user.value.roles.includes('subscriber')\n    },\n    spellcheck() {\n      return this.settings.spellcheck\n    },\n    tags() {\n      return this.$store.getters.allTags.filter((tag) => {\n        return !this.doc.tags.includes(tag)\n      });\n    },\n    text: {\n      get() {\n        return this.doc.text\n      },\n      set(value) {\n        this.input(value)\n      },\n    },\n  },\n  methods: {\n    focusEditor() {\n      this.editor.focus()\n    },\n    focusInitial() {\n      this.focusEditor()\n\n      if (this.initialFocus === 'start') {\n        this.focusEditorStart()\n      } else if (this.initialFocus === 'end') {\n        this.focusEditorEnd()\n      }\n    },\n    focusEditorEnd() {\n      this.focusEditor()\n      this.editor.select({ at: 'end' })\n    },\n    focusEditorStart() {\n      this.focusEditor()\n      this.editor.select({ at: 'start' })\n    },\n    async input(text) {\n      this.$emit('input', text)\n    },\n    uploadFiles(files) {\n      return Promise.all(\n        Array.from(files).map(async (file) => {\n          return addFile(file).then((uploadedFile) => {\n            // Todo: Handle non-image files\n            if (/^image\\/.*/.test(uploadedFile.mimeType)) {\n              this.editor.insert(`![](${uploadedFile.url})`)\n            }\n          })\n        })\n      )\n    },\n  },\n  beforeMount() {\n    mermaid().then((plugins) => {\n      this.lazyPlugins.push(...plugins)\n    }).catch((error) => {\n      console.log('[mermaid]', error)\n    })\n  },\n  mounted() {\n    // Exposed for Cypress\n    window.inkMde = this.editor\n\n    const editorContent = document.querySelector('.ink-mde-editor')\n    const editorToolbar = document.querySelector('.ink-mde-toolbar')\n\n    if (editorContent) {\n      OverlayScrollbars(editorContent, {\n        scrollbars: {\n          autoHide: 'leave',\n          autoHideDelay: 200,\n        },\n      })\n    }\n\n    if (editorToolbar) {\n      OverlayScrollbars(editorToolbar, {\n        scrollbars: {\n          autoHide: 'leave',\n          autoHideDelay: 200,\n        },\n      })\n    }\n\n    this.focusInitial()\n  }\n})\n</script>\n\n<style scoped>\n  .md-plus .editable {\n    font-size: 1.1em;\n  }\n\n  .editor {\n    --ink-font-family: 'Inter', helvetica, sans-serif;\n    --ink-code-font-family: 'Fira Code', monospace;\n  }\n\n  @media (max-width: 767px) {\n    :deep(.ink-mde-toolbar) {\n      order: 1;\n    }\n\n    :deep(.ink-mde .ink-mde-toolbar .ink-mde-container) {\n      gap: 0;\n    }\n\n    :deep(.ink-mde .ink-mde-editor) {\n      padding-top: 2rem;\n    }\n\n    :deep(.ink-mde .ink-mde-details) {\n      background-color: transparent;\n      position: absolute;\n      top: 0;\n      right: 0;\n      z-index: -1;\n    }\n  }\n\n  @media (min-width: 768px) {\n    :deep(.ink-mde .ink-mde-toolbar) {\n      background-color: transparent;\n      background: repeating-linear-gradient(135deg, transparent, transparent 10px, var(--colors-layer-1) 10px, var(--colors-layer-1) 11px);\n      border-bottom: 2px solid var(--colors-layer-1);\n      padding-bottom: calc(0.25rem + 2px);\n    }\n\n    :deep(.ink-mde .ink-mde-toolbar .ink-mde-container) {\n      background-color: var(--colors-layer-1);\n      border-radius: 0.25rem;\n      padding: 0.25rem;\n    }\n  }\n\n  :deep(.ink-mde) {\n    border: none;\n    border-radius: 0;\n  }\n\n  :deep(.ink-mde .ink-mde-container) {\n    max-width: v-bind('cssMaxWidth');\n  }\n\n  :deep(.ink-editor .ink-mde-widget svg) {\n    margin: auto;\n  }\n\n  .ink-editor :deep(.cm-editor.cm-focused) {\n    outline: none;\n  }\n</style>\n"],"names":["a","s","r","d","p","require$$0","charset","extension","mime","completions","tags","theme","_","contrast","mermaid","themeCSS","references","state","grammar","highlightTags","ref","vendorTags","Ink","plugins","_createElementVNode"],"mappings":"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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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"}