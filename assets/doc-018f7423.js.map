{"version":3,"file":"doc-018f7423.js","sources":["../../src/common/crypto/utils.js","../../src/common/crypto/asymmetric.js","../../src/common/crypto/symmetric.js","../../src/common/crypto/crypto.js","../../lib/hashtagged/parser.ts","../../src/common/parsers.ts","../../src/models/doc.js"],"sourcesContent":["// https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder\nexport const decode = (bytestream) => {\n  const decoder = new TextDecoder();\n\n  return decoder.decode(bytestream);\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder\nexport const encode = (data) => {\n  const encoder = new TextEncoder();\n\n  return encoder.encode(data);\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\nexport const generateIv = () => {\n  // https://developer.mozilla.org/en-US/docs/Web/API/AesGcmParams\n  return window.crypto.getRandomValues(new Uint8Array(12));\n};\n\n// https://developers.google.com/web/updates/2012/06/How-to-convert-ArrayBuffer-to-and-from-String\nexport const pack = (buffer) => {\n  return window.btoa(\n    String.fromCharCode.apply(null, new Uint8Array(buffer))\n  );\n};\n\n// https://developers.google.com/web/updates/2012/06/How-to-convert-ArrayBuffer-to-and-from-String\nexport const unpack = (packed) => {\n  const string = window.atob(packed);\n  const buffer = new ArrayBuffer(string.length);\n  const bufferView = new Uint8Array(buffer);\n\n  for (let i = 0; i < string.length; i++) {\n    bufferView[i] = string.charCodeAt(i);\n  }\n\n  return buffer;\n};\n\nexport default {\n  encode,\n  generateIv,\n  pack,\n  unpack,\n};\n","import { decode, encode, pack, unpack } from '/src/common/crypto/utils';\n\nexport const algorithm = {\n  name: 'RSA-OAEP',\n};\n\n// legacy support for unwrapping data key\n// https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/decrypt\nexport const decrypt = async (cipher, privateKey) => {\n  const decrypted = await window.crypto.subtle.decrypt(algorithm, privateKey, cipher);\n\n  return decode(decrypted);\n};\n\n// export public/private keys to pem format\nexport const exportKeys = async (keys) => {\n  const exported = {};\n\n  if (keys.privateKey) {\n    exported.privateKey = await exportPrivateKey(keys.privateKey);\n  }\n\n  if (keys.publicKey) {\n    exported.publicKey = await exportPublicKey(keys.publicKey);\n  }\n\n  return exported;\n};\n\nexport const exportPrivateKey = async (key) => {\n  const base64 = pack(await window.crypto.subtle.exportKey('pkcs8', key));\n\n  return `-----BEGIN PRIVATE KEY-----\\n${base64}\\n-----END PRIVATE KEY-----`;\n};\n\nexport const exportPublicKey = async (key) => {\n  const base64 = pack(await window.crypto.subtle.exportKey('spki', key));\n\n  return `-----BEGIN PUBLIC KEY-----\\n${base64}\\n-----END PUBLIC KEY-----`;\n};\n\nexport const generateKeys = async () => {\n  return window.crypto.subtle.generateKey({\n    hash: 'SHA-512',\n    modulusLength: 4096,\n    name: algorithm.name,\n    publicExponent: new Uint8Array([1, 0, 1]),\n  }, true, ['encrypt', 'decrypt']);\n};\n\n// import public/private pem keys\nexport const importKeys = async (exported) => {\n  const keys = {};\n\n  if (exported.privateKey) {\n    keys.privateKey = await importPrivateKey(exported.privateKey);\n  }\n\n  if (exported.publicKey) {\n    keys.publicKey = await importPublicKey(exported.publicKey);\n  }\n\n  return keys;\n};\n\nexport const importPrivateKey = async (pemKey) => {\n  const header = '-----BEGIN PRIVATE KEY-----';\n  const footer = '-----END PRIVATE KEY-----';\n  const base64 = pemKey.substring(header.length, pemKey.length - footer.length);\n  const buffer = unpack(base64);\n\n  return window.crypto.subtle.importKey('pkcs8', buffer, {\n    hash: 'SHA-512',\n    name: algorithm.name,\n  }, true, ['decrypt', 'unwrapKey']);\n};\n\nexport const importPublicKey = async (pemKey) => {\n  const header = '-----BEGIN PUBLIC KEY-----';\n  const footer = '-----END PUBLIC KEY-----';\n  const base64 = pemKey.substring(header.length, pemKey.length - footer.length);\n  const buffer = unpack(base64);\n\n  return window.crypto.subtle.importKey('spki', buffer, {\n    hash: 'SHA-512',\n    name: algorithm.name,\n  }, true, ['encrypt', 'wrapKey']);\n};\n\nexport default {\n  algorithm,\n  decrypt,\n  exportKeys,\n  exportPrivateKey,\n  exportPublicKey,\n  generateKeys,\n  importKeys,\n  importPrivateKey,\n  importPublicKey,\n};\n","import { decode, encode, generateIv, pack, unpack } from '/src/common/crypto/utils';\n\nexport const algorithm = {\n  name: 'AES-GCM',\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/decrypt\nexport const decrypt = async (cipher, key, iv) => {\n  const encoded = await window.crypto.subtle.decrypt({\n    name: algorithm.name,\n    iv: iv,\n  }, key, cipher);\n\n  return decode(encoded);\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt\nexport const encrypt = async (data, key) => {\n  const encoded = encode(data);\n  const iv = generateIv();\n  const cipher = await window.crypto.subtle.encrypt({\n    name: algorithm.name,\n    iv: iv,\n  }, key, encoded);\n\n  return {\n    cipher,\n    iv,\n  };\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/generateKey\nexport const generateKey = async () => {\n  return window.crypto.subtle.generateKey({\n    name: algorithm.name,\n    length: 256,\n  }, true, ['encrypt', 'decrypt']);\n};\n\n// legacy support for unwrapping data key\n// https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey\nexport const importKey = async (keyBuffer) => {\n  return window.crypto.subtle.importKey('raw', keyBuffer, algorithm.name, true, ['decrypt', 'encrypt']);\n};\n\nexport default {\n  algorithm,\n  decrypt,\n  encrypt,\n  generateKey,\n  importKey,\n};\n","import asym from '/src/common/crypto/asymmetric';\nimport sym from '/src/common/crypto/symmetric';\nimport { pack, unpack } from '/src/common/crypto/utils';\n\n// decrypt the data key with our private key\nconst unwrapKey = async (wrappedKey, privateKey) => {\n  return window.crypto.subtle.unwrapKey('raw', wrappedKey, privateKey, asym.algorithm, sym.algorithm, true, ['encrypt', 'decrypt']);\n};\n\n// encrypt the data key with our public key\nconst wrapKey = async (key, publicKey) => {\n  return window.crypto.subtle.wrapKey('raw', key, publicKey, asym.algorithm);\n};\n\n/**\n * @param options decryption args\n * @param options.cipher data to be decrypted\n * @param options.cipherKey encrypted key used to decrypt data\n * @param options.iv random factor used when encrypting/decrypting data\n * @param options.privateKey key used to decrypt data key\n */\nexport const decrypt = async (options) => {\n  // unpack data\n  const cipher = unpack(options.cipher);\n  const cipherKey = unpack(options.cipherKey);\n  const iv = unpack(options.iv);\n\n  // import privateKey\n  const { privateKey } = await asym.importKeys({ privateKey: options.privateKey });\n\n  // unwrap data key\n  try {\n    var dataKey = await unwrapKey(cipherKey, privateKey);\n  } catch (_error) {\n    // fallback to legacy implementation\n    var dataKey = await asym.decrypt(cipherKey, privateKey).then(dec => sym.importKey(unpack(dec)));\n  }\n\n  // decrypt the data\n  return sym.decrypt(cipher, dataKey, iv);\n};\n\n/**\n * @param options encryption args\n * @param options.data data to be encrypted\n * @param options.publicKey key used to encrypt the generated data key\n */\nexport const encrypt = async (options) => {\n  // generate data key\n  const dataKey = await sym.generateKey();\n\n  // encrypt data\n  const { cipher, iv } = await sym.encrypt(options.data, dataKey);\n\n  // import publicKey\n  const { publicKey } = await asym.importKeys({ publicKey: options.publicKey });\n\n  // wrap data key\n  const cipherKey = await wrapKey(dataKey, publicKey);\n\n  // return packed, encrypted data\n  return {\n    cipher: pack(cipher),\n    cipherKey: pack(cipherKey),\n    iv: pack(iv),\n  };\n};\n\nexport default {\n  decrypt,\n  encrypt,\n};\n","// Forked from draft-js-plugins which was originally forked from twitter-text.\n//\n// https://github.com/draft-js-plugins/draft-js-plugins/blob/d2747f7244a4e85d285be254dfb77fd44dc57322/LICENSE\n// https://github.com/twitter/twitter-text/blob/30e2430d90cff3b46393ea54caf511441983c260/LICENSE\nexport const unicodeLettersAndMarks = /A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B2\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\\u0300-\\u036F\\u0483-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08E4-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B62\\u0B63\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0C00-\\u0C03\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0D01-\\u0D03\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D82\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F\\u109A-\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u19B0-\\u19C0\\u19C8\\u19C9\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F\\u1AB0-\\u1ABE\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF2-\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DF5\\u1DFC-\\u1DFF\\u20D0-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F-\\uA672\\uA674-\\uA67D\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA880\\uA881\\uA8B4-\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9E5\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2D/\nexport const unicodeNumbers = /0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0DE6-\\u0DEF\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uA9F0-\\uA9F9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19/\nexport const hashtagSpecialChars = /_\\u200c\\u200d\\ua67e\\u05be\\u05f3\\u05f4\\uff5e\\u301c\\u309b\\u309c\\u30a0\\u30fb\\u3003\\u0f0b\\u0f0c\\u00b7/\nexport const hashSigns = /[#＃]/\nexport const hashtagAlpha = new RegExp(`[${unicodeLettersAndMarks.source}]`)\nexport const hashtagChars = new RegExp(`[${unicodeLettersAndMarks.source}${unicodeNumbers.source}${hashtagSpecialChars.source}\\/\\-]`)\nexport const hashtagBoundaryChars = new RegExp(`[^&${unicodeLettersAndMarks.source}${unicodeNumbers.source}${hashtagSpecialChars.source}]`)\nexport const hashtagBoundary = /(?<boundary>^|\\s)/\nexport const hashtag = new RegExp(`(?<sign>${hashSigns.source})(?!${/\\ufe0f|\\u20e3/.source})(?<tag>${hashtagChars.source}+)`, 'i')\nexport const hashtagWithBoundary = new RegExp(`(?:${hashtagBoundary.source})(?:${hashtag.source})`, 'i')\nexport const hashtagStart = new RegExp(`${hashtagBoundary.source}(?<sign>${hashSigns.source})(?!${/\\ufe0f|\\u20e3/.source})`, 'i')\n\nexport const HASHTAG_CODES = [35, 65283]\nexport const MATCH_HASHTAG_PREFIX = new RegExp(`(${hashtagBoundary.source}${hashSigns.source})$`, 'i')\n\nconst formatMatch = (match: RegExpMatchArray) => {\n  const boundary = match.groups?.boundary || ''\n  const sign = match.groups?.sign || ''\n  const tag = match.groups?.tag || ''\n\n  return {\n    index: Number(match.index),\n    length: boundary.length + sign.length + tag.length,\n    boundary,\n    sign,\n    tag,\n  }\n}\n\nexport const matchHashtag = (text: string) => {\n  const match = text.match(hashtagWithBoundary)\n\n  if (!match) { return null }\n\n  return formatMatch(match)\n}\n\nexport const matchHashtagPrefix = (text: string) => {\n  const match = text.match(MATCH_HASHTAG_PREFIX)\n\n  if (!match) { return null }\n\n  return formatMatch(match)\n}\n\nexport const matchHashtags = (text: string) => {\n  const matches = text.matchAll(new RegExp(hashtagWithBoundary.source, 'gi'))\n\n  return [...matches].map((match) => {\n    return formatMatch(match)\n  })\n}\n\nexport const matchStart = (text: string) => {\n  const match = text.match(hashtagStart)\n\n  if (!match) { return null }\n\n  return formatMatch(match)\n}\n\nexport const matchStarts = (text: string) => {\n  const matches = text.matchAll(new RegExp(hashtagStart.source, 'gi'))\n\n  return [...matches].map((match) => {\n    return formatMatch(match)\n  })\n}\n","import { hashtagWithBoundary } from '/lib/hashtagged/parser'\n\n// Todo: Determine if we need to support more than 5 backticks for code blocks.\nconst codeBlockIndicators = ['`````', '````', '```']\nconst codeInlineIndicators = ['``', '`']\nconst trashMultiline = new RegExp(codeBlockIndicators.map(ind => `${ind}.*?${ind}`).join('|'))\nconst trashInline = new RegExp(codeInlineIndicators.map(ind => `${ind}[^\\n]*?${ind}`).join('|'))\nconst trashBin = new RegExp(`${trashMultiline.source}|${trashInline.source}`)\n\nconst imageTagRegex = /!\\[(.*?)\\]\\((.+?)\\)/g\nconst referencesRegex = new RegExp(`${trashBin.source}|\\\\[\\\\[(.*?)\\\\]\\\\]`, 'gsi')\nconst tagsRegex = new RegExp(`${trashBin.source}|(${hashtagWithBoundary.source})`, 'gsi')\n// Todo: Replace more of these with composed regular expressions.\nconst codeRegex = /```([^\\n\\s]*)(?:\\s([\\w-]+\\.[\\w]+))?\\n(.*?)```/gs\nconst headersRegex = /````.*?````|```.*?```|``.*?``|`.*?`|\\w+:\\/?\\/?\\S*|# ([^\\n]+)/gs\nconst tasksRegex = /````.*?````|```.*?```|``.*?``|`.*?`|- \\[ \\] ([^\\n]+)/gs\n\ntype CodeResult = { code: string, filename: string, language: string }\ntype ImageResult = { alt: string, url: string }\ntype MatchResult = RegExpMatchArray | null\n\nexport const parse = (regex: RegExp, text: string) => {\n  let matches: MatchResult = null\n  const results: MatchResult[] = []\n\n  while (matches = regex.exec(text)) {\n    results.push(matches)\n  }\n\n  return results\n}\n\nexport const parseCodeblocks = (text: string) => {\n  const matches = parse(codeRegex, text)\n  const results: CodeResult[] = []\n\n  matches.forEach((match) => {\n    if (match) {\n      results.push({\n        filename: match[2],\n        language: match[1],\n        code: match[3],\n      })\n    }\n  })\n\n  return results\n}\n\nexport const parseImages = (text: string) => {\n  const matches = parse(imageTagRegex, text)\n  const results: ImageResult[] = []\n\n  matches.forEach((match) => {\n    if (match && match[2]) {\n      results.push({\n        alt: match[1],\n        url: match[2],\n      })\n    }\n  })\n\n  return results\n}\n\nexport const parseReferences = (text: string) => {\n  const matches = parse(referencesRegex, text)\n  const references = new Set()\n\n  matches.forEach((match) => {\n    if (match && match[1]) {\n      references.add(match[1])\n    }\n  })\n\n  return Array.from(references).sort()\n}\n\nexport const parseTags = (text: string) => {\n  const matches = parse(tagsRegex, text)\n  const tags = new Set()\n\n  matches.forEach((match) => {\n    if (match && match[1]) {\n      tags.add(match[1].toLowerCase().trim().slice(1))\n    }\n  })\n\n  return Array.from(tags).sort()\n}\n\nexport const parseHeaders = (text: string) => {\n  const matches = parse(headersRegex, text)\n  const headers: string[] = []\n\n  matches.forEach((match) => {\n    if (match && match[1]) {\n      headers.push(match[1])\n    }\n  })\n\n  return headers\n}\n\nexport const parseTasks = (text: string) => {\n  const matches = parse(tasksRegex, text)\n  const results: string[] = []\n\n  matches.forEach((match) => {\n    if (match && match[1]) {\n      results.push(match[1])\n    }\n  })\n\n  return results\n}\n\nexport default {\n  parse,\n  parseCodeblocks,\n  parseImages,\n  parseTags,\n}\n","import { nanoid } from 'nanoid'\n\nimport { decrypt, encrypt } from '/src/common/crypto/crypto'\nimport { parseTags, parseTasks, parseHeaders } from '/src/common/parsers'\n\nclass Doc {\n  constructor(attributes = {}) {\n    this.id = attributes.id || nanoid()\n    this.text = attributes.text || ''\n    this.textKey = attributes.textKey || null\n    this.daily = attributes.daily || false\n    this.iv = attributes.iv || null\n    this.encrypted = attributes.encrypted || false\n    this.createdAt = attributes.createdAt || new Date()\n    this.updatedAt = attributes.updatedAt || new Date()\n    this.touchedAt = attributes.touchedAt || new Date()\n    this.discardedAt = attributes.discardedAt || null\n\n    this.headers = this.encrypted ? [] : parseHeaders(this.text)\n    this.tags = this.encrypted ? [] : parseTags(this.text)\n    this.tasks = this.encrypted ? [] : parseTasks(this.text)\n\n    // api params\n    this.firebaseId = attributes.firebaseId || null\n    this.ownerId = attributes.ownerId || null\n    this.syncedAt = attributes.syncedAt || null\n    this.public = attributes.public || false\n  }\n\n  discard() {\n    this.updatedAt = new Date()\n    this.touchedAt = new Date()\n    this.discardedAt = new Date()\n  }\n\n  duplicate() {\n    return new Doc({ text: this.text })\n  }\n\n  merge(attributes) {\n    // id is not writable\n    Object.assign(this, attributes, { id: this.id })\n  }\n\n  restore() {\n    this.updatedAt = new Date()\n    this.touchedAt = new Date()\n    this.discardedAt = null\n  }\n\n  restrict() {\n    this.public = false\n    this.updatedAt = new Date()\n    this.touchedAt = new Date()\n  }\n\n  share() {\n    this.public = true\n    this.updatedAt = new Date()\n    this.touchedAt = new Date()\n  }\n\n  touch() {\n    this.touchedAt = new Date()\n  }\n\n  update({ text }) {\n    this.text = text\n    this.headers.splice(0, this.headers.length, ...parseHeaders(text))\n    this.tags.splice(0, this.tags.length, ...parseTags(text))\n    this.tasks.splice(0, this.tasks.length, ...parseTasks(text))\n    this.updatedAt = new Date()\n    this.touchedAt = new Date()\n  }\n}\n\nexport const pack = async (doc, { preferEncryption = null, publicKey = null }) => {\n  const packed = Object.assign({}, {\n    ...doc,\n    // These values are derived from the text, so we don't need to store them.\n    headers: [],\n    tags: [],\n    tasks: [],\n  })\n\n  // Guard against encryption edge cases.\n  if (preferEncryption && publicKey && !doc.encrypted && !doc.public) {\n    const { cipher, cipherKey, iv } = await encrypt({ data: packed.text, publicKey })\n\n    return Object.assign({}, packed, {\n      encrypted: true,\n      iv: iv,\n      text: cipher,\n      textKey: cipherKey,\n    })\n  }\n\n  return Object.assign({}, packed)\n}\n\nexport const unpack = async (packed, { privateKey }) => {\n  try {\n    if (privateKey && packed.encrypted) {\n      const text = await decrypt({ cipher: packed.text, cipherKey: packed.textKey, iv: packed.iv, privateKey })\n\n      return new Doc(\n        Object.assign({}, packed, {\n          encrypted: false,\n          text: text,\n        })\n      )\n    }\n  } catch (error) {\n    // suppress decryption errors and load encrypted document\n    console.error(error)\n  }\n\n  return new Doc(packed)\n}\n\nexport default Doc\n"],"names":["pack","unpack","algorithm","decrypt","encrypt"],"mappings":"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"}