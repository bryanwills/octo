{"version":3,"file":"useRouteQuery-1f894c77.js","sources":["../../composables/useRouteQuery.ts"],"sourcesContent":["export const useRouteQuery = () => {\n  const route = useRoute()\n  const router = useRouter()\n  const query = ref(route.query.q as string)\n\n  const stopWatching = watch(query, (value) => {\n    const resolved = router.resolve({\n      ...route,\n      query: {\n        ...route.query,\n        q: value,\n      },\n    })\n\n    // This will replace the browser history's current state with the new query.\n    // This is necessary to prevent the entire component from reloading (the behavior of router.replace).\n    window.history.replaceState(window.history.state, '', resolved.fullPath)\n  })\n\n  onBeforeUnmount(() => {\n    stopWatching()\n  })\n\n  return {\n    query,\n  }\n}\n"],"names":[],"mappings":";;AAAO,MAAA,gBAAA,MAAA;AACL,QAAA,QAAA;AACA,QAAA,SAAA;AACA,QAAA,QAAA,IAAA,MAAA,MAAA,CAAA;AAEA,QAAA,eAAA,MAAA,OAAA,CAAA,UAAA;AACE,UAAA,WAAA,OAAA,QAAA;AAAA,MAAgC,GAAA;AAAA,MAC3B,OAAA;AAAA,QACI,GAAA,MAAA;AAAA,QACI,GAAA;AAAA,MACN;AAAA,IACL,CAAA;AAKF,WAAA,QAAA,aAAA,OAAA,QAAA,OAAA,IAAA,SAAA,QAAA;AAAA,EAAuE,CAAA;AAGzE,kBAAA,MAAA;AACE;EAAa,CAAA;AAGf,SAAA;AAAA,IAAO;AAAA,EACL;AAEJ;"}