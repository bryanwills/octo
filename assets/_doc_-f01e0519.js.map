{"version":3,"file":"_doc_-f01e0519.js","sources":["../../pages/docs/[doc].vue"],"sourcesContent":["<template>\n  <Editor\n    ref=\"editable\"\n    :appearance=\"appearance\"\n    :doc=\"doc\"\n    :initialFocus=\"initialFocus\"\n    :initialSelections=\"initialSelections\"\n    :ro=\"ro\"\n    :settings=\"settings\"\n    @input=\"input\"\n  />\n</template>\n\n<script>\nimport { defineComponent, inject } from 'vue'\nimport Editor from '/components/Editor.vue'\nimport { setTitle } from '/src/common/title'\nimport { fetchSharedDoc } from '/src/firebase/firestore'\nimport Doc, { unpack } from '/src/models/doc'\nimport { ADD_DOCUMENT, EDIT_DOCUMENT, SET_DOCUMENT } from '/src/store/actions'\n\nconst formatTags = (tags, delimiter = ', ') => {\n  return tags.map((tag) => `#${tag}`).join(delimiter)\n}\n\nexport default defineComponent({\n  components: {\n    Editor,\n  },\n  props: {\n    docId: String,\n    initialFocus: {\n      type: String,\n      default: () => 'any',\n      validator: (position) => ['any', 'start', 'end'].includes(position),\n    },\n    initialSelections: {\n      type: Array,\n    },\n    ro: {\n      type: Boolean,\n    },\n  },\n  data() {\n    return {\n      editor: null,\n      placeholder: new Doc({ text: formatTags(this.$store.state.context.tags, ' ') }),\n    }\n  },\n  setup() {\n    const appearance = inject('appearance')\n\n    return {\n      appearance: appearance.value === 'october' ? 'dark' : appearance.value,\n    }\n  },\n  watch: {\n    tags: {\n      deep: true,\n      handler() {\n        this.updateTitle()\n      },\n    },\n    header() {\n      this.updateTitle()\n    },\n  },\n  computed: {\n    appearance() {\n      if (this.$store.state.settings.theme === 'october') { return 'dark' }\n\n      return this.$store.state.settings.theme\n    },\n    doc() {\n      return this.$store.getters.decrypted.find((doc) => doc.id === this.docId) || this.placeholder\n    },\n    settings() {\n      return this.$store.state.settings.editor\n    },\n    tags() {\n      return this.doc.tags\n    },\n    header() {\n      return this.doc.headers[0]\n    },\n  },\n  methods: {\n    input(text) {\n      if (!this.ro) {\n        // ReadOnly mode means we are viewing a shared doc.\n        // Todo: Create a new view for shared docs, and store shared docs in a new collection.\n        if (this.docId) {\n          this.$store.commit(EDIT_DOCUMENT, { id: this.doc.id, text })\n        } else {\n          this.$store.commit(ADD_DOCUMENT, new Doc({ id: this.doc.id, text }))\n\n          this.$router.replace({\n            path: `/docs/${this.doc.id}`,\n            query: {\n              p: true,\n            },\n          })\n        }\n      }\n    },\n    async findSharedDocument() {\n      const docRef = await fetchSharedDoc({ docId: this.$route.params.docId })\n      const serverDoc = docRef.data()\n      const packed = {\n        ...serverDoc,\n        id: serverDoc.id || serverDoc.clientId,\n        firebaseId: docRef.id,\n        textKey: serverDoc.textKey || serverDoc.dataKey,\n        createdAt: serverDoc.createdAt ? serverDoc.createdAt.toDate() : null,\n        discardedAt: serverDoc.discardedAt ? serverDoc.discardedAt.toDate() : null,\n        updatedAt: serverDoc.updatedAt ? serverDoc.updatedAt.toDate() : null,\n        touchedAt: serverDoc.touchedAt ? serverDoc.touchedAt.toDate() : null,\n        syncedAt: serverDoc.syncedAt.toDate(),\n      }\n\n      return unpack(packed, { privateKey: this.$store.state.settings.crypto.privateKey })\n    },\n    updateTitle() {\n      setTitle(this.header || formatTags(this.doc.tags))\n    },\n  },\n  beforeRouteUpdate(to, _from, next) {\n    if (to.name === 'docs-doc') {\n      this.$store.dispatch(SET_DOCUMENT, { id: to.params.docId })\n    }\n\n    next()\n  },\n  async mounted() {\n    this.updateTitle()\n\n    // might want to pass another prop to represent 'shared' since ro might have multiple use cases\n    if (this.ro) {\n      this.placeholder = await this.findSharedDocument()\n    }\n  },\n})\n</script>\n"],"names":["Editor"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,MAAA,aAAA,CAAA,MAAA,YAAA,SAAA;;AAEA;AAEA,MAAA,YAAA,gBAAA;AAAA;IAEI,QAAAA;AAAAA;EAEF,OAAA;AAAA;;;MAII,SAAA,MAAA;AAAA,MACA,WAAA,CAAA,aAAA,CAAA,OAAA,SAAA,KAAA,EAAA,SAAA,QAAA;AAAA;IAEF,mBAAA;AAAA;;IAGA,IAAA;AAAA;;;EAIF,OAAA;AACE,WAAA;AAAA;MAEE,aAAA,IAAA,IAAA,EAAA,MAAA,WAAA,KAAA,OAAA,MAAA,QAAA,MAAA,GAAA,EAAA,CAAA;AAAA,IACF;AAAA;EAEF,QAAA;AACE,UAAA,aAAA,OAAA,YAAA;AAEA,WAAA;AAAA,MACE,YAAA,WAAA,UAAA,YAAA,SAAA,WAAA;AAAA,IACF;AAAA;EAEF,OAAA;AAAA;MAEI,MAAA;AAAA,MACA,UAAA;AACE,aAAA,YAAA;AAAA;;IAGJ,SAAA;AACE,WAAA,YAAA;AAAA;;EAGJ,UAAA;AAAA;;;;AAII,aAAA,KAAA,OAAA,MAAA,SAAA;AAAA;;AAGA,aAAA,KAAA,OAAA,QAAA,UAAA,KAAA,CAAA,QAAA,IAAA,OAAA,KAAA,KAAA,KAAA,KAAA;AAAA;;AAGA,aAAA,KAAA,OAAA,MAAA,SAAA;AAAA;IAEF,OAAA;AACE,aAAA,KAAA,IAAA;AAAA;IAEF,SAAA;;;;EAIF,SAAA;AAAA;;AAKM,YAAA,KAAA,OAAA;;;;AAKE,eAAA,QAAA,QAAA;AAAA;YAEE,OAAA;AAAA,cACE,GAAA;AAAA;;QAGN;AAAA,MACF;AAAA;;AAGA,YAAA,SAAA,MAAA,eAAA,EAAA,OAAA,KAAA,OAAA,OAAA,OAAA;;;;QAIE,IAAA,UAAA,MAAA,UAAA;AAAA,QACA,YAAA,OAAA;AAAA,QACA,SAAA,UAAA,WAAA,UAAA;AAAA,QACA,WAAA,UAAA,YAAA,UAAA,UAAA,OAAA,IAAA;AAAA,QACA,aAAA,UAAA,cAAA,UAAA,YAAA,OAAA,IAAA;AAAA,QACA,WAAA,UAAA,YAAA,UAAA,UAAA,OAAA,IAAA;AAAA,QACA,WAAA,UAAA,YAAA,UAAA,UAAA,OAAA,IAAA;AAAA,QACA,UAAA,UAAA,SAAA,OAAA;AAAA,MACF;AAEA,aAAA,OAAA,QAAA,EAAA,YAAA,KAAA,OAAA,MAAA,SAAA,OAAA,YAAA;AAAA;;;;;EAMJ,kBAAA,IAAA,OAAA,MAAA;;;IAGE;;;EAIF,MAAA,UAAA;AACE,SAAA,YAAA;;;IAKA;AAAA;AAEJ,CAAA;;;;IA3II,KAAA;AAAA,IACC,YAAA,KAAA;AAAA,IACA,KAAA,KAAA;AAAA,IACA,cAAA,KAAA;AAAA,IACA,mBAAA,KAAA;AAAA,IACA,IAAA,KAAA;AAAA,IACA,UAAA,KAAA;AAAA,IACA,SAAA,KAAA;AAAA;;;"}