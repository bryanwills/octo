{"version":3,"file":"vim.e0ec79d3.911edfcf.js","sources":["../../node_modules/@codemirror/search/dist/index.js","../../node_modules/@replit/codemirror-vim/dist/index.js"],"sourcesContent":["import { showPanel, EditorView, getPanel, Decoration, ViewPlugin, runScopeHandlers } from '@codemirror/view';\nimport { codePointAt, fromCodePoint, codePointSize, StateEffect, StateField, EditorSelection, Facet, combineConfig, CharCategory, RangeSetBuilder, Prec, EditorState, findClusterBreak } from '@codemirror/state';\nimport elt from 'crelt';\n\nconst basicNormalize = typeof String.prototype.normalize == \"function\"\n    ? x => x.normalize(\"NFKD\") : x => x;\n/**\nA search cursor provides an iterator over text matches in a\ndocument.\n*/\nclass SearchCursor {\n    /**\n    Create a text cursor. The query is the search string, `from` to\n    `to` provides the region to search.\n    \n    When `normalize` is given, it will be called, on both the query\n    string and the content it is matched against, before comparing.\n    You can, for example, create a case-insensitive search by\n    passing `s => s.toLowerCase()`.\n    \n    Text is always normalized with\n    [`.normalize(\"NFKD\")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)\n    (when supported).\n    */\n    constructor(text, query, from = 0, to = text.length, normalize, test) {\n        this.test = test;\n        /**\n        The current match (only holds a meaningful value after\n        [`next`](https://codemirror.net/6/docs/ref/#search.SearchCursor.next) has been called and when\n        `done` is false).\n        */\n        this.value = { from: 0, to: 0 };\n        /**\n        Whether the end of the iterated region has been reached.\n        */\n        this.done = false;\n        this.matches = [];\n        this.buffer = \"\";\n        this.bufferPos = 0;\n        this.iter = text.iterRange(from, to);\n        this.bufferStart = from;\n        this.normalize = normalize ? x => normalize(basicNormalize(x)) : basicNormalize;\n        this.query = this.normalize(query);\n    }\n    peek() {\n        if (this.bufferPos == this.buffer.length) {\n            this.bufferStart += this.buffer.length;\n            this.iter.next();\n            if (this.iter.done)\n                return -1;\n            this.bufferPos = 0;\n            this.buffer = this.iter.value;\n        }\n        return codePointAt(this.buffer, this.bufferPos);\n    }\n    /**\n    Look for the next match. Updates the iterator's\n    [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and\n    [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called\n    at least once before using the cursor.\n    */\n    next() {\n        while (this.matches.length)\n            this.matches.pop();\n        return this.nextOverlapping();\n    }\n    /**\n    The `next` method will ignore matches that partially overlap a\n    previous match. This method behaves like `next`, but includes\n    such matches.\n    */\n    nextOverlapping() {\n        for (;;) {\n            let next = this.peek();\n            if (next < 0) {\n                this.done = true;\n                return this;\n            }\n            let str = fromCodePoint(next), start = this.bufferStart + this.bufferPos;\n            this.bufferPos += codePointSize(next);\n            let norm = this.normalize(str);\n            for (let i = 0, pos = start;; i++) {\n                let code = norm.charCodeAt(i);\n                let match = this.match(code, pos);\n                if (match) {\n                    this.value = match;\n                    return this;\n                }\n                if (i == norm.length - 1)\n                    break;\n                if (pos == start && i < str.length && str.charCodeAt(i) == code)\n                    pos++;\n            }\n        }\n    }\n    match(code, pos) {\n        let match = null;\n        for (let i = 0; i < this.matches.length; i += 2) {\n            let index = this.matches[i], keep = false;\n            if (this.query.charCodeAt(index) == code) {\n                if (index == this.query.length - 1) {\n                    match = { from: this.matches[i + 1], to: pos + 1 };\n                }\n                else {\n                    this.matches[i]++;\n                    keep = true;\n                }\n            }\n            if (!keep) {\n                this.matches.splice(i, 2);\n                i -= 2;\n            }\n        }\n        if (this.query.charCodeAt(0) == code) {\n            if (this.query.length == 1)\n                match = { from: pos, to: pos + 1 };\n            else\n                this.matches.push(1, pos);\n        }\n        if (match && this.test && !this.test(match.from, match.to, this.buffer, this.bufferPos))\n            match = null;\n        return match;\n    }\n}\nif (typeof Symbol != \"undefined\")\n    SearchCursor.prototype[Symbol.iterator] = function () { return this; };\n\nconst empty = { from: -1, to: -1, match: /*@__PURE__*//.*/.exec(\"\") };\nconst baseFlags = \"gm\" + (/x/.unicode == null ? \"\" : \"u\");\n/**\nThis class is similar to [`SearchCursor`](https://codemirror.net/6/docs/ref/#search.SearchCursor)\nbut searches for a regular expression pattern instead of a plain\nstring.\n*/\nclass RegExpCursor {\n    /**\n    Create a cursor that will search the given range in the given\n    document. `query` should be the raw pattern (as you'd pass it to\n    `new RegExp`).\n    */\n    constructor(text, query, options, from = 0, to = text.length) {\n        this.text = text;\n        this.to = to;\n        this.curLine = \"\";\n        /**\n        Set to `true` when the cursor has reached the end of the search\n        range.\n        */\n        this.done = false;\n        /**\n        Will contain an object with the extent of the match and the\n        match object when [`next`](https://codemirror.net/6/docs/ref/#search.RegExpCursor.next)\n        sucessfully finds a match.\n        */\n        this.value = empty;\n        if (/\\\\[sWDnr]|\\n|\\r|\\[\\^/.test(query))\n            return new MultilineRegExpCursor(text, query, options, from, to);\n        this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? \"i\" : \"\"));\n        this.test = options === null || options === void 0 ? void 0 : options.test;\n        this.iter = text.iter();\n        let startLine = text.lineAt(from);\n        this.curLineStart = startLine.from;\n        this.matchPos = toCharEnd(text, from);\n        this.getLine(this.curLineStart);\n    }\n    getLine(skip) {\n        this.iter.next(skip);\n        if (this.iter.lineBreak) {\n            this.curLine = \"\";\n        }\n        else {\n            this.curLine = this.iter.value;\n            if (this.curLineStart + this.curLine.length > this.to)\n                this.curLine = this.curLine.slice(0, this.to - this.curLineStart);\n            this.iter.next();\n        }\n    }\n    nextLine() {\n        this.curLineStart = this.curLineStart + this.curLine.length + 1;\n        if (this.curLineStart > this.to)\n            this.curLine = \"\";\n        else\n            this.getLine(0);\n    }\n    /**\n    Move to the next match, if there is one.\n    */\n    next() {\n        for (let off = this.matchPos - this.curLineStart;;) {\n            this.re.lastIndex = off;\n            let match = this.matchPos <= this.to && this.re.exec(this.curLine);\n            if (match) {\n                let from = this.curLineStart + match.index, to = from + match[0].length;\n                this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));\n                if (from == this.curLineStart + this.curLine.length)\n                    this.nextLine();\n                if ((from < to || from > this.value.to) && (!this.test || this.test(from, to, match))) {\n                    this.value = { from, to, match };\n                    return this;\n                }\n                off = this.matchPos - this.curLineStart;\n            }\n            else if (this.curLineStart + this.curLine.length < this.to) {\n                this.nextLine();\n                off = 0;\n            }\n            else {\n                this.done = true;\n                return this;\n            }\n        }\n    }\n}\nconst flattened = /*@__PURE__*/new WeakMap();\n// Reusable (partially) flattened document strings\nclass FlattenedDoc {\n    constructor(from, text) {\n        this.from = from;\n        this.text = text;\n    }\n    get to() { return this.from + this.text.length; }\n    static get(doc, from, to) {\n        let cached = flattened.get(doc);\n        if (!cached || cached.from >= to || cached.to <= from) {\n            let flat = new FlattenedDoc(from, doc.sliceString(from, to));\n            flattened.set(doc, flat);\n            return flat;\n        }\n        if (cached.from == from && cached.to == to)\n            return cached;\n        let { text, from: cachedFrom } = cached;\n        if (cachedFrom > from) {\n            text = doc.sliceString(from, cachedFrom) + text;\n            cachedFrom = from;\n        }\n        if (cached.to < to)\n            text += doc.sliceString(cached.to, to);\n        flattened.set(doc, new FlattenedDoc(cachedFrom, text));\n        return new FlattenedDoc(from, text.slice(from - cachedFrom, to - cachedFrom));\n    }\n}\nclass MultilineRegExpCursor {\n    constructor(text, query, options, from, to) {\n        this.text = text;\n        this.to = to;\n        this.done = false;\n        this.value = empty;\n        this.matchPos = toCharEnd(text, from);\n        this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? \"i\" : \"\"));\n        this.test = options === null || options === void 0 ? void 0 : options.test;\n        this.flat = FlattenedDoc.get(text, from, this.chunkEnd(from + 5000 /* Chunk.Base */));\n    }\n    chunkEnd(pos) {\n        return pos >= this.to ? this.to : this.text.lineAt(pos).to;\n    }\n    next() {\n        for (;;) {\n            let off = this.re.lastIndex = this.matchPos - this.flat.from;\n            let match = this.re.exec(this.flat.text);\n            // Skip empty matches directly after the last match\n            if (match && !match[0] && match.index == off) {\n                this.re.lastIndex = off + 1;\n                match = this.re.exec(this.flat.text);\n            }\n            if (match) {\n                let from = this.flat.from + match.index, to = from + match[0].length;\n                // If a match goes almost to the end of a noncomplete chunk, try\n                // again, since it'll likely be able to match more\n                if ((this.flat.to >= this.to || match.index + match[0].length <= this.flat.text.length - 10) &&\n                    (!this.test || this.test(from, to, match))) {\n                    this.value = { from, to, match };\n                    this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));\n                    return this;\n                }\n            }\n            if (this.flat.to == this.to) {\n                this.done = true;\n                return this;\n            }\n            // Grow the flattened doc\n            this.flat = FlattenedDoc.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));\n        }\n    }\n}\nif (typeof Symbol != \"undefined\") {\n    RegExpCursor.prototype[Symbol.iterator] = MultilineRegExpCursor.prototype[Symbol.iterator] =\n        function () { return this; };\n}\nfunction validRegExp(source) {\n    try {\n        new RegExp(source, baseFlags);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nfunction toCharEnd(text, pos) {\n    if (pos >= text.length)\n        return pos;\n    let line = text.lineAt(pos), next;\n    while (pos < line.to && (next = line.text.charCodeAt(pos - line.from)) >= 0xDC00 && next < 0xE000)\n        pos++;\n    return pos;\n}\n\nfunction createLineDialog(view) {\n    let input = elt(\"input\", { class: \"cm-textfield\", name: \"line\" });\n    let dom = elt(\"form\", {\n        class: \"cm-gotoLine\",\n        onkeydown: (event) => {\n            if (event.keyCode == 27) { // Escape\n                event.preventDefault();\n                view.dispatch({ effects: dialogEffect.of(false) });\n                view.focus();\n            }\n            else if (event.keyCode == 13) { // Enter\n                event.preventDefault();\n                go();\n            }\n        },\n        onsubmit: (event) => {\n            event.preventDefault();\n            go();\n        }\n    }, elt(\"label\", view.state.phrase(\"Go to line\"), \": \", input), \" \", elt(\"button\", { class: \"cm-button\", type: \"submit\" }, view.state.phrase(\"go\")));\n    function go() {\n        let match = /^([+-])?(\\d+)?(:\\d+)?(%)?$/.exec(input.value);\n        if (!match)\n            return;\n        let { state } = view, startLine = state.doc.lineAt(state.selection.main.head);\n        let [, sign, ln, cl, percent] = match;\n        let col = cl ? +cl.slice(1) : 0;\n        let line = ln ? +ln : startLine.number;\n        if (ln && percent) {\n            let pc = line / 100;\n            if (sign)\n                pc = pc * (sign == \"-\" ? -1 : 1) + (startLine.number / state.doc.lines);\n            line = Math.round(state.doc.lines * pc);\n        }\n        else if (ln && sign) {\n            line = line * (sign == \"-\" ? -1 : 1) + startLine.number;\n        }\n        let docLine = state.doc.line(Math.max(1, Math.min(state.doc.lines, line)));\n        view.dispatch({\n            effects: dialogEffect.of(false),\n            selection: EditorSelection.cursor(docLine.from + Math.max(0, Math.min(col, docLine.length))),\n            scrollIntoView: true\n        });\n        view.focus();\n    }\n    return { dom };\n}\nconst dialogEffect = /*@__PURE__*/StateEffect.define();\nconst dialogField = /*@__PURE__*/StateField.define({\n    create() { return true; },\n    update(value, tr) {\n        for (let e of tr.effects)\n            if (e.is(dialogEffect))\n                value = e.value;\n        return value;\n    },\n    provide: f => showPanel.from(f, val => val ? createLineDialog : null)\n});\n/**\nCommand that shows a dialog asking the user for a line number, and\nwhen a valid position is provided, moves the cursor to that line.\n\nSupports line numbers, relative line offsets prefixed with `+` or\n`-`, document percentages suffixed with `%`, and an optional\ncolumn position by adding `:` and a second number after the line\nnumber.\n\nThe dialog can be styled with the `panel.gotoLine` theme\nselector.\n*/\nconst gotoLine = view => {\n    let panel = getPanel(view, createLineDialog);\n    if (!panel) {\n        let effects = [dialogEffect.of(true)];\n        if (view.state.field(dialogField, false) == null)\n            effects.push(StateEffect.appendConfig.of([dialogField, baseTheme$1]));\n        view.dispatch({ effects });\n        panel = getPanel(view, createLineDialog);\n    }\n    if (panel)\n        panel.dom.querySelector(\"input\").focus();\n    return true;\n};\nconst baseTheme$1 = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-panel.cm-gotoLine\": {\n        padding: \"2px 6px 4px\",\n        \"& label\": { fontSize: \"80%\" }\n    }\n});\n\nconst defaultHighlightOptions = {\n    highlightWordAroundCursor: false,\n    minSelectionLength: 1,\n    maxMatches: 100,\n    wholeWords: false\n};\nconst highlightConfig = /*@__PURE__*/Facet.define({\n    combine(options) {\n        return combineConfig(options, defaultHighlightOptions, {\n            highlightWordAroundCursor: (a, b) => a || b,\n            minSelectionLength: Math.min,\n            maxMatches: Math.min\n        });\n    }\n});\n/**\nThis extension highlights text that matches the selection. It uses\nthe `\"cm-selectionMatch\"` class for the highlighting. When\n`highlightWordAroundCursor` is enabled, the word at the cursor\nitself will be highlighted with `\"cm-selectionMatch-main\"`.\n*/\nfunction highlightSelectionMatches(options) {\n    let ext = [defaultTheme, matchHighlighter];\n    if (options)\n        ext.push(highlightConfig.of(options));\n    return ext;\n}\nconst matchDeco = /*@__PURE__*/Decoration.mark({ class: \"cm-selectionMatch\" });\nconst mainMatchDeco = /*@__PURE__*/Decoration.mark({ class: \"cm-selectionMatch cm-selectionMatch-main\" });\n// Whether the characters directly outside the given positions are non-word characters\nfunction insideWordBoundaries(check, state, from, to) {\n    return (from == 0 || check(state.sliceDoc(from - 1, from)) != CharCategory.Word) &&\n        (to == state.doc.length || check(state.sliceDoc(to, to + 1)) != CharCategory.Word);\n}\n// Whether the characters directly at the given positions are word characters\nfunction insideWord(check, state, from, to) {\n    return check(state.sliceDoc(from, from + 1)) == CharCategory.Word\n        && check(state.sliceDoc(to - 1, to)) == CharCategory.Word;\n}\nconst matchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.decorations = this.getDeco(view);\n    }\n    update(update) {\n        if (update.selectionSet || update.docChanged || update.viewportChanged)\n            this.decorations = this.getDeco(update.view);\n    }\n    getDeco(view) {\n        let conf = view.state.facet(highlightConfig);\n        let { state } = view, sel = state.selection;\n        if (sel.ranges.length > 1)\n            return Decoration.none;\n        let range = sel.main, query, check = null;\n        if (range.empty) {\n            if (!conf.highlightWordAroundCursor)\n                return Decoration.none;\n            let word = state.wordAt(range.head);\n            if (!word)\n                return Decoration.none;\n            check = state.charCategorizer(range.head);\n            query = state.sliceDoc(word.from, word.to);\n        }\n        else {\n            let len = range.to - range.from;\n            if (len < conf.minSelectionLength || len > 200)\n                return Decoration.none;\n            if (conf.wholeWords) {\n                query = state.sliceDoc(range.from, range.to); // TODO: allow and include leading/trailing space?\n                check = state.charCategorizer(range.head);\n                if (!(insideWordBoundaries(check, state, range.from, range.to)\n                    && insideWord(check, state, range.from, range.to)))\n                    return Decoration.none;\n            }\n            else {\n                query = state.sliceDoc(range.from, range.to).trim();\n                if (!query)\n                    return Decoration.none;\n            }\n        }\n        let deco = [];\n        for (let part of view.visibleRanges) {\n            let cursor = new SearchCursor(state.doc, query, part.from, part.to);\n            while (!cursor.next().done) {\n                let { from, to } = cursor.value;\n                if (!check || insideWordBoundaries(check, state, from, to)) {\n                    if (range.empty && from <= range.from && to >= range.to)\n                        deco.push(mainMatchDeco.range(from, to));\n                    else if (from >= range.to || to <= range.from)\n                        deco.push(matchDeco.range(from, to));\n                    if (deco.length > conf.maxMatches)\n                        return Decoration.none;\n                }\n            }\n        }\n        return Decoration.set(deco);\n    }\n}, {\n    decorations: v => v.decorations\n});\nconst defaultTheme = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-selectionMatch\": { backgroundColor: \"#99ff7780\" },\n    \".cm-searchMatch .cm-selectionMatch\": { backgroundColor: \"transparent\" }\n});\n// Select the words around the cursors.\nconst selectWord = ({ state, dispatch }) => {\n    let { selection } = state;\n    let newSel = EditorSelection.create(selection.ranges.map(range => state.wordAt(range.head) || EditorSelection.cursor(range.head)), selection.mainIndex);\n    if (newSel.eq(selection))\n        return false;\n    dispatch(state.update({ selection: newSel }));\n    return true;\n};\n// Find next occurrence of query relative to last cursor. Wrap around\n// the document if there are no more matches.\nfunction findNextOccurrence(state, query) {\n    let { main, ranges } = state.selection;\n    let word = state.wordAt(main.head), fullWord = word && word.from == main.from && word.to == main.to;\n    for (let cycled = false, cursor = new SearchCursor(state.doc, query, ranges[ranges.length - 1].to);;) {\n        cursor.next();\n        if (cursor.done) {\n            if (cycled)\n                return null;\n            cursor = new SearchCursor(state.doc, query, 0, Math.max(0, ranges[ranges.length - 1].from - 1));\n            cycled = true;\n        }\n        else {\n            if (cycled && ranges.some(r => r.from == cursor.value.from))\n                continue;\n            if (fullWord) {\n                let word = state.wordAt(cursor.value.from);\n                if (!word || word.from != cursor.value.from || word.to != cursor.value.to)\n                    continue;\n            }\n            return cursor.value;\n        }\n    }\n}\n/**\nSelect next occurrence of the current selection. Expand selection\nto the surrounding word when the selection is empty.\n*/\nconst selectNextOccurrence = ({ state, dispatch }) => {\n    let { ranges } = state.selection;\n    if (ranges.some(sel => sel.from === sel.to))\n        return selectWord({ state, dispatch });\n    let searchedText = state.sliceDoc(ranges[0].from, ranges[0].to);\n    if (state.selection.ranges.some(r => state.sliceDoc(r.from, r.to) != searchedText))\n        return false;\n    let range = findNextOccurrence(state, searchedText);\n    if (!range)\n        return false;\n    dispatch(state.update({\n        selection: state.selection.addRange(EditorSelection.range(range.from, range.to), false),\n        effects: EditorView.scrollIntoView(range.to)\n    }));\n    return true;\n};\n\nconst searchConfigFacet = /*@__PURE__*/Facet.define({\n    combine(configs) {\n        return combineConfig(configs, {\n            top: false,\n            caseSensitive: false,\n            literal: false,\n            wholeWord: false,\n            createPanel: view => new SearchPanel(view)\n        });\n    }\n});\n/**\nAdd search state to the editor configuration, and optionally\nconfigure the search extension.\n([`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel) will automatically\nenable this if it isn't already on).\n*/\nfunction search(config) {\n    return config ? [searchConfigFacet.of(config), searchExtensions] : searchExtensions;\n}\n/**\nA search query. Part of the editor's search state.\n*/\nclass SearchQuery {\n    /**\n    Create a query object.\n    */\n    constructor(config) {\n        this.search = config.search;\n        this.caseSensitive = !!config.caseSensitive;\n        this.literal = !!config.literal;\n        this.regexp = !!config.regexp;\n        this.replace = config.replace || \"\";\n        this.valid = !!this.search && (!this.regexp || validRegExp(this.search));\n        this.unquoted = this.unquote(this.search);\n        this.wholeWord = !!config.wholeWord;\n    }\n    /**\n    @internal\n    */\n    unquote(text) {\n        return this.literal ? text :\n            text.replace(/\\\\([nrt\\\\])/g, (_, ch) => ch == \"n\" ? \"\\n\" : ch == \"r\" ? \"\\r\" : ch == \"t\" ? \"\\t\" : \"\\\\\");\n    }\n    /**\n    Compare this query to another query.\n    */\n    eq(other) {\n        return this.search == other.search && this.replace == other.replace &&\n            this.caseSensitive == other.caseSensitive && this.regexp == other.regexp &&\n            this.wholeWord == other.wholeWord;\n    }\n    /**\n    @internal\n    */\n    create() {\n        return this.regexp ? new RegExpQuery(this) : new StringQuery(this);\n    }\n    /**\n    Get a search cursor for this query, searching through the given\n    range in the given state.\n    */\n    getCursor(state, from = 0, to) {\n        let st = state.doc ? state : EditorState.create({ doc: state });\n        if (to == null)\n            to = st.doc.length;\n        return this.regexp ? regexpCursor(this, st, from, to) : stringCursor(this, st, from, to);\n    }\n}\nclass QueryType {\n    constructor(spec) {\n        this.spec = spec;\n    }\n}\nfunction stringCursor(spec, state, from, to) {\n    return new SearchCursor(state.doc, spec.unquoted, from, to, spec.caseSensitive ? undefined : x => x.toLowerCase(), spec.wholeWord ? stringWordTest(state.doc, state.charCategorizer(state.selection.main.head)) : undefined);\n}\nfunction stringWordTest(doc, categorizer) {\n    return (from, to, buf, bufPos) => {\n        if (bufPos > from || bufPos + buf.length < to) {\n            bufPos = Math.max(0, from - 2);\n            buf = doc.sliceString(bufPos, Math.min(doc.length, to + 2));\n        }\n        return (categorizer(charBefore(buf, from - bufPos)) != CharCategory.Word ||\n            categorizer(charAfter(buf, from - bufPos)) != CharCategory.Word) &&\n            (categorizer(charAfter(buf, to - bufPos)) != CharCategory.Word ||\n                categorizer(charBefore(buf, to - bufPos)) != CharCategory.Word);\n    };\n}\nclass StringQuery extends QueryType {\n    constructor(spec) {\n        super(spec);\n    }\n    nextMatch(state, curFrom, curTo) {\n        let cursor = stringCursor(this.spec, state, curTo, state.doc.length).nextOverlapping();\n        if (cursor.done)\n            cursor = stringCursor(this.spec, state, 0, curFrom).nextOverlapping();\n        return cursor.done ? null : cursor.value;\n    }\n    // Searching in reverse is, rather than implementing inverted search\n    // cursor, done by scanning chunk after chunk forward.\n    prevMatchInRange(state, from, to) {\n        for (let pos = to;;) {\n            let start = Math.max(from, pos - 10000 /* FindPrev.ChunkSize */ - this.spec.unquoted.length);\n            let cursor = stringCursor(this.spec, state, start, pos), range = null;\n            while (!cursor.nextOverlapping().done)\n                range = cursor.value;\n            if (range)\n                return range;\n            if (start == from)\n                return null;\n            pos -= 10000 /* FindPrev.ChunkSize */;\n        }\n    }\n    prevMatch(state, curFrom, curTo) {\n        return this.prevMatchInRange(state, 0, curFrom) ||\n            this.prevMatchInRange(state, curTo, state.doc.length);\n    }\n    getReplacement(_result) { return this.spec.unquote(this.spec.replace); }\n    matchAll(state, limit) {\n        let cursor = stringCursor(this.spec, state, 0, state.doc.length), ranges = [];\n        while (!cursor.next().done) {\n            if (ranges.length >= limit)\n                return null;\n            ranges.push(cursor.value);\n        }\n        return ranges;\n    }\n    highlight(state, from, to, add) {\n        let cursor = stringCursor(this.spec, state, Math.max(0, from - this.spec.unquoted.length), Math.min(to + this.spec.unquoted.length, state.doc.length));\n        while (!cursor.next().done)\n            add(cursor.value.from, cursor.value.to);\n    }\n}\nfunction regexpCursor(spec, state, from, to) {\n    return new RegExpCursor(state.doc, spec.search, {\n        ignoreCase: !spec.caseSensitive,\n        test: spec.wholeWord ? regexpWordTest(state.charCategorizer(state.selection.main.head)) : undefined\n    }, from, to);\n}\nfunction charBefore(str, index) {\n    return str.slice(findClusterBreak(str, index, false), index);\n}\nfunction charAfter(str, index) {\n    return str.slice(index, findClusterBreak(str, index));\n}\nfunction regexpWordTest(categorizer) {\n    return (_from, _to, match) => !match[0].length ||\n        (categorizer(charBefore(match.input, match.index)) != CharCategory.Word ||\n            categorizer(charAfter(match.input, match.index)) != CharCategory.Word) &&\n            (categorizer(charAfter(match.input, match.index + match[0].length)) != CharCategory.Word ||\n                categorizer(charBefore(match.input, match.index + match[0].length)) != CharCategory.Word);\n}\nclass RegExpQuery extends QueryType {\n    nextMatch(state, curFrom, curTo) {\n        let cursor = regexpCursor(this.spec, state, curTo, state.doc.length).next();\n        if (cursor.done)\n            cursor = regexpCursor(this.spec, state, 0, curFrom).next();\n        return cursor.done ? null : cursor.value;\n    }\n    prevMatchInRange(state, from, to) {\n        for (let size = 1;; size++) {\n            let start = Math.max(from, to - size * 10000 /* FindPrev.ChunkSize */);\n            let cursor = regexpCursor(this.spec, state, start, to), range = null;\n            while (!cursor.next().done)\n                range = cursor.value;\n            if (range && (start == from || range.from > start + 10))\n                return range;\n            if (start == from)\n                return null;\n        }\n    }\n    prevMatch(state, curFrom, curTo) {\n        return this.prevMatchInRange(state, 0, curFrom) ||\n            this.prevMatchInRange(state, curTo, state.doc.length);\n    }\n    getReplacement(result) {\n        return this.spec.unquote(this.spec.replace.replace(/\\$([$&\\d+])/g, (m, i) => i == \"$\" ? \"$\"\n            : i == \"&\" ? result.match[0]\n                : i != \"0\" && +i < result.match.length ? result.match[i]\n                    : m));\n    }\n    matchAll(state, limit) {\n        let cursor = regexpCursor(this.spec, state, 0, state.doc.length), ranges = [];\n        while (!cursor.next().done) {\n            if (ranges.length >= limit)\n                return null;\n            ranges.push(cursor.value);\n        }\n        return ranges;\n    }\n    highlight(state, from, to, add) {\n        let cursor = regexpCursor(this.spec, state, Math.max(0, from - 250 /* RegExp.HighlightMargin */), Math.min(to + 250 /* RegExp.HighlightMargin */, state.doc.length));\n        while (!cursor.next().done)\n            add(cursor.value.from, cursor.value.to);\n    }\n}\n/**\nA state effect that updates the current search query. Note that\nthis only has an effect if the search state has been initialized\n(by including [`search`](https://codemirror.net/6/docs/ref/#search.search) in your configuration or\nby running [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel) at least\nonce).\n*/\nconst setSearchQuery = /*@__PURE__*/StateEffect.define();\nconst togglePanel = /*@__PURE__*/StateEffect.define();\nconst searchState = /*@__PURE__*/StateField.define({\n    create(state) {\n        return new SearchState(defaultQuery(state).create(), null);\n    },\n    update(value, tr) {\n        for (let effect of tr.effects) {\n            if (effect.is(setSearchQuery))\n                value = new SearchState(effect.value.create(), value.panel);\n            else if (effect.is(togglePanel))\n                value = new SearchState(value.query, effect.value ? createSearchPanel : null);\n        }\n        return value;\n    },\n    provide: f => showPanel.from(f, val => val.panel)\n});\n/**\nGet the current search query from an editor state.\n*/\nfunction getSearchQuery(state) {\n    let curState = state.field(searchState, false);\n    return curState ? curState.query.spec : defaultQuery(state);\n}\n/**\nQuery whether the search panel is open in the given editor state.\n*/\nfunction searchPanelOpen(state) {\n    var _a;\n    return ((_a = state.field(searchState, false)) === null || _a === void 0 ? void 0 : _a.panel) != null;\n}\nclass SearchState {\n    constructor(query, panel) {\n        this.query = query;\n        this.panel = panel;\n    }\n}\nconst matchMark = /*@__PURE__*/Decoration.mark({ class: \"cm-searchMatch\" }), selectedMatchMark = /*@__PURE__*/Decoration.mark({ class: \"cm-searchMatch cm-searchMatch-selected\" });\nconst searchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.view = view;\n        this.decorations = this.highlight(view.state.field(searchState));\n    }\n    update(update) {\n        let state = update.state.field(searchState);\n        if (state != update.startState.field(searchState) || update.docChanged || update.selectionSet || update.viewportChanged)\n            this.decorations = this.highlight(state);\n    }\n    highlight({ query, panel }) {\n        if (!panel || !query.spec.valid)\n            return Decoration.none;\n        let { view } = this;\n        let builder = new RangeSetBuilder();\n        for (let i = 0, ranges = view.visibleRanges, l = ranges.length; i < l; i++) {\n            let { from, to } = ranges[i];\n            while (i < l - 1 && to > ranges[i + 1].from - 2 * 250 /* RegExp.HighlightMargin */)\n                to = ranges[++i].to;\n            query.highlight(view.state, from, to, (from, to) => {\n                let selected = view.state.selection.ranges.some(r => r.from == from && r.to == to);\n                builder.add(from, to, selected ? selectedMatchMark : matchMark);\n            });\n        }\n        return builder.finish();\n    }\n}, {\n    decorations: v => v.decorations\n});\nfunction searchCommand(f) {\n    return view => {\n        let state = view.state.field(searchState, false);\n        return state && state.query.spec.valid ? f(view, state) : openSearchPanel(view);\n    };\n}\n/**\nOpen the search panel if it isn't already open, and move the\nselection to the first match after the current main selection.\nWill wrap around to the start of the document when it reaches the\nend.\n*/\nconst findNext = /*@__PURE__*/searchCommand((view, { query }) => {\n    let { to } = view.state.selection.main;\n    let next = query.nextMatch(view.state, to, to);\n    if (!next)\n        return false;\n    view.dispatch({\n        selection: { anchor: next.from, head: next.to },\n        scrollIntoView: true,\n        effects: announceMatch(view, next),\n        userEvent: \"select.search\"\n    });\n    return true;\n});\n/**\nMove the selection to the previous instance of the search query,\nbefore the current main selection. Will wrap past the start\nof the document to start searching at the end again.\n*/\nconst findPrevious = /*@__PURE__*/searchCommand((view, { query }) => {\n    let { state } = view, { from } = state.selection.main;\n    let range = query.prevMatch(state, from, from);\n    if (!range)\n        return false;\n    view.dispatch({\n        selection: { anchor: range.from, head: range.to },\n        scrollIntoView: true,\n        effects: announceMatch(view, range),\n        userEvent: \"select.search\"\n    });\n    return true;\n});\n/**\nSelect all instances of the search query.\n*/\nconst selectMatches = /*@__PURE__*/searchCommand((view, { query }) => {\n    let ranges = query.matchAll(view.state, 1000);\n    if (!ranges || !ranges.length)\n        return false;\n    view.dispatch({\n        selection: EditorSelection.create(ranges.map(r => EditorSelection.range(r.from, r.to))),\n        userEvent: \"select.search.matches\"\n    });\n    return true;\n});\n/**\nSelect all instances of the currently selected text.\n*/\nconst selectSelectionMatches = ({ state, dispatch }) => {\n    let sel = state.selection;\n    if (sel.ranges.length > 1 || sel.main.empty)\n        return false;\n    let { from, to } = sel.main;\n    let ranges = [], main = 0;\n    for (let cur = new SearchCursor(state.doc, state.sliceDoc(from, to)); !cur.next().done;) {\n        if (ranges.length > 1000)\n            return false;\n        if (cur.value.from == from)\n            main = ranges.length;\n        ranges.push(EditorSelection.range(cur.value.from, cur.value.to));\n    }\n    dispatch(state.update({\n        selection: EditorSelection.create(ranges, main),\n        userEvent: \"select.search.matches\"\n    }));\n    return true;\n};\n/**\nReplace the current match of the search query.\n*/\nconst replaceNext = /*@__PURE__*/searchCommand((view, { query }) => {\n    let { state } = view, { from, to } = state.selection.main;\n    if (state.readOnly)\n        return false;\n    let next = query.nextMatch(state, from, from);\n    if (!next)\n        return false;\n    let changes = [], selection, replacement;\n    let announce = [];\n    if (next.from == from && next.to == to) {\n        replacement = state.toText(query.getReplacement(next));\n        changes.push({ from: next.from, to: next.to, insert: replacement });\n        next = query.nextMatch(state, next.from, next.to);\n        announce.push(EditorView.announce.of(state.phrase(\"replaced match on line $\", state.doc.lineAt(from).number) + \".\"));\n    }\n    if (next) {\n        let off = changes.length == 0 || changes[0].from >= next.to ? 0 : next.to - next.from - replacement.length;\n        selection = { anchor: next.from - off, head: next.to - off };\n        announce.push(announceMatch(view, next));\n    }\n    view.dispatch({\n        changes, selection,\n        scrollIntoView: !!selection,\n        effects: announce,\n        userEvent: \"input.replace\"\n    });\n    return true;\n});\n/**\nReplace all instances of the search query with the given\nreplacement.\n*/\nconst replaceAll = /*@__PURE__*/searchCommand((view, { query }) => {\n    if (view.state.readOnly)\n        return false;\n    let changes = query.matchAll(view.state, 1e9).map(match => {\n        let { from, to } = match;\n        return { from, to, insert: query.getReplacement(match) };\n    });\n    if (!changes.length)\n        return false;\n    let announceText = view.state.phrase(\"replaced $ matches\", changes.length) + \".\";\n    view.dispatch({\n        changes,\n        effects: EditorView.announce.of(announceText),\n        userEvent: \"input.replace.all\"\n    });\n    return true;\n});\nfunction createSearchPanel(view) {\n    return view.state.facet(searchConfigFacet).createPanel(view);\n}\nfunction defaultQuery(state, fallback) {\n    var _a, _b, _c, _d;\n    let sel = state.selection.main;\n    let selText = sel.empty || sel.to > sel.from + 100 ? \"\" : state.sliceDoc(sel.from, sel.to);\n    if (fallback && !selText)\n        return fallback;\n    let config = state.facet(searchConfigFacet);\n    return new SearchQuery({\n        search: ((_a = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _a !== void 0 ? _a : config.literal) ? selText : selText.replace(/\\n/g, \"\\\\n\"),\n        caseSensitive: (_b = fallback === null || fallback === void 0 ? void 0 : fallback.caseSensitive) !== null && _b !== void 0 ? _b : config.caseSensitive,\n        literal: (_c = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _c !== void 0 ? _c : config.literal,\n        wholeWord: (_d = fallback === null || fallback === void 0 ? void 0 : fallback.wholeWord) !== null && _d !== void 0 ? _d : config.wholeWord\n    });\n}\n/**\nMake sure the search panel is open and focused.\n*/\nconst openSearchPanel = view => {\n    let state = view.state.field(searchState, false);\n    if (state && state.panel) {\n        let panel = getPanel(view, createSearchPanel);\n        if (!panel)\n            return false;\n        let searchInput = panel.dom.querySelector(\"[main-field]\");\n        if (searchInput && searchInput != view.root.activeElement) {\n            let query = defaultQuery(view.state, state.query.spec);\n            if (query.valid)\n                view.dispatch({ effects: setSearchQuery.of(query) });\n            searchInput.focus();\n            searchInput.select();\n        }\n    }\n    else {\n        view.dispatch({ effects: [\n                togglePanel.of(true),\n                state ? setSearchQuery.of(defaultQuery(view.state, state.query.spec)) : StateEffect.appendConfig.of(searchExtensions)\n            ] });\n    }\n    return true;\n};\n/**\nClose the search panel.\n*/\nconst closeSearchPanel = view => {\n    let state = view.state.field(searchState, false);\n    if (!state || !state.panel)\n        return false;\n    let panel = getPanel(view, createSearchPanel);\n    if (panel && panel.dom.contains(view.root.activeElement))\n        view.focus();\n    view.dispatch({ effects: togglePanel.of(false) });\n    return true;\n};\n/**\nDefault search-related key bindings.\n\n - Mod-f: [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel)\n - F3, Mod-g: [`findNext`](https://codemirror.net/6/docs/ref/#search.findNext)\n - Shift-F3, Shift-Mod-g: [`findPrevious`](https://codemirror.net/6/docs/ref/#search.findPrevious)\n - Alt-g: [`gotoLine`](https://codemirror.net/6/docs/ref/#search.gotoLine)\n - Mod-d: [`selectNextOccurrence`](https://codemirror.net/6/docs/ref/#search.selectNextOccurrence)\n*/\nconst searchKeymap = [\n    { key: \"Mod-f\", run: openSearchPanel, scope: \"editor search-panel\" },\n    { key: \"F3\", run: findNext, shift: findPrevious, scope: \"editor search-panel\", preventDefault: true },\n    { key: \"Mod-g\", run: findNext, shift: findPrevious, scope: \"editor search-panel\", preventDefault: true },\n    { key: \"Escape\", run: closeSearchPanel, scope: \"editor search-panel\" },\n    { key: \"Mod-Shift-l\", run: selectSelectionMatches },\n    { key: \"Alt-g\", run: gotoLine },\n    { key: \"Mod-d\", run: selectNextOccurrence, preventDefault: true },\n];\nclass SearchPanel {\n    constructor(view) {\n        this.view = view;\n        let query = this.query = view.state.field(searchState).query.spec;\n        this.commit = this.commit.bind(this);\n        this.searchField = elt(\"input\", {\n            value: query.search,\n            placeholder: phrase(view, \"Find\"),\n            \"aria-label\": phrase(view, \"Find\"),\n            class: \"cm-textfield\",\n            name: \"search\",\n            form: \"\",\n            \"main-field\": \"true\",\n            onchange: this.commit,\n            onkeyup: this.commit\n        });\n        this.replaceField = elt(\"input\", {\n            value: query.replace,\n            placeholder: phrase(view, \"Replace\"),\n            \"aria-label\": phrase(view, \"Replace\"),\n            class: \"cm-textfield\",\n            name: \"replace\",\n            form: \"\",\n            onchange: this.commit,\n            onkeyup: this.commit\n        });\n        this.caseField = elt(\"input\", {\n            type: \"checkbox\",\n            name: \"case\",\n            form: \"\",\n            checked: query.caseSensitive,\n            onchange: this.commit\n        });\n        this.reField = elt(\"input\", {\n            type: \"checkbox\",\n            name: \"re\",\n            form: \"\",\n            checked: query.regexp,\n            onchange: this.commit\n        });\n        this.wordField = elt(\"input\", {\n            type: \"checkbox\",\n            name: \"word\",\n            form: \"\",\n            checked: query.wholeWord,\n            onchange: this.commit\n        });\n        function button(name, onclick, content) {\n            return elt(\"button\", { class: \"cm-button\", name, onclick, type: \"button\" }, content);\n        }\n        this.dom = elt(\"div\", { onkeydown: (e) => this.keydown(e), class: \"cm-search\" }, [\n            this.searchField,\n            button(\"next\", () => findNext(view), [phrase(view, \"next\")]),\n            button(\"prev\", () => findPrevious(view), [phrase(view, \"previous\")]),\n            button(\"select\", () => selectMatches(view), [phrase(view, \"all\")]),\n            elt(\"label\", null, [this.caseField, phrase(view, \"match case\")]),\n            elt(\"label\", null, [this.reField, phrase(view, \"regexp\")]),\n            elt(\"label\", null, [this.wordField, phrase(view, \"by word\")]),\n            ...view.state.readOnly ? [] : [\n                elt(\"br\"),\n                this.replaceField,\n                button(\"replace\", () => replaceNext(view), [phrase(view, \"replace\")]),\n                button(\"replaceAll\", () => replaceAll(view), [phrase(view, \"replace all\")]),\n                elt(\"button\", {\n                    name: \"close\",\n                    onclick: () => closeSearchPanel(view),\n                    \"aria-label\": phrase(view, \"close\"),\n                    type: \"button\"\n                }, [\"×\"])\n            ]\n        ]);\n    }\n    commit() {\n        let query = new SearchQuery({\n            search: this.searchField.value,\n            caseSensitive: this.caseField.checked,\n            regexp: this.reField.checked,\n            wholeWord: this.wordField.checked,\n            replace: this.replaceField.value,\n        });\n        if (!query.eq(this.query)) {\n            this.query = query;\n            this.view.dispatch({ effects: setSearchQuery.of(query) });\n        }\n    }\n    keydown(e) {\n        if (runScopeHandlers(this.view, e, \"search-panel\")) {\n            e.preventDefault();\n        }\n        else if (e.keyCode == 13 && e.target == this.searchField) {\n            e.preventDefault();\n            (e.shiftKey ? findPrevious : findNext)(this.view);\n        }\n        else if (e.keyCode == 13 && e.target == this.replaceField) {\n            e.preventDefault();\n            replaceNext(this.view);\n        }\n    }\n    update(update) {\n        for (let tr of update.transactions)\n            for (let effect of tr.effects) {\n                if (effect.is(setSearchQuery) && !effect.value.eq(this.query))\n                    this.setQuery(effect.value);\n            }\n    }\n    setQuery(query) {\n        this.query = query;\n        this.searchField.value = query.search;\n        this.replaceField.value = query.replace;\n        this.caseField.checked = query.caseSensitive;\n        this.reField.checked = query.regexp;\n        this.wordField.checked = query.wholeWord;\n    }\n    mount() {\n        this.searchField.select();\n    }\n    get pos() { return 80; }\n    get top() { return this.view.state.facet(searchConfigFacet).top; }\n}\nfunction phrase(view, phrase) { return view.state.phrase(phrase); }\nconst AnnounceMargin = 30;\nconst Break = /[\\s\\.,:;?!]/;\nfunction announceMatch(view, { from, to }) {\n    let line = view.state.doc.lineAt(from), lineEnd = view.state.doc.lineAt(to).to;\n    let start = Math.max(line.from, from - AnnounceMargin), end = Math.min(lineEnd, to + AnnounceMargin);\n    let text = view.state.sliceDoc(start, end);\n    if (start != line.from) {\n        for (let i = 0; i < AnnounceMargin; i++)\n            if (!Break.test(text[i + 1]) && Break.test(text[i])) {\n                text = text.slice(i);\n                break;\n            }\n    }\n    if (end != lineEnd) {\n        for (let i = text.length - 1; i > text.length - AnnounceMargin; i--)\n            if (!Break.test(text[i - 1]) && Break.test(text[i])) {\n                text = text.slice(0, i);\n                break;\n            }\n    }\n    return EditorView.announce.of(`${view.state.phrase(\"current match\")}. ${text} ${view.state.phrase(\"on line\")} ${line.number}.`);\n}\nconst baseTheme = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-panel.cm-search\": {\n        padding: \"2px 6px 4px\",\n        position: \"relative\",\n        \"& [name=close]\": {\n            position: \"absolute\",\n            top: \"0\",\n            right: \"4px\",\n            backgroundColor: \"inherit\",\n            border: \"none\",\n            font: \"inherit\",\n            padding: 0,\n            margin: 0\n        },\n        \"& input, & button, & label\": {\n            margin: \".2em .6em .2em 0\"\n        },\n        \"& input[type=checkbox]\": {\n            marginRight: \".2em\"\n        },\n        \"& label\": {\n            fontSize: \"80%\",\n            whiteSpace: \"pre\"\n        }\n    },\n    \"&light .cm-searchMatch\": { backgroundColor: \"#ffff0054\" },\n    \"&dark .cm-searchMatch\": { backgroundColor: \"#00ffff8a\" },\n    \"&light .cm-searchMatch-selected\": { backgroundColor: \"#ff6a0054\" },\n    \"&dark .cm-searchMatch-selected\": { backgroundColor: \"#ff00ff8a\" }\n});\nconst searchExtensions = [\n    searchState,\n    /*@__PURE__*/Prec.lowest(searchHighlighter),\n    baseTheme\n];\n\nexport { RegExpCursor, SearchCursor, SearchQuery, closeSearchPanel, findNext, findPrevious, getSearchQuery, gotoLine, highlightSelectionMatches, openSearchPanel, replaceAll, replaceNext, search, searchKeymap, searchPanelOpen, selectMatches, selectNextOccurrence, selectSelectionMatches, setSearchQuery };\n","import { EditorSelection, MapMode, Prec, RangeSetBuilder, StateEffect, StateField } from '@codemirror/state';\nimport { foldCode, matchBrackets, indentUnit, ensureSyntaxTree, StringStream } from '@codemirror/language';\nimport { EditorView, Direction, ViewPlugin, Decoration, showPanel } from '@codemirror/view';\nimport { SearchQuery, setSearchQuery, RegExpCursor } from '@codemirror/search';\nimport { indentMore, indentLess, cursorLineBoundaryBackward, cursorLineBoundaryForward, cursorCharBackward, cursorCharLeft, insertNewlineAndIndent, indentSelection, deleteCharBackward, deleteCharForward, undo, redo } from '@codemirror/commands';\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n/**\n * Supported keybindings:\n *   Too many to list. Refer to defaultKeymap below.\n *\n * Supported Ex commands:\n *   Refer to defaultExCommandMap below.\n *\n * Registers: unnamed, -, ., :, /, _, a-z, A-Z, 0-9\n *   (Does not respect the special case for number registers when delete\n *    operator is made with these commands: %, (, ),  , /, ?, n, N, {, } )\n *   TODO: Implement the remaining registers.\n *\n * Marks: a-z, A-Z, and 0-9\n *   TODO: Implement the remaining special marks. They have more complex\n *       behavior.\n *\n * Events:\n *  'vim-mode-change' - raised on the editor anytime the current mode changes,\n *                      Event object: {mode: \"visual\", subMode: \"linewise\"}\n *\n * Code structure:\n *  1. Default keymap\n *  2. Variable declarations and short basic helpers\n *  3. Instance (External API) implementation\n *  4. Internal state tracking objects (input state, counter) implementation\n *     and instantiation\n *  5. Key handler (the main command dispatcher) implementation\n *  6. Motion, operator, and action implementations\n *  7. Helper functions for the key handler, motions, operators, and actions\n *  8. Set up Vim to work as a keymap for CodeMirror.\n *  9. Ex command implementations.\n */\n\nfunction initVim(CodeMirror) {\n\n  var Pos = CodeMirror.Pos;\n\n  function transformCursor(cm, range) {\n    var vim = cm.state.vim;\n    if (!vim || vim.insertMode) return range.head;\n    var head = vim.sel.head;\n    if (!head)  return range.head;\n\n    if (vim.visualBlock) {\n      if (range.head.line != head.line) {\n        return;\n      }\n    }\n    if (range.from() == range.anchor && !range.empty()) {\n      if (range.head.line == head.line && range.head.ch != head.ch)\n        return new Pos(range.head.line, range.head.ch - 1);\n    }\n\n    return range.head;\n  }\n\n  var defaultKeymap = [\n    // Key to key mapping. This goes first to make it possible to override\n    // existing mappings.\n    { keys: '<Left>', type: 'keyToKey', toKeys: 'h' },\n    { keys: '<Right>', type: 'keyToKey', toKeys: 'l' },\n    { keys: '<Up>', type: 'keyToKey', toKeys: 'k' },\n    { keys: '<Down>', type: 'keyToKey', toKeys: 'j' },\n    { keys: 'g<Up>', type: 'keyToKey', toKeys: 'gk' },\n    { keys: 'g<Down>', type: 'keyToKey', toKeys: 'gj' },\n    { keys: '<Space>', type: 'keyToKey', toKeys: 'l' },\n    { keys: '<BS>', type: 'keyToKey', toKeys: 'h', context: 'normal'},\n    { keys: '<Del>', type: 'keyToKey', toKeys: 'x', context: 'normal'},\n    { keys: '<C-Space>', type: 'keyToKey', toKeys: 'W' },\n    { keys: '<C-BS>', type: 'keyToKey', toKeys: 'B', context: 'normal' },\n    { keys: '<S-Space>', type: 'keyToKey', toKeys: 'w' },\n    { keys: '<S-BS>', type: 'keyToKey', toKeys: 'b', context: 'normal' },\n    { keys: '<C-n>', type: 'keyToKey', toKeys: 'j' },\n    { keys: '<C-p>', type: 'keyToKey', toKeys: 'k' },\n    { keys: '<C-[>', type: 'keyToKey', toKeys: '<Esc>' },\n    { keys: '<C-c>', type: 'keyToKey', toKeys: '<Esc>' },\n    { keys: '<C-[>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },\n    { keys: '<C-c>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },\n    { keys: '<C-Esc>', type: 'keyToKey', toKeys: '<Esc>' }, // ipad keyboard sends C-Esc instead of C-[\n    { keys: '<C-Esc>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },\n    { keys: 's', type: 'keyToKey', toKeys: 'cl', context: 'normal' },\n    { keys: 's', type: 'keyToKey', toKeys: 'c', context: 'visual'},\n    { keys: 'S', type: 'keyToKey', toKeys: 'cc', context: 'normal' },\n    { keys: 'S', type: 'keyToKey', toKeys: 'VdO', context: 'visual' },\n    { keys: '<Home>', type: 'keyToKey', toKeys: '0' },\n    { keys: '<End>', type: 'keyToKey', toKeys: '$' },\n    { keys: '<PageUp>', type: 'keyToKey', toKeys: '<C-b>' },\n    { keys: '<PageDown>', type: 'keyToKey', toKeys: '<C-f>' },\n    { keys: '<CR>', type: 'keyToKey', toKeys: 'j^', context: 'normal' },\n    { keys: '<Ins>', type: 'keyToKey', toKeys: 'i', context: 'normal'},\n    { keys: '<Ins>', type: 'action', action: 'toggleOverwrite', context: 'insert' },\n    // Motions\n    { keys: 'H', type: 'motion', motion: 'moveToTopLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'M', type: 'motion', motion: 'moveToMiddleLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'L', type: 'motion', motion: 'moveToBottomLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'h', type: 'motion', motion: 'moveByCharacters', motionArgs: { forward: false }},\n    { keys: 'l', type: 'motion', motion: 'moveByCharacters', motionArgs: { forward: true }},\n    { keys: 'j', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, linewise: true }},\n    { keys: 'k', type: 'motion', motion: 'moveByLines', motionArgs: { forward: false, linewise: true }},\n    { keys: 'gj', type: 'motion', motion: 'moveByDisplayLines', motionArgs: { forward: true }},\n    { keys: 'gk', type: 'motion', motion: 'moveByDisplayLines', motionArgs: { forward: false }},\n    { keys: 'w', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: false }},\n    { keys: 'W', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: false, bigWord: true }},\n    { keys: 'e', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: true, inclusive: true }},\n    { keys: 'E', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: true, bigWord: true, inclusive: true }},\n    { keys: 'b', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false }},\n    { keys: 'B', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false, bigWord: true }},\n    { keys: 'ge', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: true, inclusive: true }},\n    { keys: 'gE', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: true, bigWord: true, inclusive: true }},\n    { keys: '{', type: 'motion', motion: 'moveByParagraph', motionArgs: { forward: false, toJumplist: true }},\n    { keys: '}', type: 'motion', motion: 'moveByParagraph', motionArgs: { forward: true, toJumplist: true }},\n    { keys: '(', type: 'motion', motion: 'moveBySentence', motionArgs: { forward: false }},\n    { keys: ')', type: 'motion', motion: 'moveBySentence', motionArgs: { forward: true }},\n    { keys: '<C-f>', type: 'motion', motion: 'moveByPage', motionArgs: { forward: true }},\n    { keys: '<C-b>', type: 'motion', motion: 'moveByPage', motionArgs: { forward: false }},\n    { keys: '<C-d>', type: 'motion', motion: 'moveByScroll', motionArgs: { forward: true, explicitRepeat: true }},\n    { keys: '<C-u>', type: 'motion', motion: 'moveByScroll', motionArgs: { forward: false, explicitRepeat: true }},\n    { keys: 'gg', type: 'motion', motion: 'moveToLineOrEdgeOfDocument', motionArgs: { forward: false, explicitRepeat: true, linewise: true, toJumplist: true }},\n    { keys: 'G', type: 'motion', motion: 'moveToLineOrEdgeOfDocument', motionArgs: { forward: true, explicitRepeat: true, linewise: true, toJumplist: true }},\n    {keys: \"g$\", type: \"motion\", motion: \"moveToEndOfDisplayLine\"},\n    {keys: \"g^\", type: \"motion\", motion: \"moveToStartOfDisplayLine\"},\n    {keys: \"g0\", type: \"motion\", motion: \"moveToStartOfDisplayLine\"},\n    { keys: '0', type: 'motion', motion: 'moveToStartOfLine' },\n    { keys: '^', type: 'motion', motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: '+', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, toFirstChar:true }},\n    { keys: '-', type: 'motion', motion: 'moveByLines', motionArgs: { forward: false, toFirstChar:true }},\n    { keys: '_', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, toFirstChar:true, repeatOffset:-1 }},\n    { keys: '$', type: 'motion', motion: 'moveToEol', motionArgs: { inclusive: true }},\n    { keys: '%', type: 'motion', motion: 'moveToMatchedSymbol', motionArgs: { inclusive: true, toJumplist: true }},\n    { keys: 'f<character>', type: 'motion', motion: 'moveToCharacter', motionArgs: { forward: true , inclusive: true }},\n    { keys: 'F<character>', type: 'motion', motion: 'moveToCharacter', motionArgs: { forward: false }},\n    { keys: 't<character>', type: 'motion', motion: 'moveTillCharacter', motionArgs: { forward: true, inclusive: true }},\n    { keys: 'T<character>', type: 'motion', motion: 'moveTillCharacter', motionArgs: { forward: false }},\n    { keys: ';', type: 'motion', motion: 'repeatLastCharacterSearch', motionArgs: { forward: true }},\n    { keys: ',', type: 'motion', motion: 'repeatLastCharacterSearch', motionArgs: { forward: false }},\n    { keys: '\\'<character>', type: 'motion', motion: 'goToMark', motionArgs: {toJumplist: true, linewise: true}},\n    { keys: '`<character>', type: 'motion', motion: 'goToMark', motionArgs: {toJumplist: true}},\n    { keys: ']`', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: true } },\n    { keys: '[`', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: false } },\n    { keys: ']\\'', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: true, linewise: true } },\n    { keys: '[\\'', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: false, linewise: true } },\n    // the next two aren't motions but must come before more general motion declarations\n    { keys: ']p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: true, isEdit: true, matchIndent: true}},\n    { keys: '[p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: false, isEdit: true, matchIndent: true}},\n    { keys: ']<character>', type: 'motion', motion: 'moveToSymbol', motionArgs: { forward: true, toJumplist: true}},\n    { keys: '[<character>', type: 'motion', motion: 'moveToSymbol', motionArgs: { forward: false, toJumplist: true}},\n    { keys: '|', type: 'motion', motion: 'moveToColumn'},\n    { keys: 'o', type: 'motion', motion: 'moveToOtherHighlightedEnd', context:'visual'},\n    { keys: 'O', type: 'motion', motion: 'moveToOtherHighlightedEnd', motionArgs: {sameLine: true}, context:'visual'},\n    // Operators\n    { keys: 'd', type: 'operator', operator: 'delete' },\n    { keys: 'y', type: 'operator', operator: 'yank' },\n    { keys: 'c', type: 'operator', operator: 'change' },\n    { keys: '=', type: 'operator', operator: 'indentAuto' },\n    { keys: '>', type: 'operator', operator: 'indent', operatorArgs: { indentRight: true }},\n    { keys: '<', type: 'operator', operator: 'indent', operatorArgs: { indentRight: false }},\n    { keys: 'g~', type: 'operator', operator: 'changeCase' },\n    { keys: 'gu', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: true}, isEdit: true },\n    { keys: 'gU', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: false}, isEdit: true },\n    { keys: 'n', type: 'motion', motion: 'findNext', motionArgs: { forward: true, toJumplist: true }},\n    { keys: 'N', type: 'motion', motion: 'findNext', motionArgs: { forward: false, toJumplist: true }},\n    { keys: 'gn', type: 'motion', motion: 'findAndSelectNextInclusive', motionArgs: { forward: true }},\n    { keys: 'gN', type: 'motion', motion: 'findAndSelectNextInclusive', motionArgs: { forward: false }},\n    // Operator-Motion dual commands\n    { keys: 'x', type: 'operatorMotion', operator: 'delete', motion: 'moveByCharacters', motionArgs: { forward: true }, operatorMotionArgs: { visualLine: false }},\n    { keys: 'X', type: 'operatorMotion', operator: 'delete', motion: 'moveByCharacters', motionArgs: { forward: false }, operatorMotionArgs: { visualLine: true }},\n    { keys: 'D', type: 'operatorMotion', operator: 'delete', motion: 'moveToEol', motionArgs: { inclusive: true }, context: 'normal'},\n    { keys: 'D', type: 'operator', operator: 'delete', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: 'Y', type: 'operatorMotion', operator: 'yank', motion: 'expandToLine', motionArgs: { linewise: true }, context: 'normal'},\n    { keys: 'Y', type: 'operator', operator: 'yank', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: 'C', type: 'operatorMotion', operator: 'change', motion: 'moveToEol', motionArgs: { inclusive: true }, context: 'normal'},\n    { keys: 'C', type: 'operator', operator: 'change', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: '~', type: 'operatorMotion', operator: 'changeCase', motion: 'moveByCharacters', motionArgs: { forward: true }, operatorArgs: { shouldMoveCursor: true }, context: 'normal'},\n    { keys: '~', type: 'operator', operator: 'changeCase', context: 'visual'},\n    { keys: '<C-u>', type: 'operatorMotion', operator: 'delete', motion: 'moveToStartOfLine', context: 'insert' },\n    { keys: '<C-w>', type: 'operatorMotion', operator: 'delete', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false }, context: 'insert' },\n    //ignore C-w in normal mode\n    { keys: '<C-w>', type: 'idle', context: 'normal' },\n    // Actions\n    { keys: '<C-i>', type: 'action', action: 'jumpListWalk', actionArgs: { forward: true }},\n    { keys: '<C-o>', type: 'action', action: 'jumpListWalk', actionArgs: { forward: false }},\n    { keys: '<C-e>', type: 'action', action: 'scroll', actionArgs: { forward: true, linewise: true }},\n    { keys: '<C-y>', type: 'action', action: 'scroll', actionArgs: { forward: false, linewise: true }},\n    { keys: 'a', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'charAfter' }, context: 'normal' },\n    { keys: 'A', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'eol' }, context: 'normal' },\n    { keys: 'A', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'endOfSelectedArea' }, context: 'visual' },\n    { keys: 'i', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'inplace' }, context: 'normal' },\n    { keys: 'gi', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'lastEdit' }, context: 'normal' },\n    { keys: 'I', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'firstNonBlank'}, context: 'normal' },\n    { keys: 'gI', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'bol'}, context: 'normal' },\n    { keys: 'I', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'startOfSelectedArea' }, context: 'visual' },\n    { keys: 'o', type: 'action', action: 'newLineAndEnterInsertMode', isEdit: true, interlaceInsertRepeat: true, actionArgs: { after: true }, context: 'normal' },\n    { keys: 'O', type: 'action', action: 'newLineAndEnterInsertMode', isEdit: true, interlaceInsertRepeat: true, actionArgs: { after: false }, context: 'normal' },\n    { keys: 'v', type: 'action', action: 'toggleVisualMode' },\n    { keys: 'V', type: 'action', action: 'toggleVisualMode', actionArgs: { linewise: true }},\n    { keys: '<C-v>', type: 'action', action: 'toggleVisualMode', actionArgs: { blockwise: true }},\n    { keys: '<C-q>', type: 'action', action: 'toggleVisualMode', actionArgs: { blockwise: true }},\n    { keys: 'gv', type: 'action', action: 'reselectLastSelection' },\n    { keys: 'J', type: 'action', action: 'joinLines', isEdit: true },\n    { keys: 'gJ', type: 'action', action: 'joinLines', actionArgs: { keepSpaces: true }, isEdit: true },\n    { keys: 'p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: true, isEdit: true }},\n    { keys: 'P', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: false, isEdit: true }},\n    { keys: 'r<character>', type: 'action', action: 'replace', isEdit: true },\n    { keys: '@<character>', type: 'action', action: 'replayMacro' },\n    { keys: 'q<character>', type: 'action', action: 'enterMacroRecordMode' },\n    // Handle Replace-mode as a special case of insert mode.\n    { keys: 'R', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { replace: true }, context: 'normal'},\n    { keys: 'R', type: 'operator', operator: 'change', operatorArgs: { linewise: true, fullLine: true }, context: 'visual', exitVisualBlock: true},\n    { keys: 'u', type: 'action', action: 'undo', context: 'normal' },\n    { keys: 'u', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: true}, context: 'visual', isEdit: true },\n    { keys: 'U', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: false}, context: 'visual', isEdit: true },\n    { keys: '<C-r>', type: 'action', action: 'redo' },\n    { keys: 'm<character>', type: 'action', action: 'setMark' },\n    { keys: '\"<character>', type: 'action', action: 'setRegister' },\n    { keys: 'zz', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'center' }},\n    { keys: 'z.', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'center' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: 'zt', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'top' }},\n    { keys: 'z<CR>', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'top' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: 'zb', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'bottom' }},\n    { keys: 'z-', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'bottom' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: '.', type: 'action', action: 'repeatLastEdit' },\n    { keys: '<C-a>', type: 'action', action: 'incrementNumberToken', isEdit: true, actionArgs: {increase: true, backtrack: false}},\n    { keys: '<C-x>', type: 'action', action: 'incrementNumberToken', isEdit: true, actionArgs: {increase: false, backtrack: false}},\n    { keys: '<C-t>', type: 'action', action: 'indent', actionArgs: { indentRight: true }, context: 'insert' },\n    { keys: '<C-d>', type: 'action', action: 'indent', actionArgs: { indentRight: false }, context: 'insert' },\n    // Text object motions\n    { keys: 'a<character>', type: 'motion', motion: 'textObjectManipulation' },\n    { keys: 'i<character>', type: 'motion', motion: 'textObjectManipulation', motionArgs: { textObjectInner: true }},\n    // Search\n    { keys: '/', type: 'search', searchArgs: { forward: true, querySrc: 'prompt', toJumplist: true }},\n    { keys: '?', type: 'search', searchArgs: { forward: false, querySrc: 'prompt', toJumplist: true }},\n    { keys: '*', type: 'search', searchArgs: { forward: true, querySrc: 'wordUnderCursor', wholeWordOnly: true, toJumplist: true }},\n    { keys: '#', type: 'search', searchArgs: { forward: false, querySrc: 'wordUnderCursor', wholeWordOnly: true, toJumplist: true }},\n    { keys: 'g*', type: 'search', searchArgs: { forward: true, querySrc: 'wordUnderCursor', toJumplist: true }},\n    { keys: 'g#', type: 'search', searchArgs: { forward: false, querySrc: 'wordUnderCursor', toJumplist: true }},\n    // Ex command\n    { keys: ':', type: 'ex' }\n  ];\n  var defaultKeymapLength = defaultKeymap.length;\n\n  /**\n   * Ex commands\n   * Care must be taken when adding to the default Ex command map. For any\n   * pair of commands that have a shared prefix, at least one of their\n   * shortNames must not match the prefix of the other command.\n   */\n  var defaultExCommandMap = [\n    { name: 'colorscheme', shortName: 'colo' },\n    { name: 'map' },\n    { name: 'imap', shortName: 'im' },\n    { name: 'nmap', shortName: 'nm' },\n    { name: 'vmap', shortName: 'vm' },\n    { name: 'unmap' },\n    { name: 'write', shortName: 'w' },\n    { name: 'undo', shortName: 'u' },\n    { name: 'redo', shortName: 'red' },\n    { name: 'set', shortName: 'se' },\n    { name: 'setlocal', shortName: 'setl' },\n    { name: 'setglobal', shortName: 'setg' },\n    { name: 'sort', shortName: 'sor' },\n    { name: 'substitute', shortName: 's', possiblyAsync: true },\n    { name: 'nohlsearch', shortName: 'noh' },\n    { name: 'yank', shortName: 'y' },\n    { name: 'delmarks', shortName: 'delm' },\n    { name: 'registers', shortName: 'reg', excludeFromCommandHistory: true },\n    { name: 'vglobal', shortName: 'v' },\n    { name: 'global', shortName: 'g' }\n  ];\n\n    function enterVimMode(cm) {\n      cm.setOption('disableInput', true);\n      cm.setOption('showCursorWhenSelecting', false);\n      CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n      cm.on('cursorActivity', onCursorActivity);\n      maybeInitVimState(cm);\n      CodeMirror.on(cm.getInputField(), 'paste', getOnPasteFn(cm));\n    }\n\n    function leaveVimMode(cm) {\n      cm.setOption('disableInput', false);\n      cm.off('cursorActivity', onCursorActivity);\n      CodeMirror.off(cm.getInputField(), 'paste', getOnPasteFn(cm));\n      cm.state.vim = null;\n      if (highlightTimeout) clearTimeout(highlightTimeout);\n    }\n\n    function detachVimMap(cm, next) {\n      if (this == CodeMirror.keyMap.vim) {\n        cm.options.$customCursor = null;\n        CodeMirror.rmClass(cm.getWrapperElement(), \"cm-fat-cursor\");\n      }\n\n      if (!next || next.attach != attachVimMap)\n        leaveVimMode(cm);\n    }\n    function attachVimMap(cm, prev) {\n      if (this == CodeMirror.keyMap.vim) {\n        if (cm.curOp) cm.curOp.selectionChanged = true;\n        cm.options.$customCursor = transformCursor;\n        CodeMirror.addClass(cm.getWrapperElement(), \"cm-fat-cursor\");\n      }\n\n      if (!prev || prev.attach != attachVimMap)\n        enterVimMode(cm);\n    }\n\n    // Deprecated, simply setting the keymap works again.\n    CodeMirror.defineOption('vimMode', false, function(cm, val, prev) {\n      if (val && cm.getOption(\"keyMap\") != \"vim\")\n        cm.setOption(\"keyMap\", \"vim\");\n      else if (!val && prev != CodeMirror.Init && /^vim/.test(cm.getOption(\"keyMap\")))\n        cm.setOption(\"keyMap\", \"default\");\n    });\n\n    function cmKey(key, cm) {\n      if (!cm) { return undefined; }\n      if (this[key]) { return this[key]; }\n      var vimKey = cmKeyToVimKey(key);\n      if (!vimKey) {\n        return false;\n      }\n      var cmd = vimApi.findKey(cm, vimKey);\n      if (typeof cmd == 'function') {\n        CodeMirror.signal(cm, 'vim-keypress', vimKey);\n      }\n      return cmd;\n    }\n\n    var modifiers = {Shift:'S',Ctrl:'C',Alt:'A',Cmd:'D',Mod:'A',CapsLock:''};\n    var specialKeys = {Enter:'CR',Backspace:'BS',Delete:'Del',Insert:'Ins'};\n    function cmKeyToVimKey(key) {\n      if (key.charAt(0) == '\\'') {\n        // Keypress character binding of format \"'a'\"\n        return key.charAt(1);\n      }\n      var pieces = key.split(/-(?!$)/);\n      var lastPiece = pieces[pieces.length - 1];\n      if (pieces.length == 1 && pieces[0].length == 1) {\n        // No-modifier bindings use literal character bindings above. Skip.\n        return false;\n      } else if (pieces.length == 2 && pieces[0] == 'Shift' && lastPiece.length == 1) {\n        // Ignore Shift+char bindings as they should be handled by literal character.\n        return false;\n      }\n      var hasCharacter = false;\n      for (var i = 0; i < pieces.length; i++) {\n        var piece = pieces[i];\n        if (piece in modifiers) { pieces[i] = modifiers[piece]; }\n        else { hasCharacter = true; }\n        if (piece in specialKeys) { pieces[i] = specialKeys[piece]; }\n      }\n      if (!hasCharacter) {\n        // Vim does not support modifier only keys.\n        return false;\n      }\n      // TODO: Current bindings expect the character to be lower case, but\n      // it looks like vim key notation uses upper case.\n      if (isUpperCase(lastPiece)) {\n        pieces[pieces.length - 1] = lastPiece.toLowerCase();\n      }\n      return '<' + pieces.join('-') + '>';\n    }\n\n    function getOnPasteFn(cm) {\n      var vim = cm.state.vim;\n      if (!vim.onPasteFn) {\n        vim.onPasteFn = function() {\n          if (!vim.insertMode) {\n            cm.setCursor(offsetCursor(cm.getCursor(), 0, 1));\n            actions.enterInsertMode(cm, {}, vim);\n          }\n        };\n      }\n      return vim.onPasteFn;\n    }\n\n    var numberRegex = /[\\d]/;\n    var wordCharTest = [CodeMirror.isWordChar, function(ch) {\n      return ch && !CodeMirror.isWordChar(ch) && !/\\s/.test(ch);\n    }], bigWordCharTest = [function(ch) {\n      return /\\S/.test(ch);\n    }];\n    function makeKeyRange(start, size) {\n      var keys = [];\n      for (var i = start; i < start + size; i++) {\n        keys.push(String.fromCharCode(i));\n      }\n      return keys;\n    }\n    var upperCaseAlphabet = makeKeyRange(65, 26);\n    var lowerCaseAlphabet = makeKeyRange(97, 26);\n    var numbers = makeKeyRange(48, 10);\n    var validMarks = [].concat(upperCaseAlphabet, lowerCaseAlphabet, numbers, ['<', '>']);\n    var validRegisters = [].concat(upperCaseAlphabet, lowerCaseAlphabet, numbers, ['-', '\"', '.', ':', '_', '/', '+']);\n    var upperCaseChars;\n    try { upperCaseChars = new RegExp(\"^[\\\\p{Lu}]$\", \"u\"); }\n    catch (_) { upperCaseChars = /^[A-Z]$/; }\n\n    function isLine(cm, line) {\n      return line >= cm.firstLine() && line <= cm.lastLine();\n    }\n    function isLowerCase(k) {\n      return (/^[a-z]$/).test(k);\n    }\n    function isMatchableSymbol(k) {\n      return '()[]{}'.indexOf(k) != -1;\n    }\n    function isNumber(k) {\n      return numberRegex.test(k);\n    }\n    function isUpperCase(k) {\n      return upperCaseChars.test(k);\n    }\n    function isWhiteSpaceString(k) {\n      return (/^\\s*$/).test(k);\n    }\n    function isEndOfSentenceSymbol(k) {\n      return '.?!'.indexOf(k) != -1;\n    }\n    function inArray(val, arr) {\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] == val) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    var options = {};\n    function defineOption(name, defaultValue, type, aliases, callback) {\n      if (defaultValue === undefined && !callback) {\n        throw Error('defaultValue is required unless callback is provided');\n      }\n      if (!type) { type = 'string'; }\n      options[name] = {\n        type: type,\n        defaultValue: defaultValue,\n        callback: callback\n      };\n      if (aliases) {\n        for (var i = 0; i < aliases.length; i++) {\n          options[aliases[i]] = options[name];\n        }\n      }\n      if (defaultValue) {\n        setOption(name, defaultValue);\n      }\n    }\n\n    function setOption(name, value, cm, cfg) {\n      var option = options[name];\n      cfg = cfg || {};\n      var scope = cfg.scope;\n      if (!option) {\n        return new Error('Unknown option: ' + name);\n      }\n      if (option.type == 'boolean') {\n        if (value && value !== true) {\n          return new Error('Invalid argument: ' + name + '=' + value);\n        } else if (value !== false) {\n          // Boolean options are set to true if value is not defined.\n          value = true;\n        }\n      }\n      if (option.callback) {\n        if (scope !== 'local') {\n          option.callback(value, undefined);\n        }\n        if (scope !== 'global' && cm) {\n          option.callback(value, cm);\n        }\n      } else {\n        if (scope !== 'local') {\n          option.value = option.type == 'boolean' ? !!value : value;\n        }\n        if (scope !== 'global' && cm) {\n          cm.state.vim.options[name] = {value: value};\n        }\n      }\n    }\n\n    function getOption(name, cm, cfg) {\n      var option = options[name];\n      cfg = cfg || {};\n      var scope = cfg.scope;\n      if (!option) {\n        return new Error('Unknown option: ' + name);\n      }\n      if (option.callback) {\n        var local = cm && option.callback(undefined, cm);\n        if (scope !== 'global' && local !== undefined) {\n          return local;\n        }\n        if (scope !== 'local') {\n          return option.callback();\n        }\n        return;\n      } else {\n        var local = (scope !== 'global') && (cm && cm.state.vim.options[name]);\n        return (local || (scope !== 'local') && option || {}).value;\n      }\n    }\n\n    defineOption('filetype', undefined, 'string', ['ft'], function(name, cm) {\n      // Option is local. Do nothing for global.\n      if (cm === undefined) {\n        return;\n      }\n      // The 'filetype' option proxies to the CodeMirror 'mode' option.\n      if (name === undefined) {\n        var mode = cm.getOption('mode');\n        return mode == 'null' ? '' : mode;\n      } else {\n        var mode = name == '' ? 'null' : name;\n        cm.setOption('mode', mode);\n      }\n    });\n\n    var createCircularJumpList = function() {\n      var size = 100;\n      var pointer = -1;\n      var head = 0;\n      var tail = 0;\n      var buffer = new Array(size);\n      function add(cm, oldCur, newCur) {\n        var current = pointer % size;\n        var curMark = buffer[current];\n        function useNextSlot(cursor) {\n          var next = ++pointer % size;\n          var trashMark = buffer[next];\n          if (trashMark) {\n            trashMark.clear();\n          }\n          buffer[next] = cm.setBookmark(cursor);\n        }\n        if (curMark) {\n          var markPos = curMark.find();\n          // avoid recording redundant cursor position\n          if (markPos && !cursorEqual(markPos, oldCur)) {\n            useNextSlot(oldCur);\n          }\n        } else {\n          useNextSlot(oldCur);\n        }\n        useNextSlot(newCur);\n        head = pointer;\n        tail = pointer - size + 1;\n        if (tail < 0) {\n          tail = 0;\n        }\n      }\n      function move(cm, offset) {\n        pointer += offset;\n        if (pointer > head) {\n          pointer = head;\n        } else if (pointer < tail) {\n          pointer = tail;\n        }\n        var mark = buffer[(size + pointer) % size];\n        // skip marks that are temporarily removed from text buffer\n        if (mark && !mark.find()) {\n          var inc = offset > 0 ? 1 : -1;\n          var newCur;\n          var oldCur = cm.getCursor();\n          do {\n            pointer += inc;\n            mark = buffer[(size + pointer) % size];\n            // skip marks that are the same as current position\n            if (mark &&\n                (newCur = mark.find()) &&\n                !cursorEqual(oldCur, newCur)) {\n              break;\n            }\n          } while (pointer < head && pointer > tail);\n        }\n        return mark;\n      }\n      function find(cm, offset) {\n        var oldPointer = pointer;\n        var mark = move(cm, offset);\n        pointer = oldPointer;\n        return mark && mark.find();\n      }\n      return {\n        cachedCursor: undefined, //used for # and * jumps\n        add: add,\n        find: find,\n        move: move\n      };\n    };\n\n    // Returns an object to track the changes associated insert mode.  It\n    // clones the object that is passed in, or creates an empty object one if\n    // none is provided.\n    var createInsertModeChanges = function(c) {\n      if (c) {\n        // Copy construction\n        return {\n          changes: c.changes,\n          expectCursorActivityForChange: c.expectCursorActivityForChange\n        };\n      }\n      return {\n        // Change list\n        changes: [],\n        // Set to true on change, false on cursorActivity.\n        expectCursorActivityForChange: false\n      };\n    };\n\n    function MacroModeState() {\n      this.latestRegister = undefined;\n      this.isPlaying = false;\n      this.isRecording = false;\n      this.replaySearchQueries = [];\n      this.onRecordingDone = undefined;\n      this.lastInsertModeChanges = createInsertModeChanges();\n    }\n    MacroModeState.prototype = {\n      exitMacroRecordMode: function() {\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.onRecordingDone) {\n          macroModeState.onRecordingDone(); // close dialog\n        }\n        macroModeState.onRecordingDone = undefined;\n        macroModeState.isRecording = false;\n      },\n      enterMacroRecordMode: function(cm, registerName) {\n        var register =\n            vimGlobalState.registerController.getRegister(registerName);\n        if (register) {\n          register.clear();\n          this.latestRegister = registerName;\n          if (cm.openDialog) {\n            var template = dom('span', {class: 'cm-vim-message'}, 'recording @' + registerName);\n            this.onRecordingDone = cm.openDialog(template, null, {bottom:true});\n          }\n          this.isRecording = true;\n        }\n      }\n    };\n\n    function maybeInitVimState(cm) {\n      if (!cm.state.vim) {\n        // Store instance state in the CodeMirror object.\n        cm.state.vim = {\n          inputState: new InputState(),\n          // Vim's input state that triggered the last edit, used to repeat\n          // motions and operators with '.'.\n          lastEditInputState: undefined,\n          // Vim's action command before the last edit, used to repeat actions\n          // with '.' and insert mode repeat.\n          lastEditActionCommand: undefined,\n          // When using jk for navigation, if you move from a longer line to a\n          // shorter line, the cursor may clip to the end of the shorter line.\n          // If j is pressed again and cursor goes to the next line, the\n          // cursor should go back to its horizontal position on the longer\n          // line if it can. This is to keep track of the horizontal position.\n          lastHPos: -1,\n          // Doing the same with screen-position for gj/gk\n          lastHSPos: -1,\n          // The last motion command run. Cleared if a non-motion command gets\n          // executed in between.\n          lastMotion: null,\n          marks: {},\n          insertMode: false,\n          // Repeat count for changes made in insert mode, triggered by key\n          // sequences like 3,i. Only exists when insertMode is true.\n          insertModeRepeat: undefined,\n          visualMode: false,\n          // If we are in visual line mode. No effect if visualMode is false.\n          visualLine: false,\n          visualBlock: false,\n          lastSelection: null,\n          lastPastedText: null,\n          sel: {},\n          // Buffer-local/window-local values of vim options.\n          options: {}\n        };\n      }\n      return cm.state.vim;\n    }\n    var vimGlobalState;\n    function resetVimGlobalState() {\n      vimGlobalState = {\n        // The current search query.\n        searchQuery: null,\n        // Whether we are searching backwards.\n        searchIsReversed: false,\n        // Replace part of the last substituted pattern\n        lastSubstituteReplacePart: undefined,\n        jumpList: createCircularJumpList(),\n        macroModeState: new MacroModeState,\n        // Recording latest f, t, F or T motion command.\n        lastCharacterSearch: {increment:0, forward:true, selectedCharacter:''},\n        registerController: new RegisterController({}),\n        // search history buffer\n        searchHistoryController: new HistoryController(),\n        // ex Command history buffer\n        exCommandHistoryController : new HistoryController()\n      };\n      for (var optionName in options) {\n        var option = options[optionName];\n        option.value = option.defaultValue;\n      }\n    }\n\n    var lastInsertModeKeyTimer;\n    var vimApi = {\n      enterVimMode: enterVimMode,\n      leaveVimMode: leaveVimMode,\n      buildKeyMap: function() {\n        // TODO: Convert keymap into dictionary format for fast lookup.\n      },\n      // Testing hook, though it might be useful to expose the register\n      // controller anyway.\n      getRegisterController: function() {\n        return vimGlobalState.registerController;\n      },\n      // Testing hook.\n      resetVimGlobalState_: resetVimGlobalState,\n\n      // Testing hook.\n      getVimGlobalState_: function() {\n        return vimGlobalState;\n      },\n\n      // Testing hook.\n      maybeInitVimState_: maybeInitVimState,\n\n      suppressErrorLogging: false,\n\n      InsertModeKey: InsertModeKey,\n      map: function(lhs, rhs, ctx) {\n        // Add user defined key bindings.\n        exCommandDispatcher.map(lhs, rhs, ctx);\n      },\n      unmap: function(lhs, ctx) {\n        return exCommandDispatcher.unmap(lhs, ctx);\n      },\n      // Non-recursive map function.\n      // NOTE: This will not create mappings to key maps that aren't present\n      // in the default key map. See TODO at bottom of function.\n      noremap: function(lhs, rhs, ctx) {\n        function toCtxArray(ctx) {\n          return ctx ? [ctx] : ['normal', 'insert', 'visual'];\n        }\n        var ctxsToMap = toCtxArray(ctx);\n        // Look through all actual defaults to find a map candidate.\n        var actualLength = defaultKeymap.length, origLength = defaultKeymapLength;\n        for (var i = actualLength - origLength;\n             i < actualLength && ctxsToMap.length;\n             i++) {\n          var mapping = defaultKeymap[i];\n          // Omit mappings that operate in the wrong context(s) and those of invalid type.\n          if (mapping.keys == rhs &&\n              (!ctx || !mapping.context || mapping.context === ctx) &&\n              mapping.type.substr(0, 2) !== 'ex' &&\n              mapping.type.substr(0, 3) !== 'key') {\n            // Make a shallow copy of the original keymap entry.\n            var newMapping = {};\n            for (var key in mapping) {\n              newMapping[key] = mapping[key];\n            }\n            // Modify it point to the new mapping with the proper context.\n            newMapping.keys = lhs;\n            if (ctx && !newMapping.context) {\n              newMapping.context = ctx;\n            }\n            // Add it to the keymap with a higher priority than the original.\n            this._mapCommand(newMapping);\n            // Record the mapped contexts as complete.\n            var mappedCtxs = toCtxArray(mapping.context);\n            ctxsToMap = ctxsToMap.filter(function(el) { return mappedCtxs.indexOf(el) === -1; });\n          }\n        }\n        // TODO: Create non-recursive keyToKey mappings for the unmapped contexts once those exist.\n      },\n      // Remove all user-defined mappings for the provided context.\n      mapclear: function(ctx) {\n        // Partition the existing keymap into user-defined and true defaults.\n        var actualLength = defaultKeymap.length,\n            origLength = defaultKeymapLength;\n        var userKeymap = defaultKeymap.slice(0, actualLength - origLength);\n        defaultKeymap = defaultKeymap.slice(actualLength - origLength);\n        if (ctx) {\n          // If a specific context is being cleared, we need to keep mappings\n          // from all other contexts.\n          for (var i = userKeymap.length - 1; i >= 0; i--) {\n            var mapping = userKeymap[i];\n            if (ctx !== mapping.context) {\n              if (mapping.context) {\n                this._mapCommand(mapping);\n              } else {\n                // `mapping` applies to all contexts so create keymap copies\n                // for each context except the one being cleared.\n                var contexts = ['normal', 'insert', 'visual'];\n                for (var j in contexts) {\n                  if (contexts[j] !== ctx) {\n                    var newMapping = {};\n                    for (var key in mapping) {\n                      newMapping[key] = mapping[key];\n                    }\n                    newMapping.context = contexts[j];\n                    this._mapCommand(newMapping);\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      // TODO: Expose setOption and getOption as instance methods. Need to decide how to namespace\n      // them, or somehow make them work with the existing CodeMirror setOption/getOption API.\n      setOption: setOption,\n      getOption: getOption,\n      defineOption: defineOption,\n      defineEx: function(name, prefix, func){\n        if (!prefix) {\n          prefix = name;\n        } else if (name.indexOf(prefix) !== 0) {\n          throw new Error('(Vim.defineEx) \"'+prefix+'\" is not a prefix of \"'+name+'\", command not registered');\n        }\n        exCommands[name]=func;\n        exCommandDispatcher.commandMap_[prefix]={name:name, shortName:prefix, type:'api'};\n      },\n      handleKey: function (cm, key, origin) {\n        var command = this.findKey(cm, key, origin);\n        if (typeof command === 'function') {\n          return command();\n        }\n      },\n      multiSelectHandleKey: multiSelectHandleKey,\n\n      /**\n       * This is the outermost function called by CodeMirror, after keys have\n       * been mapped to their Vim equivalents.\n       *\n       * Finds a command based on the key (and cached keys if there is a\n       * multi-key sequence). Returns `undefined` if no key is matched, a noop\n       * function if a partial match is found (multi-key), and a function to\n       * execute the bound command if a a key is matched. The function always\n       * returns true.\n       */\n      findKey: function(cm, key, origin) {\n        var vim = maybeInitVimState(cm);\n        function handleMacroRecording() {\n          var macroModeState = vimGlobalState.macroModeState;\n          if (macroModeState.isRecording) {\n            if (key == 'q') {\n              macroModeState.exitMacroRecordMode();\n              clearInputState(cm);\n              return true;\n            }\n            if (origin != 'mapping') {\n              logKey(macroModeState, key);\n            }\n          }\n        }\n        function handleEsc() {\n          if (key == '<Esc>') {\n            if (vim.visualMode) {\n              // Get back to normal mode.\n              exitVisualMode(cm);\n            } else if (vim.insertMode) {\n              // Get back to normal mode.\n              exitInsertMode(cm);\n            } else {\n              // We're already in normal mode. Let '<Esc>' be handled normally.\n              return;\n            }\n            clearInputState(cm);\n            return true;\n          }\n        }\n        function doKeyToKey(keys) {\n          // TODO: prevent infinite recursion.\n          var match;\n          while (keys) {\n            // Pull off one command key, which is either a single character\n            // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.\n            match = (/<\\w+-.+?>|<\\w+>|./).exec(keys);\n            key = match[0];\n            keys = keys.substring(match.index + key.length);\n            vimApi.handleKey(cm, key, 'mapping');\n          }\n        }\n\n        function handleKeyInsertMode() {\n          if (handleEsc()) { return true; }\n          var keys = vim.inputState.keyBuffer = vim.inputState.keyBuffer + key;\n          var keysAreChars = key.length == 1;\n          var match = commandDispatcher.matchCommand(keys, defaultKeymap, vim.inputState, 'insert');\n          // Need to check all key substrings in insert mode.\n          while (keys.length > 1 && match.type != 'full') {\n            var keys = vim.inputState.keyBuffer = keys.slice(1);\n            var thisMatch = commandDispatcher.matchCommand(keys, defaultKeymap, vim.inputState, 'insert');\n            if (thisMatch.type != 'none') { match = thisMatch; }\n          }\n          if (match.type == 'none') { clearInputState(cm); return false; }\n          else if (match.type == 'partial') {\n            if (lastInsertModeKeyTimer) { window.clearTimeout(lastInsertModeKeyTimer); }\n            lastInsertModeKeyTimer = window.setTimeout(\n              function() { if (vim.insertMode && vim.inputState.keyBuffer) { clearInputState(cm); } },\n              getOption('insertModeEscKeysTimeout'));\n            return !keysAreChars;\n          }\n\n          if (lastInsertModeKeyTimer) { window.clearTimeout(lastInsertModeKeyTimer); }\n          if (keysAreChars) {\n            var selections = cm.listSelections();\n            for (var i = 0; i < selections.length; i++) {\n              var here = selections[i].head;\n              cm.replaceRange('', offsetCursor(here, 0, -(keys.length - 1)), here, '+input');\n            }\n            vimGlobalState.macroModeState.lastInsertModeChanges.changes.pop();\n          }\n          clearInputState(cm);\n          return match.command;\n        }\n\n        function handleKeyNonInsertMode() {\n          if (handleMacroRecording() || handleEsc()) { return true; }\n\n          var keys = vim.inputState.keyBuffer = vim.inputState.keyBuffer + key;\n          if (/^[1-9]\\d*$/.test(keys)) { return true; }\n\n          var keysMatcher = /^(\\d*)(.*)$/.exec(keys);\n          if (!keysMatcher) { clearInputState(cm); return false; }\n          var context = vim.visualMode ? 'visual' :\n                                         'normal';\n          var mainKey = keysMatcher[2] || keysMatcher[1];\n          if (vim.inputState.operatorShortcut && vim.inputState.operatorShortcut.slice(-1) == mainKey) {\n            // multikey operators act linewise by repeating only the last character\n            mainKey = vim.inputState.operatorShortcut;\n          }\n          var match = commandDispatcher.matchCommand(mainKey, defaultKeymap, vim.inputState, context);\n          if (match.type == 'none') { clearInputState(cm); return false; }\n          else if (match.type == 'partial') { return true; }\n          else if (match.type == 'clear') { clearInputState(cm); return true; }\n\n          vim.inputState.keyBuffer = '';\n          keysMatcher = /^(\\d*)(.*)$/.exec(keys);\n          if (keysMatcher[1] && keysMatcher[1] != '0') {\n            vim.inputState.pushRepeatDigit(keysMatcher[1]);\n          }\n          return match.command;\n        }\n\n        var command;\n        if (vim.insertMode) { command = handleKeyInsertMode(); }\n        else { command = handleKeyNonInsertMode(); }\n        if (command === false) {\n          return !vim.insertMode && key.length === 1 ? function() { return true; } : undefined;\n        } else if (command === true) {\n          // TODO: Look into using CodeMirror's multi-key handling.\n          // Return no-op since we are caching the key. Counts as handled, but\n          // don't want act on it just yet.\n          return function() { return true; };\n        } else {\n          return function() {\n            return cm.operation(function() {\n              cm.curOp.isVimOp = true;\n              try {\n                if (command.type == 'keyToKey') {\n                  doKeyToKey(command.toKeys);\n                } else {\n                  commandDispatcher.processCommand(cm, vim, command);\n                }\n              } catch (e) {\n                // clear VIM state in case it's in a bad state.\n                cm.state.vim = undefined;\n                maybeInitVimState(cm);\n                if (!vimApi.suppressErrorLogging) {\n                  console['log'](e);\n                }\n                throw e;\n              }\n              return true;\n            });\n          };\n        }\n      },\n      handleEx: function(cm, input) {\n        exCommandDispatcher.processCommand(cm, input);\n      },\n\n      defineMotion: defineMotion,\n      defineAction: defineAction,\n      defineOperator: defineOperator,\n      mapCommand: mapCommand,\n      _mapCommand: _mapCommand,\n\n      defineRegister: defineRegister,\n\n      exitVisualMode: exitVisualMode,\n      exitInsertMode: exitInsertMode\n    };\n\n    // Represents the current input state.\n    function InputState() {\n      this.prefixRepeat = [];\n      this.motionRepeat = [];\n\n      this.operator = null;\n      this.operatorArgs = null;\n      this.motion = null;\n      this.motionArgs = null;\n      this.keyBuffer = []; // For matching multi-key commands.\n      this.registerName = null; // Defaults to the unnamed register.\n    }\n    InputState.prototype.pushRepeatDigit = function(n) {\n      if (!this.operator) {\n        this.prefixRepeat = this.prefixRepeat.concat(n);\n      } else {\n        this.motionRepeat = this.motionRepeat.concat(n);\n      }\n    };\n    InputState.prototype.getRepeat = function() {\n      var repeat = 0;\n      if (this.prefixRepeat.length > 0 || this.motionRepeat.length > 0) {\n        repeat = 1;\n        if (this.prefixRepeat.length > 0) {\n          repeat *= parseInt(this.prefixRepeat.join(''), 10);\n        }\n        if (this.motionRepeat.length > 0) {\n          repeat *= parseInt(this.motionRepeat.join(''), 10);\n        }\n      }\n      return repeat;\n    };\n\n    function clearInputState(cm, reason) {\n      cm.state.vim.inputState = new InputState();\n      CodeMirror.signal(cm, 'vim-command-done', reason);\n    }\n\n    /*\n     * Register stores information about copy and paste registers.  Besides\n     * text, a register must store whether it is linewise (i.e., when it is\n     * pasted, should it insert itself into a new line, or should the text be\n     * inserted at the cursor position.)\n     */\n    function Register(text, linewise, blockwise) {\n      this.clear();\n      this.keyBuffer = [text || ''];\n      this.insertModeChanges = [];\n      this.searchQueries = [];\n      this.linewise = !!linewise;\n      this.blockwise = !!blockwise;\n    }\n    Register.prototype = {\n      setText: function(text, linewise, blockwise) {\n        this.keyBuffer = [text || ''];\n        this.linewise = !!linewise;\n        this.blockwise = !!blockwise;\n      },\n      pushText: function(text, linewise) {\n        // if this register has ever been set to linewise, use linewise.\n        if (linewise) {\n          if (!this.linewise) {\n            this.keyBuffer.push('\\n');\n          }\n          this.linewise = true;\n        }\n        this.keyBuffer.push(text);\n      },\n      pushInsertModeChanges: function(changes) {\n        this.insertModeChanges.push(createInsertModeChanges(changes));\n      },\n      pushSearchQuery: function(query) {\n        this.searchQueries.push(query);\n      },\n      clear: function() {\n        this.keyBuffer = [];\n        this.insertModeChanges = [];\n        this.searchQueries = [];\n        this.linewise = false;\n      },\n      toString: function() {\n        return this.keyBuffer.join('');\n      }\n    };\n\n    /**\n     * Defines an external register.\n     *\n     * The name should be a single character that will be used to reference the register.\n     * The register should support setText, pushText, clear, and toString(). See Register\n     * for a reference implementation.\n     */\n    function defineRegister(name, register) {\n      var registers = vimGlobalState.registerController.registers;\n      if (!name || name.length != 1) {\n        throw Error('Register name must be 1 character');\n      }\n      if (registers[name]) {\n        throw Error('Register already defined ' + name);\n      }\n      registers[name] = register;\n      validRegisters.push(name);\n    }\n\n    /*\n     * vim registers allow you to keep many independent copy and paste buffers.\n     * See http://usevim.com/2012/04/13/registers/ for an introduction.\n     *\n     * RegisterController keeps the state of all the registers.  An initial\n     * state may be passed in.  The unnamed register '\"' will always be\n     * overridden.\n     */\n    function RegisterController(registers) {\n      this.registers = registers;\n      this.unnamedRegister = registers['\"'] = new Register();\n      registers['.'] = new Register();\n      registers[':'] = new Register();\n      registers['/'] = new Register();\n      registers['+'] = new Register();\n    }\n    RegisterController.prototype = {\n      pushText: function(registerName, operator, text, linewise, blockwise) {\n        // The black hole register, \"_, means delete/yank to nowhere.\n        if (registerName === '_') return;\n        if (linewise && text.charAt(text.length - 1) !== '\\n'){\n          text += '\\n';\n        }\n        // Lowercase and uppercase registers refer to the same register.\n        // Uppercase just means append.\n        var register = this.isValidRegister(registerName) ?\n            this.getRegister(registerName) : null;\n        // if no register/an invalid register was specified, things go to the\n        // default registers\n        if (!register) {\n          switch (operator) {\n            case 'yank':\n              // The 0 register contains the text from the most recent yank.\n              this.registers['0'] = new Register(text, linewise, blockwise);\n              break;\n            case 'delete':\n            case 'change':\n              if (text.indexOf('\\n') == -1) {\n                // Delete less than 1 line. Update the small delete register.\n                this.registers['-'] = new Register(text, linewise);\n              } else {\n                // Shift down the contents of the numbered registers and put the\n                // deleted text into register 1.\n                this.shiftNumericRegisters_();\n                this.registers['1'] = new Register(text, linewise);\n              }\n              break;\n          }\n          // Make sure the unnamed register is set to what just happened\n          this.unnamedRegister.setText(text, linewise, blockwise);\n          return;\n        }\n\n        // If we've gotten to this point, we've actually specified a register\n        var append = isUpperCase(registerName);\n        if (append) {\n          register.pushText(text, linewise);\n        } else {\n          register.setText(text, linewise, blockwise);\n        }\n        if (registerName === '+') {\n          navigator.clipboard.writeText(text);\n        }\n        // The unnamed register always has the same value as the last used\n        // register.\n        this.unnamedRegister.setText(register.toString(), linewise);\n      },\n      // Gets the register named @name.  If one of @name doesn't already exist,\n      // create it.  If @name is invalid, return the unnamedRegister.\n      getRegister: function(name) {\n        if (!this.isValidRegister(name)) {\n          return this.unnamedRegister;\n        }\n        name = name.toLowerCase();\n        if (!this.registers[name]) {\n          this.registers[name] = new Register();\n        }\n        return this.registers[name];\n      },\n      isValidRegister: function(name) {\n        return name && inArray(name, validRegisters);\n      },\n      shiftNumericRegisters_: function() {\n        for (var i = 9; i >= 2; i--) {\n          this.registers[i] = this.getRegister('' + (i - 1));\n        }\n      }\n    };\n    function HistoryController() {\n        this.historyBuffer = [];\n        this.iterator = 0;\n        this.initialPrefix = null;\n    }\n    HistoryController.prototype = {\n      // the input argument here acts a user entered prefix for a small time\n      // until we start autocompletion in which case it is the autocompleted.\n      nextMatch: function (input, up) {\n        var historyBuffer = this.historyBuffer;\n        var dir = up ? -1 : 1;\n        if (this.initialPrefix === null) this.initialPrefix = input;\n        for (var i = this.iterator + dir; up ? i >= 0 : i < historyBuffer.length; i+= dir) {\n          var element = historyBuffer[i];\n          for (var j = 0; j <= element.length; j++) {\n            if (this.initialPrefix == element.substring(0, j)) {\n              this.iterator = i;\n              return element;\n            }\n          }\n        }\n        // should return the user input in case we reach the end of buffer.\n        if (i >= historyBuffer.length) {\n          this.iterator = historyBuffer.length;\n          return this.initialPrefix;\n        }\n        // return the last autocompleted query or exCommand as it is.\n        if (i < 0 ) return input;\n      },\n      pushInput: function(input) {\n        var index = this.historyBuffer.indexOf(input);\n        if (index > -1) this.historyBuffer.splice(index, 1);\n        if (input.length) this.historyBuffer.push(input);\n      },\n      reset: function() {\n        this.initialPrefix = null;\n        this.iterator = this.historyBuffer.length;\n      }\n    };\n    var commandDispatcher = {\n      matchCommand: function(keys, keyMap, inputState, context) {\n        var matches = commandMatches(keys, keyMap, context, inputState);\n        if (!matches.full && !matches.partial) {\n          return {type: 'none'};\n        } else if (!matches.full && matches.partial) {\n          return {type: 'partial'};\n        }\n\n        var bestMatch;\n        for (var i = 0; i < matches.full.length; i++) {\n          var match = matches.full[i];\n          if (!bestMatch) {\n            bestMatch = match;\n          }\n        }\n        if (bestMatch.keys.slice(-11) == '<character>') {\n          var character = lastChar(keys);\n          if (!character || character.length > 1) return {type: 'clear'};\n          inputState.selectedCharacter = character;\n        }\n        return {type: 'full', command: bestMatch};\n      },\n      processCommand: function(cm, vim, command) {\n        vim.inputState.repeatOverride = command.repeatOverride;\n        switch (command.type) {\n          case 'motion':\n            this.processMotion(cm, vim, command);\n            break;\n          case 'operator':\n            this.processOperator(cm, vim, command);\n            break;\n          case 'operatorMotion':\n            this.processOperatorMotion(cm, vim, command);\n            break;\n          case 'action':\n            this.processAction(cm, vim, command);\n            break;\n          case 'search':\n            this.processSearch(cm, vim, command);\n            break;\n          case 'ex':\n          case 'keyToEx':\n            this.processEx(cm, vim, command);\n            break;\n        }\n      },\n      processMotion: function(cm, vim, command) {\n        vim.inputState.motion = command.motion;\n        vim.inputState.motionArgs = copyArgs(command.motionArgs);\n        this.evalInput(cm, vim);\n      },\n      processOperator: function(cm, vim, command) {\n        var inputState = vim.inputState;\n        if (inputState.operator) {\n          if (inputState.operator == command.operator) {\n            // Typing an operator twice like 'dd' makes the operator operate\n            // linewise\n            inputState.motion = 'expandToLine';\n            inputState.motionArgs = { linewise: true };\n            this.evalInput(cm, vim);\n            return;\n          } else {\n            // 2 different operators in a row doesn't make sense.\n            clearInputState(cm);\n          }\n        }\n        inputState.operator = command.operator;\n        inputState.operatorArgs = copyArgs(command.operatorArgs);\n        if (command.keys.length > 1) {\n          inputState.operatorShortcut = command.keys;\n        }\n        if (command.exitVisualBlock) {\n            vim.visualBlock = false;\n            updateCmSelection(cm);\n        }\n        if (vim.visualMode) {\n          // Operating on a selection in visual mode. We don't need a motion.\n          this.evalInput(cm, vim);\n        }\n      },\n      processOperatorMotion: function(cm, vim, command) {\n        var visualMode = vim.visualMode;\n        var operatorMotionArgs = copyArgs(command.operatorMotionArgs);\n        if (operatorMotionArgs) {\n          // Operator motions may have special behavior in visual mode.\n          if (visualMode && operatorMotionArgs.visualLine) {\n            vim.visualLine = true;\n          }\n        }\n        this.processOperator(cm, vim, command);\n        if (!visualMode) {\n          this.processMotion(cm, vim, command);\n        }\n      },\n      processAction: function(cm, vim, command) {\n        var inputState = vim.inputState;\n        var repeat = inputState.getRepeat();\n        var repeatIsExplicit = !!repeat;\n        var actionArgs = copyArgs(command.actionArgs) || {};\n        if (inputState.selectedCharacter) {\n          actionArgs.selectedCharacter = inputState.selectedCharacter;\n        }\n        // Actions may or may not have motions and operators. Do these first.\n        if (command.operator) {\n          this.processOperator(cm, vim, command);\n        }\n        if (command.motion) {\n          this.processMotion(cm, vim, command);\n        }\n        if (command.motion || command.operator) {\n          this.evalInput(cm, vim);\n        }\n        actionArgs.repeat = repeat || 1;\n        actionArgs.repeatIsExplicit = repeatIsExplicit;\n        actionArgs.registerName = inputState.registerName;\n        clearInputState(cm);\n        vim.lastMotion = null;\n        if (command.isEdit) {\n          this.recordLastEdit(vim, inputState, command);\n        }\n        actions[command.action](cm, actionArgs, vim);\n      },\n      processSearch: function(cm, vim, command) {\n        if (!cm.getSearchCursor) {\n          // Search depends on SearchCursor.\n          return;\n        }\n        var forward = command.searchArgs.forward;\n        var wholeWordOnly = command.searchArgs.wholeWordOnly;\n        getSearchState(cm).setReversed(!forward);\n        var promptPrefix = (forward) ? '/' : '?';\n        var originalQuery = getSearchState(cm).getQuery();\n        var originalScrollPos = cm.getScrollInfo();\n        function handleQuery(query, ignoreCase, smartCase) {\n          vimGlobalState.searchHistoryController.pushInput(query);\n          vimGlobalState.searchHistoryController.reset();\n          try {\n            updateSearchQuery(cm, query, ignoreCase, smartCase);\n          } catch (e) {\n            showConfirm(cm, 'Invalid regex: ' + query);\n            clearInputState(cm);\n            return;\n          }\n          commandDispatcher.processMotion(cm, vim, {\n            type: 'motion',\n            motion: 'findNext',\n            motionArgs: { forward: true, toJumplist: command.searchArgs.toJumplist }\n          });\n        }\n        function onPromptClose(query) {\n          cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n          handleQuery(query, true /** ignoreCase */, true /** smartCase */);\n          var macroModeState = vimGlobalState.macroModeState;\n          if (macroModeState.isRecording) {\n            logSearchQuery(macroModeState, query);\n          }\n        }\n        function onPromptKeyUp(e, query, close) {\n          var keyName = CodeMirror.keyName(e), up, offset;\n          if (keyName == 'Up' || keyName == 'Down') {\n            up = keyName == 'Up' ? true : false;\n            offset = e.target ? e.target.selectionEnd : 0;\n            query = vimGlobalState.searchHistoryController.nextMatch(query, up) || '';\n            close(query);\n            if (offset && e.target) e.target.selectionEnd = e.target.selectionStart = Math.min(offset, e.target.value.length);\n          } else {\n            if ( keyName != 'Left' && keyName != 'Right' && keyName != 'Ctrl' && keyName != 'Alt' && keyName != 'Shift')\n              vimGlobalState.searchHistoryController.reset();\n          }\n          var parsedQuery;\n          try {\n            parsedQuery = updateSearchQuery(cm, query,\n                true /** ignoreCase */, true /** smartCase */);\n          } catch (e) {\n            // Swallow bad regexes for incremental search.\n          }\n          if (parsedQuery) {\n            cm.scrollIntoView(findNext(cm, !forward, parsedQuery), 30);\n          } else {\n            clearSearchHighlight(cm);\n            cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n          }\n        }\n        function onPromptKeyDown(e, query, close) {\n          var keyName = CodeMirror.keyName(e);\n          if (keyName == 'Esc' || keyName == 'Ctrl-C' || keyName == 'Ctrl-[' ||\n              (keyName == 'Backspace' && query == '')) {\n            vimGlobalState.searchHistoryController.pushInput(query);\n            vimGlobalState.searchHistoryController.reset();\n            updateSearchQuery(cm, originalQuery);\n            clearSearchHighlight(cm);\n            cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n            CodeMirror.e_stop(e);\n            clearInputState(cm);\n            close();\n            cm.focus();\n          } else if (keyName == 'Up' || keyName == 'Down') {\n            CodeMirror.e_stop(e);\n          } else if (keyName == 'Ctrl-U') {\n            // Ctrl-U clears input.\n            CodeMirror.e_stop(e);\n            close('');\n          }\n        }\n        switch (command.searchArgs.querySrc) {\n          case 'prompt':\n            var macroModeState = vimGlobalState.macroModeState;\n            if (macroModeState.isPlaying) {\n              var query = macroModeState.replaySearchQueries.shift();\n              handleQuery(query, true /** ignoreCase */, false /** smartCase */);\n            } else {\n              showPrompt(cm, {\n                  onClose: onPromptClose,\n                  prefix: promptPrefix,\n                  desc: '(JavaScript regexp)',\n                  onKeyUp: onPromptKeyUp,\n                  onKeyDown: onPromptKeyDown\n              });\n            }\n            break;\n          case 'wordUnderCursor':\n            var word = expandWordUnderCursor(cm, false /** inclusive */,\n                true /** forward */, false /** bigWord */,\n                true /** noSymbol */);\n            var isKeyword = true;\n            if (!word) {\n              word = expandWordUnderCursor(cm, false /** inclusive */,\n                  true /** forward */, false /** bigWord */,\n                  false /** noSymbol */);\n              isKeyword = false;\n            }\n            if (!word) {\n              return;\n            }\n            var query = cm.getLine(word.start.line).substring(word.start.ch,\n                word.end.ch);\n            if (isKeyword && wholeWordOnly) {\n                query = '\\\\b' + query + '\\\\b';\n            } else {\n              query = escapeRegex(query);\n            }\n\n            // cachedCursor is used to save the old position of the cursor\n            // when * or # causes vim to seek for the nearest word and shift\n            // the cursor before entering the motion.\n            vimGlobalState.jumpList.cachedCursor = cm.getCursor();\n            cm.setCursor(word.start);\n\n            handleQuery(query, true /** ignoreCase */, false /** smartCase */);\n            break;\n        }\n      },\n      processEx: function(cm, vim, command) {\n        function onPromptClose(input) {\n          // Give the prompt some time to close so that if processCommand shows\n          // an error, the elements don't overlap.\n          vimGlobalState.exCommandHistoryController.pushInput(input);\n          vimGlobalState.exCommandHistoryController.reset();\n          exCommandDispatcher.processCommand(cm, input);\n          if (cm.state.vim) clearInputState(cm);\n        }\n        function onPromptKeyDown(e, input, close) {\n          var keyName = CodeMirror.keyName(e), up, offset;\n          if (keyName == 'Esc' || keyName == 'Ctrl-C' || keyName == 'Ctrl-[' ||\n              (keyName == 'Backspace' && input == '')) {\n            vimGlobalState.exCommandHistoryController.pushInput(input);\n            vimGlobalState.exCommandHistoryController.reset();\n            CodeMirror.e_stop(e);\n            clearInputState(cm);\n            close();\n            cm.focus();\n          }\n          if (keyName == 'Up' || keyName == 'Down') {\n            CodeMirror.e_stop(e);\n            up = keyName == 'Up' ? true : false;\n            offset = e.target ? e.target.selectionEnd : 0;\n            input = vimGlobalState.exCommandHistoryController.nextMatch(input, up) || '';\n            close(input);\n            if (offset && e.target) e.target.selectionEnd = e.target.selectionStart = Math.min(offset, e.target.value.length);\n          } else if (keyName == 'Ctrl-U') {\n            // Ctrl-U clears input.\n            CodeMirror.e_stop(e);\n            close('');\n          } else {\n            if ( keyName != 'Left' && keyName != 'Right' && keyName != 'Ctrl' && keyName != 'Alt' && keyName != 'Shift')\n              vimGlobalState.exCommandHistoryController.reset();\n          }\n        }\n        if (command.type == 'keyToEx') {\n          // Handle user defined Ex to Ex mappings\n          exCommandDispatcher.processCommand(cm, command.exArgs.input);\n        } else {\n          if (vim.visualMode) {\n            showPrompt(cm, { onClose: onPromptClose, prefix: ':', value: '\\'<,\\'>',\n                onKeyDown: onPromptKeyDown, selectValueOnOpen: false});\n          } else {\n            showPrompt(cm, { onClose: onPromptClose, prefix: ':',\n                onKeyDown: onPromptKeyDown});\n          }\n        }\n      },\n      evalInput: function(cm, vim) {\n        // If the motion command is set, execute both the operator and motion.\n        // Otherwise return.\n        var inputState = vim.inputState;\n        var motion = inputState.motion;\n        var motionArgs = inputState.motionArgs || {};\n        var operator = inputState.operator;\n        var operatorArgs = inputState.operatorArgs || {};\n        var registerName = inputState.registerName;\n        var sel = vim.sel;\n        // TODO: Make sure cm and vim selections are identical outside visual mode.\n        var origHead = copyCursor(vim.visualMode ? clipCursorToContent(cm, sel.head): cm.getCursor('head'));\n        var origAnchor = copyCursor(vim.visualMode ? clipCursorToContent(cm, sel.anchor) : cm.getCursor('anchor'));\n        var oldHead = copyCursor(origHead);\n        var oldAnchor = copyCursor(origAnchor);\n        var newHead, newAnchor;\n        var repeat;\n        if (operator) {\n          this.recordLastEdit(vim, inputState);\n        }\n        if (inputState.repeatOverride !== undefined) {\n          // If repeatOverride is specified, that takes precedence over the\n          // input state's repeat. Used by Ex mode and can be user defined.\n          repeat = inputState.repeatOverride;\n        } else {\n          repeat = inputState.getRepeat();\n        }\n        if (repeat > 0 && motionArgs.explicitRepeat) {\n          motionArgs.repeatIsExplicit = true;\n        } else if (motionArgs.noRepeat ||\n            (!motionArgs.explicitRepeat && repeat === 0)) {\n          repeat = 1;\n          motionArgs.repeatIsExplicit = false;\n        }\n        if (inputState.selectedCharacter) {\n          // If there is a character input, stick it in all of the arg arrays.\n          motionArgs.selectedCharacter = operatorArgs.selectedCharacter =\n              inputState.selectedCharacter;\n        }\n        motionArgs.repeat = repeat;\n        clearInputState(cm);\n        if (motion) {\n          var motionResult = motions[motion](cm, origHead, motionArgs, vim, inputState);\n          vim.lastMotion = motions[motion];\n          if (!motionResult) {\n            return;\n          }\n          if (motionArgs.toJumplist) {\n            var jumpList = vimGlobalState.jumpList;\n            // if the current motion is # or *, use cachedCursor\n            var cachedCursor = jumpList.cachedCursor;\n            if (cachedCursor) {\n              recordJumpPosition(cm, cachedCursor, motionResult);\n              delete jumpList.cachedCursor;\n            } else {\n              recordJumpPosition(cm, origHead, motionResult);\n            }\n          }\n          if (motionResult instanceof Array) {\n            newAnchor = motionResult[0];\n            newHead = motionResult[1];\n          } else {\n            newHead = motionResult;\n          }\n          // TODO: Handle null returns from motion commands better.\n          if (!newHead) {\n            newHead = copyCursor(origHead);\n          }\n          if (vim.visualMode) {\n            if (!(vim.visualBlock && newHead.ch === Infinity)) {\n              newHead = clipCursorToContent(cm, newHead);\n            }\n            if (newAnchor) {\n              newAnchor = clipCursorToContent(cm, newAnchor);\n            }\n            newAnchor = newAnchor || oldAnchor;\n            sel.anchor = newAnchor;\n            sel.head = newHead;\n            updateCmSelection(cm);\n            updateMark(cm, vim, '<',\n                cursorIsBefore(newAnchor, newHead) ? newAnchor\n                    : newHead);\n            updateMark(cm, vim, '>',\n                cursorIsBefore(newAnchor, newHead) ? newHead\n                    : newAnchor);\n          } else if (!operator) {\n            newHead = clipCursorToContent(cm, newHead);\n            cm.setCursor(newHead.line, newHead.ch);\n          }\n        }\n        if (operator) {\n          if (operatorArgs.lastSel) {\n            // Replaying a visual mode operation\n            newAnchor = oldAnchor;\n            var lastSel = operatorArgs.lastSel;\n            var lineOffset = Math.abs(lastSel.head.line - lastSel.anchor.line);\n            var chOffset = Math.abs(lastSel.head.ch - lastSel.anchor.ch);\n            if (lastSel.visualLine) {\n              // Linewise Visual mode: The same number of lines.\n              newHead = new Pos(oldAnchor.line + lineOffset, oldAnchor.ch);\n            } else if (lastSel.visualBlock) {\n              // Blockwise Visual mode: The same number of lines and columns.\n              newHead = new Pos(oldAnchor.line + lineOffset, oldAnchor.ch + chOffset);\n            } else if (lastSel.head.line == lastSel.anchor.line) {\n              // Normal Visual mode within one line: The same number of characters.\n              newHead = new Pos(oldAnchor.line, oldAnchor.ch + chOffset);\n            } else {\n              // Normal Visual mode with several lines: The same number of lines, in the\n              // last line the same number of characters as in the last line the last time.\n              newHead = new Pos(oldAnchor.line + lineOffset, oldAnchor.ch);\n            }\n            vim.visualMode = true;\n            vim.visualLine = lastSel.visualLine;\n            vim.visualBlock = lastSel.visualBlock;\n            sel = vim.sel = {\n              anchor: newAnchor,\n              head: newHead\n            };\n            updateCmSelection(cm);\n          } else if (vim.visualMode) {\n            operatorArgs.lastSel = {\n              anchor: copyCursor(sel.anchor),\n              head: copyCursor(sel.head),\n              visualBlock: vim.visualBlock,\n              visualLine: vim.visualLine\n            };\n          }\n          var curStart, curEnd, linewise, mode;\n          var cmSel;\n          if (vim.visualMode) {\n            // Init visual op\n            curStart = cursorMin(sel.head, sel.anchor);\n            curEnd = cursorMax(sel.head, sel.anchor);\n            linewise = vim.visualLine || operatorArgs.linewise;\n            mode = vim.visualBlock ? 'block' :\n                   linewise ? 'line' :\n                   'char';\n            cmSel = makeCmSelection(cm, {\n              anchor: curStart,\n              head: curEnd\n            }, mode);\n            if (linewise) {\n              var ranges = cmSel.ranges;\n              if (mode == 'block') {\n                // Linewise operators in visual block mode extend to end of line\n                for (var i = 0; i < ranges.length; i++) {\n                  ranges[i].head.ch = lineLength(cm, ranges[i].head.line);\n                }\n              } else if (mode == 'line') {\n                ranges[0].head = new Pos(ranges[0].head.line + 1, 0);\n              }\n            }\n          } else {\n            // Init motion op\n            curStart = copyCursor(newAnchor || oldAnchor);\n            curEnd = copyCursor(newHead || oldHead);\n            if (cursorIsBefore(curEnd, curStart)) {\n              var tmp = curStart;\n              curStart = curEnd;\n              curEnd = tmp;\n            }\n            linewise = motionArgs.linewise || operatorArgs.linewise;\n            if (linewise) {\n              // Expand selection to entire line.\n              expandSelectionToLine(cm, curStart, curEnd);\n            } else if (motionArgs.forward) {\n              // Clip to trailing newlines only if the motion goes forward.\n              clipToLine(cm, curStart, curEnd);\n            }\n            mode = 'char';\n            var exclusive = !motionArgs.inclusive || linewise;\n            cmSel = makeCmSelection(cm, {\n              anchor: curStart,\n              head: curEnd\n            }, mode, exclusive);\n          }\n          cm.setSelections(cmSel.ranges, cmSel.primary);\n          vim.lastMotion = null;\n          operatorArgs.repeat = repeat; // For indent in visual mode.\n          operatorArgs.registerName = registerName;\n          // Keep track of linewise as it affects how paste and change behave.\n          operatorArgs.linewise = linewise;\n          var operatorMoveTo = operators[operator](\n            cm, operatorArgs, cmSel.ranges, oldAnchor, newHead);\n          if (vim.visualMode) {\n            exitVisualMode(cm, operatorMoveTo != null);\n          }\n          if (operatorMoveTo) {\n            cm.setCursor(operatorMoveTo);\n          }\n        }\n      },\n      recordLastEdit: function(vim, inputState, actionCommand) {\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.isPlaying) { return; }\n        vim.lastEditInputState = inputState;\n        vim.lastEditActionCommand = actionCommand;\n        macroModeState.lastInsertModeChanges.changes = [];\n        macroModeState.lastInsertModeChanges.expectCursorActivityForChange = false;\n        macroModeState.lastInsertModeChanges.visualBlock = vim.visualBlock ? vim.sel.head.line - vim.sel.anchor.line : 0;\n      }\n    };\n\n    /**\n     * typedef {Object{line:number,ch:number}} Cursor An object containing the\n     *     position of the cursor.\n     */\n    // All of the functions below return Cursor objects.\n    var motions = {\n      moveToTopLine: function(cm, _head, motionArgs) {\n        var line = getUserVisibleLines(cm).top + motionArgs.repeat -1;\n        return new Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      moveToMiddleLine: function(cm) {\n        var range = getUserVisibleLines(cm);\n        var line = Math.floor((range.top + range.bottom) * 0.5);\n        return new Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      moveToBottomLine: function(cm, _head, motionArgs) {\n        var line = getUserVisibleLines(cm).bottom - motionArgs.repeat +1;\n        return new Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      expandToLine: function(_cm, head, motionArgs) {\n        // Expands forward to end of line, and then to next line if repeat is\n        // >1. Does not handle backward motion!\n        var cur = head;\n        return new Pos(cur.line + motionArgs.repeat - 1, Infinity);\n      },\n      findNext: function(cm, _head, motionArgs) {\n        var state = getSearchState(cm);\n        var query = state.getQuery();\n        if (!query) {\n          return;\n        }\n        var prev = !motionArgs.forward;\n        // If search is initiated with ? instead of /, negate direction.\n        prev = (state.isReversed()) ? !prev : prev;\n        highlightSearchMatches(cm, query);\n        return findNext(cm, prev/** prev */, query, motionArgs.repeat);\n      },\n      /**\n       * Find and select the next occurrence of the search query. If the cursor is currently\n       * within a match, then find and select the current match. Otherwise, find the next occurrence in the\n       * appropriate direction.\n       *\n       * This differs from `findNext` in the following ways:\n       *\n       * 1. Instead of only returning the \"from\", this returns a \"from\", \"to\" range.\n       * 2. If the cursor is currently inside a search match, this selects the current match\n       *    instead of the next match.\n       * 3. If there is no associated operator, this will turn on visual mode.\n       */\n      findAndSelectNextInclusive: function(cm, _head, motionArgs, vim, prevInputState) {\n        var state = getSearchState(cm);\n        var query = state.getQuery();\n\n        if (!query) {\n          return;\n        }\n\n        var prev = !motionArgs.forward;\n        prev = (state.isReversed()) ? !prev : prev;\n\n        // next: [from, to] | null\n        var next = findNextFromAndToInclusive(cm, prev, query, motionArgs.repeat, vim);\n\n        // No matches.\n        if (!next) {\n          return;\n        }\n\n        // If there's an operator that will be executed, return the selection.\n        if (prevInputState.operator) {\n          return next;\n        }\n\n        // At this point, we know that there is no accompanying operator -- let's\n        // deal with visual mode in order to select an appropriate match.\n\n        var from = next[0];\n        // For whatever reason, when we use the \"to\" as returned by searchcursor.js directly,\n        // the resulting selection is extended by 1 char. Let's shrink it so that only the\n        // match is selected.\n        var to = new Pos(next[1].line, next[1].ch - 1);\n\n        if (vim.visualMode) {\n          // If we were in visualLine or visualBlock mode, get out of it.\n          if (vim.visualLine || vim.visualBlock) {\n            vim.visualLine = false;\n            vim.visualBlock = false;\n            CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: \"\"});\n          }\n\n          // If we're currently in visual mode, we should extend the selection to include\n          // the search result.\n          var anchor = vim.sel.anchor;\n          if (anchor) {\n            if (state.isReversed()) {\n              if (motionArgs.forward) {\n                return [anchor, from];\n              }\n\n              return [anchor, to];\n            } else {\n              if (motionArgs.forward) {\n                return [anchor, to];\n              }\n\n              return [anchor, from];\n            }\n          }\n        } else {\n          // Let's turn visual mode on.\n          vim.visualMode = true;\n          vim.visualLine = false;\n          vim.visualBlock = false;\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: \"\"});\n        }\n\n        return prev ? [to, from] : [from, to];\n      },\n      goToMark: function(cm, _head, motionArgs, vim) {\n        var pos = getMarkPos(cm, vim, motionArgs.selectedCharacter);\n        if (pos) {\n          return motionArgs.linewise ? { line: pos.line, ch: findFirstNonWhiteSpaceCharacter(cm.getLine(pos.line)) } : pos;\n        }\n        return null;\n      },\n      moveToOtherHighlightedEnd: function(cm, _head, motionArgs, vim) {\n        if (vim.visualBlock && motionArgs.sameLine) {\n          var sel = vim.sel;\n          return [\n            clipCursorToContent(cm, new Pos(sel.anchor.line, sel.head.ch)),\n            clipCursorToContent(cm, new Pos(sel.head.line, sel.anchor.ch))\n          ];\n        } else {\n          return ([vim.sel.head, vim.sel.anchor]);\n        }\n      },\n      jumpToMark: function(cm, head, motionArgs, vim) {\n        var best = head;\n        for (var i = 0; i < motionArgs.repeat; i++) {\n          var cursor = best;\n          for (var key in vim.marks) {\n            if (!isLowerCase(key)) {\n              continue;\n            }\n            var mark = vim.marks[key].find();\n            var isWrongDirection = (motionArgs.forward) ?\n              cursorIsBefore(mark, cursor) : cursorIsBefore(cursor, mark);\n\n            if (isWrongDirection) {\n              continue;\n            }\n            if (motionArgs.linewise && (mark.line == cursor.line)) {\n              continue;\n            }\n\n            var equal = cursorEqual(cursor, best);\n            var between = (motionArgs.forward) ?\n              cursorIsBetween(cursor, mark, best) :\n              cursorIsBetween(best, mark, cursor);\n\n            if (equal || between) {\n              best = mark;\n            }\n          }\n        }\n\n        if (motionArgs.linewise) {\n          // Vim places the cursor on the first non-whitespace character of\n          // the line if there is one, else it places the cursor at the end\n          // of the line, regardless of whether a mark was found.\n          best = new Pos(best.line, findFirstNonWhiteSpaceCharacter(cm.getLine(best.line)));\n        }\n        return best;\n      },\n      moveByCharacters: function(_cm, head, motionArgs) {\n        var cur = head;\n        var repeat = motionArgs.repeat;\n        var ch = motionArgs.forward ? cur.ch + repeat : cur.ch - repeat;\n        return new Pos(cur.line, ch);\n      },\n      moveByLines: function(cm, head, motionArgs, vim) {\n        var cur = head;\n        var endCh = cur.ch;\n        // Depending what our last motion was, we may want to do different\n        // things. If our last motion was moving vertically, we want to\n        // preserve the HPos from our last horizontal move.  If our last motion\n        // was going to the end of a line, moving vertically we should go to\n        // the end of the line, etc.\n        switch (vim.lastMotion) {\n          case this.moveByLines:\n          case this.moveByDisplayLines:\n          case this.moveByScroll:\n          case this.moveToColumn:\n          case this.moveToEol:\n            endCh = vim.lastHPos;\n            break;\n          default:\n            vim.lastHPos = endCh;\n        }\n        var repeat = motionArgs.repeat+(motionArgs.repeatOffset||0);\n        var line = motionArgs.forward ? cur.line + repeat : cur.line - repeat;\n        var first = cm.firstLine();\n        var last = cm.lastLine();\n        var posV = cm.findPosV(cur, (motionArgs.forward ? repeat : -repeat), 'line', vim.lastHSPos);\n        var hasMarkedText = motionArgs.forward ? posV.line > line : posV.line < line;\n        if (hasMarkedText) {\n          line = posV.line;\n          endCh = posV.ch;\n        }\n        // Vim go to line begin or line end when cursor at first/last line and\n        // move to previous/next line is triggered.\n        if (line < first && cur.line == first){\n          return this.moveToStartOfLine(cm, head, motionArgs, vim);\n        } else if (line > last && cur.line == last){\n            return moveToEol(cm, head, motionArgs, vim, true);\n        }\n        if (motionArgs.toFirstChar){\n          endCh=findFirstNonWhiteSpaceCharacter(cm.getLine(line));\n          vim.lastHPos = endCh;\n        }\n        vim.lastHSPos = cm.charCoords(new Pos(line, endCh),'div').left;\n        return new Pos(line, endCh);\n      },\n      moveByDisplayLines: function(cm, head, motionArgs, vim) {\n        var cur = head;\n        switch (vim.lastMotion) {\n          case this.moveByDisplayLines:\n          case this.moveByScroll:\n          case this.moveByLines:\n          case this.moveToColumn:\n          case this.moveToEol:\n            break;\n          default:\n            vim.lastHSPos = cm.charCoords(cur,'div').left;\n        }\n        var repeat = motionArgs.repeat;\n        var res=cm.findPosV(cur,(motionArgs.forward ? repeat : -repeat),'line',vim.lastHSPos);\n        if (res.hitSide) {\n          if (motionArgs.forward) {\n            var lastCharCoords = cm.charCoords(res, 'div');\n            var goalCoords = { top: lastCharCoords.top + 8, left: vim.lastHSPos };\n            var res = cm.coordsChar(goalCoords, 'div');\n          } else {\n            var resCoords = cm.charCoords(new Pos(cm.firstLine(), 0), 'div');\n            resCoords.left = vim.lastHSPos;\n            res = cm.coordsChar(resCoords, 'div');\n          }\n        }\n        vim.lastHPos = res.ch;\n        return res;\n      },\n      moveByPage: function(cm, head, motionArgs) {\n        // CodeMirror only exposes functions that move the cursor page down, so\n        // doing this bad hack to move the cursor and move it back. evalInput\n        // will move the cursor to where it should be in the end.\n        var curStart = head;\n        var repeat = motionArgs.repeat;\n        return cm.findPosV(curStart, (motionArgs.forward ? repeat : -repeat), 'page');\n      },\n      moveByParagraph: function(cm, head, motionArgs) {\n        var dir = motionArgs.forward ? 1 : -1;\n        return findParagraph(cm, head, motionArgs.repeat, dir);\n      },\n      moveBySentence: function(cm, head, motionArgs) {\n        var dir = motionArgs.forward ? 1 : -1;\n        return findSentence(cm, head, motionArgs.repeat, dir);\n      },\n      moveByScroll: function(cm, head, motionArgs, vim) {\n        var scrollbox = cm.getScrollInfo();\n        var curEnd = null;\n        var repeat = motionArgs.repeat;\n        if (!repeat) {\n          repeat = scrollbox.clientHeight / (2 * cm.defaultTextHeight());\n        }\n        var orig = cm.charCoords(head, 'local');\n        motionArgs.repeat = repeat;\n        curEnd = motions.moveByDisplayLines(cm, head, motionArgs, vim);\n        if (!curEnd) {\n          return null;\n        }\n        var dest = cm.charCoords(curEnd, 'local');\n        cm.scrollTo(null, scrollbox.top + dest.top - orig.top);\n        return curEnd;\n      },\n      moveByWords: function(cm, head, motionArgs) {\n        return moveToWord(cm, head, motionArgs.repeat, !!motionArgs.forward,\n            !!motionArgs.wordEnd, !!motionArgs.bigWord);\n      },\n      moveTillCharacter: function(cm, _head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        var curEnd = moveToCharacter(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter);\n        var increment = motionArgs.forward ? -1 : 1;\n        recordLastCharacterSearch(increment, motionArgs);\n        if (!curEnd) return null;\n        curEnd.ch += increment;\n        return curEnd;\n      },\n      moveToCharacter: function(cm, head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        recordLastCharacterSearch(0, motionArgs);\n        return moveToCharacter(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter) || head;\n      },\n      moveToSymbol: function(cm, head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        return findSymbol(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter) || head;\n      },\n      moveToColumn: function(cm, head, motionArgs, vim) {\n        var repeat = motionArgs.repeat;\n        // repeat is equivalent to which column we want to move to!\n        vim.lastHPos = repeat - 1;\n        vim.lastHSPos = cm.charCoords(head,'div').left;\n        return moveToColumn(cm, repeat);\n      },\n      moveToEol: function(cm, head, motionArgs, vim) {\n        return moveToEol(cm, head, motionArgs, vim, false);\n      },\n      moveToFirstNonWhiteSpaceCharacter: function(cm, head) {\n        // Go to the start of the line where the text begins, or the end for\n        // whitespace-only lines\n        var cursor = head;\n        return new Pos(cursor.line,\n                   findFirstNonWhiteSpaceCharacter(cm.getLine(cursor.line)));\n      },\n      moveToMatchedSymbol: function(cm, head) {\n        var cursor = head;\n        var line = cursor.line;\n        var ch = cursor.ch;\n        var lineText = cm.getLine(line);\n        var symbol;\n        for (; ch < lineText.length; ch++) {\n          symbol = lineText.charAt(ch);\n          if (symbol && isMatchableSymbol(symbol)) {\n            var style = cm.getTokenTypeAt(new Pos(line, ch + 1));\n            if (style !== \"string\" && style !== \"comment\") {\n              break;\n            }\n          }\n        }\n        if (ch < lineText.length) {\n          // Only include angle brackets in analysis if they are being matched.\n          var re = (ch === '<' || ch === '>') ? /[(){}[\\]<>]/ : /[(){}[\\]]/;\n          var matched = cm.findMatchingBracket(new Pos(line, ch), {bracketRegex: re});\n          return matched.to;\n        } else {\n          return cursor;\n        }\n      },\n      moveToStartOfLine: function(_cm, head) {\n        return new Pos(head.line, 0);\n      },\n      moveToLineOrEdgeOfDocument: function(cm, _head, motionArgs) {\n        var lineNum = motionArgs.forward ? cm.lastLine() : cm.firstLine();\n        if (motionArgs.repeatIsExplicit) {\n          lineNum = motionArgs.repeat - cm.getOption('firstLineNumber');\n        }\n        return new Pos(lineNum,\n                   findFirstNonWhiteSpaceCharacter(cm.getLine(lineNum)));\n      },\n      moveToStartOfDisplayLine: function(cm) {\n        cm.execCommand(\"goLineLeft\");\n        return cm.getCursor();\n      },\n      moveToEndOfDisplayLine: function(cm) {\n        cm.execCommand(\"goLineRight\");\n        var head = cm.getCursor();\n        if (head.sticky == \"before\") head.ch--;\n        return head;\n      },\n      textObjectManipulation: function(cm, head, motionArgs, vim) {\n        // TODO: lots of possible exceptions that can be thrown here. Try da(\n        //     outside of a () block.\n        var mirroredPairs = {'(': ')', ')': '(',\n                             '{': '}', '}': '{',\n                             '[': ']', ']': '[',\n                             '<': '>', '>': '<'};\n        var selfPaired = {'\\'': true, '\"': true, '`': true};\n\n        var character = motionArgs.selectedCharacter;\n        // 'b' refers to  '()' block.\n        // 'B' refers to  '{}' block.\n        if (character == 'b') {\n          character = '(';\n        } else if (character == 'B') {\n          character = '{';\n        }\n\n        // Inclusive is the difference between a and i\n        // TODO: Instead of using the additional text object map to perform text\n        //     object operations, merge the map into the defaultKeyMap and use\n        //     motionArgs to define behavior. Define separate entries for 'aw',\n        //     'iw', 'a[', 'i[', etc.\n        var inclusive = !motionArgs.textObjectInner;\n\n        var tmp;\n        if (mirroredPairs[character]) {\n          tmp = selectCompanionObject(cm, head, character, inclusive);\n        } else if (selfPaired[character]) {\n          tmp = findBeginningAndEnd(cm, head, character, inclusive);\n        } else if (character === 'W') {\n          tmp = expandWordUnderCursor(cm, inclusive, true /** forward */,\n                                                     true /** bigWord */);\n        } else if (character === 'w') {\n          tmp = expandWordUnderCursor(cm, inclusive, true /** forward */,\n                                                     false /** bigWord */);\n        } else if (character === 'p') {\n          tmp = findParagraph(cm, head, motionArgs.repeat, 0, inclusive);\n          motionArgs.linewise = true;\n          if (vim.visualMode) {\n            if (!vim.visualLine) { vim.visualLine = true; }\n          } else {\n            var operatorArgs = vim.inputState.operatorArgs;\n            if (operatorArgs) { operatorArgs.linewise = true; }\n            tmp.end.line--;\n          }\n        } else if (character === 't') {\n          tmp = expandTagUnderCursor(cm, head, inclusive);\n        } else if (character === 's') {\n          // account for cursor on end of sentence symbol\n          var content = cm.getLine(head.line);\n          if (head.ch > 0 && isEndOfSentenceSymbol(content[head.ch])) {\n            head.ch -= 1;\n          }\n          var end = getSentence(cm, head, motionArgs.repeat, 1, inclusive);\n          var start = getSentence(cm, head, motionArgs.repeat, -1, inclusive);\n          // closer vim behaviour, 'a' only takes the space after the sentence if there is one before and after\n          if (isWhiteSpaceString(cm.getLine(start.line)[start.ch])\n              && isWhiteSpaceString(cm.getLine(end.line)[end.ch -1])) {\n            start = {line: start.line, ch: start.ch + 1};\n          }\n          tmp = {start: start, end: end};\n        } else {\n          // No text object defined for this, don't move.\n          return null;\n        }\n\n        if (!cm.state.vim.visualMode) {\n          return [tmp.start, tmp.end];\n        } else {\n          return expandSelection(cm, tmp.start, tmp.end);\n        }\n      },\n\n      repeatLastCharacterSearch: function(cm, head, motionArgs) {\n        var lastSearch = vimGlobalState.lastCharacterSearch;\n        var repeat = motionArgs.repeat;\n        var forward = motionArgs.forward === lastSearch.forward;\n        var increment = (lastSearch.increment ? 1 : 0) * (forward ? -1 : 1);\n        cm.moveH(-increment, 'char');\n        motionArgs.inclusive = forward ? true : false;\n        var curEnd = moveToCharacter(cm, repeat, forward, lastSearch.selectedCharacter);\n        if (!curEnd) {\n          cm.moveH(increment, 'char');\n          return head;\n        }\n        curEnd.ch += increment;\n        return curEnd;\n      }\n    };\n\n    function defineMotion(name, fn) {\n      motions[name] = fn;\n    }\n\n    function fillArray(val, times) {\n      var arr = [];\n      for (var i = 0; i < times; i++) {\n        arr.push(val);\n      }\n      return arr;\n    }\n    /**\n     * An operator acts on a text selection. It receives the list of selections\n     * as input. The corresponding CodeMirror selection is guaranteed to\n    * match the input selection.\n     */\n    var operators = {\n      change: function(cm, args, ranges) {\n        var finalHead, text;\n        var vim = cm.state.vim;\n        var anchor = ranges[0].anchor,\n            head = ranges[0].head;\n        if (!vim.visualMode) {\n          text = cm.getRange(anchor, head);\n          var lastState = vim.lastEditInputState || {};\n          if (lastState.motion == \"moveByWords\" && !isWhiteSpaceString(text)) {\n            // Exclude trailing whitespace if the range is not all whitespace.\n            var match = (/\\s+$/).exec(text);\n            if (match && lastState.motionArgs && lastState.motionArgs.forward) {\n              head = offsetCursor(head, 0, - match[0].length);\n              text = text.slice(0, - match[0].length);\n            }\n          }\n          var prevLineEnd = new Pos(anchor.line - 1, Number.MAX_VALUE);\n          var wasLastLine = cm.firstLine() == cm.lastLine();\n          if (head.line > cm.lastLine() && args.linewise && !wasLastLine) {\n            cm.replaceRange('', prevLineEnd, head);\n          } else {\n            cm.replaceRange('', anchor, head);\n          }\n          if (args.linewise) {\n            // Push the next line back down, if there is a next line.\n            if (!wasLastLine) {\n              cm.setCursor(prevLineEnd);\n              CodeMirror.commands.newlineAndIndent(cm);\n            }\n            // make sure cursor ends up at the end of the line.\n            anchor.ch = Number.MAX_VALUE;\n          }\n          finalHead = anchor;\n        } else if (args.fullLine) {\n            head.ch = Number.MAX_VALUE;\n            head.line--;\n            cm.setSelection(anchor, head);\n            text = cm.getSelection();\n            cm.replaceSelection(\"\");\n            finalHead = anchor;\n        } else {\n          text = cm.getSelection();\n          var replacement = fillArray('', ranges.length);\n          cm.replaceSelections(replacement);\n          finalHead = cursorMin(ranges[0].head, ranges[0].anchor);\n        }\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'change', text,\n            args.linewise, ranges.length > 1);\n        actions.enterInsertMode(cm, {head: finalHead}, cm.state.vim);\n      },\n      // delete is a javascript keyword.\n      'delete': function(cm, args, ranges) {\n        var finalHead, text;\n        var vim = cm.state.vim;\n        if (!vim.visualBlock) {\n          var anchor = ranges[0].anchor,\n              head = ranges[0].head;\n          if (args.linewise &&\n              head.line != cm.firstLine() &&\n              anchor.line == cm.lastLine() &&\n              anchor.line == head.line - 1) {\n            // Special case for dd on last line (and first line).\n            if (anchor.line == cm.firstLine()) {\n              anchor.ch = 0;\n            } else {\n              anchor = new Pos(anchor.line - 1, lineLength(cm, anchor.line - 1));\n            }\n          }\n          text = cm.getRange(anchor, head);\n          cm.replaceRange('', anchor, head);\n          finalHead = anchor;\n          if (args.linewise) {\n            finalHead = motions.moveToFirstNonWhiteSpaceCharacter(cm, anchor);\n          }\n        } else {\n          text = cm.getSelection();\n          var replacement = fillArray('', ranges.length);\n          cm.replaceSelections(replacement);\n          finalHead = cursorMin(ranges[0].head, ranges[0].anchor);\n        }\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'delete', text,\n            args.linewise, vim.visualBlock);\n        return clipCursorToContent(cm, finalHead);\n      },\n      indent: function(cm, args, ranges) {\n        var vim = cm.state.vim;\n        if (cm.indentMore) {\n          var repeat = (vim.visualMode) ? args.repeat : 1;\n          for (var j = 0; j < repeat; j++) {\n            if (args.indentRight) cm.indentMore();\n            else cm.indentLess();\n          }\n        } else {\n          var startLine = ranges[0].anchor.line;\n          var endLine = vim.visualBlock ?\n            ranges[ranges.length - 1].anchor.line :\n            ranges[0].head.line;\n          // In visual mode, n> shifts the selection right n times, instead of\n          // shifting n lines right once.\n          var repeat = (vim.visualMode) ? args.repeat : 1;\n          if (args.linewise) {\n            // The only way to delete a newline is to delete until the start of\n            // the next line, so in linewise mode evalInput will include the next\n            // line. We don't want this in indent, so we go back a line.\n            endLine--;\n          }\n          for (var i = startLine; i <= endLine; i++) {\n            for (var j = 0; j < repeat; j++) {\n              cm.indentLine(i, args.indentRight);\n            }\n          }\n        }\n        return motions.moveToFirstNonWhiteSpaceCharacter(cm, ranges[0].anchor);\n      },\n      indentAuto: function(cm, _args, ranges) {\n        cm.execCommand(\"indentAuto\");\n        return motions.moveToFirstNonWhiteSpaceCharacter(cm, ranges[0].anchor);\n      },\n      changeCase: function(cm, args, ranges, oldAnchor, newHead) {\n        var selections = cm.getSelections();\n        var swapped = [];\n        var toLower = args.toLower;\n        for (var j = 0; j < selections.length; j++) {\n          var toSwap = selections[j];\n          var text = '';\n          if (toLower === true) {\n            text = toSwap.toLowerCase();\n          } else if (toLower === false) {\n            text = toSwap.toUpperCase();\n          } else {\n            for (var i = 0; i < toSwap.length; i++) {\n              var character = toSwap.charAt(i);\n              text += isUpperCase(character) ? character.toLowerCase() :\n                  character.toUpperCase();\n            }\n          }\n          swapped.push(text);\n        }\n        cm.replaceSelections(swapped);\n        if (args.shouldMoveCursor){\n          return newHead;\n        } else if (!cm.state.vim.visualMode && args.linewise && ranges[0].anchor.line + 1 == ranges[0].head.line) {\n          return motions.moveToFirstNonWhiteSpaceCharacter(cm, oldAnchor);\n        } else if (args.linewise){\n          return oldAnchor;\n        } else {\n          return cursorMin(ranges[0].anchor, ranges[0].head);\n        }\n      },\n      yank: function(cm, args, ranges, oldAnchor) {\n        var vim = cm.state.vim;\n        var text = cm.getSelection();\n        var endPos = vim.visualMode\n          ? cursorMin(vim.sel.anchor, vim.sel.head, ranges[0].head, ranges[0].anchor)\n          : oldAnchor;\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'yank',\n            text, args.linewise, vim.visualBlock);\n        return endPos;\n      }\n    };\n\n    function defineOperator(name, fn) {\n      operators[name] = fn;\n    }\n\n    var actions = {\n      jumpListWalk: function(cm, actionArgs, vim) {\n        if (vim.visualMode) {\n          return;\n        }\n        var repeat = actionArgs.repeat;\n        var forward = actionArgs.forward;\n        var jumpList = vimGlobalState.jumpList;\n\n        var mark = jumpList.move(cm, forward ? repeat : -repeat);\n        var markPos = mark ? mark.find() : undefined;\n        markPos = markPos ? markPos : cm.getCursor();\n        cm.setCursor(markPos);\n      },\n      scroll: function(cm, actionArgs, vim) {\n        if (vim.visualMode) {\n          return;\n        }\n        var repeat = actionArgs.repeat || 1;\n        var lineHeight = cm.defaultTextHeight();\n        var top = cm.getScrollInfo().top;\n        var delta = lineHeight * repeat;\n        var newPos = actionArgs.forward ? top + delta : top - delta;\n        var cursor = copyCursor(cm.getCursor());\n        var cursorCoords = cm.charCoords(cursor, 'local');\n        if (actionArgs.forward) {\n          if (newPos > cursorCoords.top) {\n             cursor.line += (newPos - cursorCoords.top) / lineHeight;\n             cursor.line = Math.ceil(cursor.line);\n             cm.setCursor(cursor);\n             cursorCoords = cm.charCoords(cursor, 'local');\n             cm.scrollTo(null, cursorCoords.top);\n          } else {\n             // Cursor stays within bounds.  Just reposition the scroll window.\n             cm.scrollTo(null, newPos);\n          }\n        } else {\n          var newBottom = newPos + cm.getScrollInfo().clientHeight;\n          if (newBottom < cursorCoords.bottom) {\n             cursor.line -= (cursorCoords.bottom - newBottom) / lineHeight;\n             cursor.line = Math.floor(cursor.line);\n             cm.setCursor(cursor);\n             cursorCoords = cm.charCoords(cursor, 'local');\n             cm.scrollTo(\n                 null, cursorCoords.bottom - cm.getScrollInfo().clientHeight);\n          } else {\n             // Cursor stays within bounds.  Just reposition the scroll window.\n             cm.scrollTo(null, newPos);\n          }\n        }\n      },\n      scrollToCursor: function(cm, actionArgs) {\n        var lineNum = cm.getCursor().line;\n        var charCoords = cm.charCoords(new Pos(lineNum, 0), 'local');\n        var height = cm.getScrollInfo().clientHeight;\n        var y = charCoords.top;\n        switch (actionArgs.position) {\n          case 'center': y = charCoords.bottom - height / 2;\n            break;\n          case 'bottom':\n            var lineLastCharPos = new Pos(lineNum, cm.getLine(lineNum).length - 1);\n            var lineLastCharCoords = cm.charCoords(lineLastCharPos, 'local');\n            var lineHeight = lineLastCharCoords.bottom - y;\n            y = y - height + lineHeight;\n            break;\n        }\n        cm.scrollTo(null, y);\n      },\n      replayMacro: function(cm, actionArgs, vim) {\n        var registerName = actionArgs.selectedCharacter;\n        var repeat = actionArgs.repeat;\n        var macroModeState = vimGlobalState.macroModeState;\n        if (registerName == '@') {\n          registerName = macroModeState.latestRegister;\n        } else {\n          macroModeState.latestRegister = registerName;\n        }\n        while(repeat--){\n          executeMacroRegister(cm, vim, macroModeState, registerName);\n        }\n      },\n      enterMacroRecordMode: function(cm, actionArgs) {\n        var macroModeState = vimGlobalState.macroModeState;\n        var registerName = actionArgs.selectedCharacter;\n        if (vimGlobalState.registerController.isValidRegister(registerName)) {\n          macroModeState.enterMacroRecordMode(cm, registerName);\n        }\n      },\n      toggleOverwrite: function(cm) {\n        if (!cm.state.overwrite) {\n          cm.toggleOverwrite(true);\n          cm.setOption('keyMap', 'vim-replace');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"replace\"});\n        } else {\n          cm.toggleOverwrite(false);\n          cm.setOption('keyMap', 'vim-insert');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"insert\"});\n        }\n      },\n      enterInsertMode: function(cm, actionArgs, vim) {\n        if (cm.getOption('readOnly')) { return; }\n        vim.insertMode = true;\n        vim.insertModeRepeat = actionArgs && actionArgs.repeat || 1;\n        var insertAt = (actionArgs) ? actionArgs.insertAt : null;\n        var sel = vim.sel;\n        var head = actionArgs.head || cm.getCursor('head');\n        var height = cm.listSelections().length;\n        if (insertAt == 'eol') {\n          head = new Pos(head.line, lineLength(cm, head.line));\n        } else if (insertAt == 'bol') {\n          head = new Pos(head.line, 0);\n        } else if (insertAt == 'charAfter') {\n          head = offsetCursor(head, 0, 1);\n        } else if (insertAt == 'firstNonBlank') {\n          head = motions.moveToFirstNonWhiteSpaceCharacter(cm, head);\n        } else if (insertAt == 'startOfSelectedArea') {\n          if (!vim.visualMode)\n              return;\n          if (!vim.visualBlock) {\n            if (sel.head.line < sel.anchor.line) {\n              head = sel.head;\n            } else {\n              head = new Pos(sel.anchor.line, 0);\n            }\n          } else {\n            head = new Pos(\n                Math.min(sel.head.line, sel.anchor.line),\n                Math.min(sel.head.ch, sel.anchor.ch));\n            height = Math.abs(sel.head.line - sel.anchor.line) + 1;\n          }\n        } else if (insertAt == 'endOfSelectedArea') {\n            if (!vim.visualMode)\n              return;\n          if (!vim.visualBlock) {\n            if (sel.head.line >= sel.anchor.line) {\n              head = offsetCursor(sel.head, 0, 1);\n            } else {\n              head = new Pos(sel.anchor.line, 0);\n            }\n          } else {\n            head = new Pos(\n                Math.min(sel.head.line, sel.anchor.line),\n                Math.max(sel.head.ch, sel.anchor.ch) + 1);\n            height = Math.abs(sel.head.line - sel.anchor.line) + 1;\n          }\n        } else if (insertAt == 'inplace') {\n          if (vim.visualMode){\n            return;\n          }\n        } else if (insertAt == 'lastEdit') {\n          head = getLastEditPos(cm) || head;\n        }\n        cm.setOption('disableInput', false);\n        if (actionArgs && actionArgs.replace) {\n          // Handle Replace-mode as a special case of insert mode.\n          cm.toggleOverwrite(true);\n          cm.setOption('keyMap', 'vim-replace');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"replace\"});\n        } else {\n          cm.toggleOverwrite(false);\n          cm.setOption('keyMap', 'vim-insert');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"insert\"});\n        }\n        if (!vimGlobalState.macroModeState.isPlaying) {\n          // Only record if not replaying.\n          cm.on('change', onChange);\n          CodeMirror.on(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown);\n        }\n        if (vim.visualMode) {\n          exitVisualMode(cm);\n        }\n        selectForInsert(cm, head, height);\n      },\n      toggleVisualMode: function(cm, actionArgs, vim) {\n        var repeat = actionArgs.repeat;\n        var anchor = cm.getCursor();\n        var head;\n        // TODO: The repeat should actually select number of characters/lines\n        //     equal to the repeat times the size of the previous visual\n        //     operation.\n        if (!vim.visualMode) {\n          // Entering visual mode\n          vim.visualMode = true;\n          vim.visualLine = !!actionArgs.linewise;\n          vim.visualBlock = !!actionArgs.blockwise;\n          head = clipCursorToContent(\n              cm, new Pos(anchor.line, anchor.ch + repeat - 1));\n          vim.sel = {\n            anchor: anchor,\n            head: head\n          };\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: vim.visualLine ? \"linewise\" : vim.visualBlock ? \"blockwise\" : \"\"});\n          updateCmSelection(cm);\n          updateMark(cm, vim, '<', cursorMin(anchor, head));\n          updateMark(cm, vim, '>', cursorMax(anchor, head));\n        } else if (vim.visualLine ^ actionArgs.linewise ||\n            vim.visualBlock ^ actionArgs.blockwise) {\n          // Toggling between modes\n          vim.visualLine = !!actionArgs.linewise;\n          vim.visualBlock = !!actionArgs.blockwise;\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: vim.visualLine ? \"linewise\" : vim.visualBlock ? \"blockwise\" : \"\"});\n          updateCmSelection(cm);\n        } else {\n          exitVisualMode(cm);\n        }\n      },\n      reselectLastSelection: function(cm, _actionArgs, vim) {\n        var lastSelection = vim.lastSelection;\n        if (vim.visualMode) {\n          updateLastSelection(cm, vim);\n        }\n        if (lastSelection) {\n          var anchor = lastSelection.anchorMark.find();\n          var head = lastSelection.headMark.find();\n          if (!anchor || !head) {\n            // If the marks have been destroyed due to edits, do nothing.\n            return;\n          }\n          vim.sel = {\n            anchor: anchor,\n            head: head\n          };\n          vim.visualMode = true;\n          vim.visualLine = lastSelection.visualLine;\n          vim.visualBlock = lastSelection.visualBlock;\n          updateCmSelection(cm);\n          updateMark(cm, vim, '<', cursorMin(anchor, head));\n          updateMark(cm, vim, '>', cursorMax(anchor, head));\n          CodeMirror.signal(cm, 'vim-mode-change', {\n            mode: 'visual',\n            subMode: vim.visualLine ? 'linewise' :\n                     vim.visualBlock ? 'blockwise' : ''});\n        }\n      },\n      joinLines: function(cm, actionArgs, vim) {\n        var curStart, curEnd;\n        if (vim.visualMode) {\n          curStart = cm.getCursor('anchor');\n          curEnd = cm.getCursor('head');\n          if (cursorIsBefore(curEnd, curStart)) {\n            var tmp = curEnd;\n            curEnd = curStart;\n            curStart = tmp;\n          }\n          curEnd.ch = lineLength(cm, curEnd.line) - 1;\n        } else {\n          // Repeat is the number of lines to join. Minimum 2 lines.\n          var repeat = Math.max(actionArgs.repeat, 2);\n          curStart = cm.getCursor();\n          curEnd = clipCursorToContent(cm, new Pos(curStart.line + repeat - 1,\n                                               Infinity));\n        }\n        var finalCh = 0;\n        for (var i = curStart.line; i < curEnd.line; i++) {\n          finalCh = lineLength(cm, curStart.line);\n          var tmp = new Pos(curStart.line + 1,\n                        lineLength(cm, curStart.line + 1));\n          var text = cm.getRange(curStart, tmp);\n          text = actionArgs.keepSpaces\n            ? text.replace(/\\n\\r?/g, '')\n            : text.replace(/\\n\\s*/g, ' ');\n          cm.replaceRange(text, curStart, tmp);\n        }\n        var curFinalPos = new Pos(curStart.line, finalCh);\n        if (vim.visualMode) {\n          exitVisualMode(cm, false);\n        }\n        cm.setCursor(curFinalPos);\n      },\n      newLineAndEnterInsertMode: function(cm, actionArgs, vim) {\n        vim.insertMode = true;\n        var insertAt = copyCursor(cm.getCursor());\n        if (insertAt.line === cm.firstLine() && !actionArgs.after) {\n          // Special case for inserting newline before start of document.\n          cm.replaceRange('\\n', new Pos(cm.firstLine(), 0));\n          cm.setCursor(cm.firstLine(), 0);\n        } else {\n          insertAt.line = (actionArgs.after) ? insertAt.line :\n              insertAt.line - 1;\n          insertAt.ch = lineLength(cm, insertAt.line);\n          cm.setCursor(insertAt);\n          var newlineFn = CodeMirror.commands.newlineAndIndentContinueComment ||\n              CodeMirror.commands.newlineAndIndent;\n          newlineFn(cm);\n        }\n        this.enterInsertMode(cm, { repeat: actionArgs.repeat }, vim);\n      },\n      paste: function(cm, actionArgs, vim) {\n        var register = vimGlobalState.registerController.getRegister(\n            actionArgs.registerName);\n        if (actionArgs.registerName === '+') {\n          navigator.clipboard.readText().then((value) => {\n            this.continuePaste(cm, actionArgs, vim, value, register);\n          });\n        } else {\n          var text = register.toString();\n          this.continuePaste(cm, actionArgs, vim, text, register);\n        }\n      },\n      continuePaste: function(cm, actionArgs, vim, text, register) {\n        var cur = copyCursor(cm.getCursor());\n        if (!text) {\n          return;\n        }\n        if (actionArgs.matchIndent) {\n          var tabSize = cm.getOption(\"tabSize\");\n          // length that considers tabs and tabSize\n          var whitespaceLength = function(str) {\n            var tabs = (str.split(\"\\t\").length - 1);\n            var spaces = (str.split(\" \").length - 1);\n            return tabs * tabSize + spaces * 1;\n          };\n          var currentLine = cm.getLine(cm.getCursor().line);\n          var indent = whitespaceLength(currentLine.match(/^\\s*/)[0]);\n          // chomp last newline b/c don't want it to match /^\\s*/gm\n          var chompedText = text.replace(/\\n$/, '');\n          var wasChomped = text !== chompedText;\n          var firstIndent = whitespaceLength(text.match(/^\\s*/)[0]);\n          var text = chompedText.replace(/^\\s*/gm, function(wspace) {\n            var newIndent = indent + (whitespaceLength(wspace) - firstIndent);\n            if (newIndent < 0) {\n              return \"\";\n            }\n            else if (cm.getOption(\"indentWithTabs\")) {\n              var quotient = Math.floor(newIndent / tabSize);\n              return Array(quotient + 1).join('\\t');\n            }\n            else {\n              return Array(newIndent + 1).join(' ');\n            }\n          });\n          text += wasChomped ? \"\\n\" : \"\";\n        }\n        if (actionArgs.repeat > 1) {\n          var text = Array(actionArgs.repeat + 1).join(text);\n        }\n        var linewise = register.linewise;\n        var blockwise = register.blockwise;\n        if (blockwise) {\n          text = text.split('\\n');\n          if (linewise) {\n            text.pop();\n          }\n          for (var i = 0; i < text.length; i++) {\n            text[i] = (text[i] == '') ? ' ' : text[i];\n          }\n          cur.ch += actionArgs.after ? 1 : 0;\n          cur.ch = Math.min(lineLength(cm, cur.line), cur.ch);\n        } else if (linewise) {\n          if(vim.visualMode) {\n            text = vim.visualLine ? text.slice(0, -1) : '\\n' + text.slice(0, text.length - 1) + '\\n';\n          } else if (actionArgs.after) {\n            // Move the newline at the end to the start instead, and paste just\n            // before the newline character of the line we are on right now.\n            text = '\\n' + text.slice(0, text.length - 1);\n            cur.ch = lineLength(cm, cur.line);\n          } else {\n            cur.ch = 0;\n          }\n        } else {\n          cur.ch += actionArgs.after ? 1 : 0;\n        }\n        var curPosFinal;\n        var idx;\n        if (vim.visualMode) {\n          //  save the pasted text for reselection if the need arises\n          vim.lastPastedText = text;\n          var lastSelectionCurEnd;\n          var selectedArea = getSelectedAreaRange(cm, vim);\n          var selectionStart = selectedArea[0];\n          var selectionEnd = selectedArea[1];\n          var selectedText = cm.getSelection();\n          var selections = cm.listSelections();\n          var emptyStrings = new Array(selections.length).join('1').split('1');\n          // save the curEnd marker before it get cleared due to cm.replaceRange.\n          if (vim.lastSelection) {\n            lastSelectionCurEnd = vim.lastSelection.headMark.find();\n          }\n          // push the previously selected text to unnamed register\n          vimGlobalState.registerController.unnamedRegister.setText(selectedText);\n          if (blockwise) {\n            // first delete the selected text\n            cm.replaceSelections(emptyStrings);\n            // Set new selections as per the block length of the yanked text\n            selectionEnd = new Pos(selectionStart.line + text.length-1, selectionStart.ch);\n            cm.setCursor(selectionStart);\n            selectBlock(cm, selectionEnd);\n            cm.replaceSelections(text);\n            curPosFinal = selectionStart;\n          } else if (vim.visualBlock) {\n            cm.replaceSelections(emptyStrings);\n            cm.setCursor(selectionStart);\n            cm.replaceRange(text, selectionStart, selectionStart);\n            curPosFinal = selectionStart;\n          } else {\n            cm.replaceRange(text, selectionStart, selectionEnd);\n            curPosFinal = cm.posFromIndex(cm.indexFromPos(selectionStart) + text.length - 1);\n          }\n          // restore the the curEnd marker\n          if(lastSelectionCurEnd) {\n            vim.lastSelection.headMark = cm.setBookmark(lastSelectionCurEnd);\n          }\n          if (linewise) {\n            curPosFinal.ch=0;\n          }\n        } else {\n          if (blockwise) {\n            cm.setCursor(cur);\n            for (var i = 0; i < text.length; i++) {\n              var line = cur.line+i;\n              if (line > cm.lastLine()) {\n                cm.replaceRange('\\n',  new Pos(line, 0));\n              }\n              var lastCh = lineLength(cm, line);\n              if (lastCh < cur.ch) {\n                extendLineToColumn(cm, line, cur.ch);\n              }\n            }\n            cm.setCursor(cur);\n            selectBlock(cm, new Pos(cur.line + text.length-1, cur.ch));\n            cm.replaceSelections(text);\n            curPosFinal = cur;\n          } else {\n            cm.replaceRange(text, cur);\n            // Now fine tune the cursor to where we want it.\n            if (linewise && actionArgs.after) {\n              curPosFinal = new Pos(\n                cur.line + 1,\n                findFirstNonWhiteSpaceCharacter(cm.getLine(cur.line + 1)));\n            } else if (linewise && !actionArgs.after) {\n              curPosFinal = new Pos(\n                cur.line,\n                findFirstNonWhiteSpaceCharacter(cm.getLine(cur.line)));\n            } else if (!linewise && actionArgs.after) {\n              idx = cm.indexFromPos(cur);\n              curPosFinal = cm.posFromIndex(idx + text.length - 1);\n            } else {\n              idx = cm.indexFromPos(cur);\n              curPosFinal = cm.posFromIndex(idx + text.length);\n            }\n          }\n        }\n        if (vim.visualMode) {\n          exitVisualMode(cm, false);\n        }\n        cm.setCursor(curPosFinal);\n      },\n      undo: function(cm, actionArgs) {\n        cm.operation(function() {\n          repeatFn(cm, CodeMirror.commands.undo, actionArgs.repeat)();\n          cm.setCursor(cm.getCursor('anchor'));\n        });\n      },\n      redo: function(cm, actionArgs) {\n        repeatFn(cm, CodeMirror.commands.redo, actionArgs.repeat)();\n      },\n      setRegister: function(_cm, actionArgs, vim) {\n        vim.inputState.registerName = actionArgs.selectedCharacter;\n      },\n      setMark: function(cm, actionArgs, vim) {\n        var markName = actionArgs.selectedCharacter;\n        updateMark(cm, vim, markName, cm.getCursor());\n      },\n      replace: function(cm, actionArgs, vim) {\n        var replaceWith = actionArgs.selectedCharacter;\n        var curStart = cm.getCursor();\n        var replaceTo;\n        var curEnd;\n        var selections = cm.listSelections();\n        if (vim.visualMode) {\n          curStart = cm.getCursor('start');\n          curEnd = cm.getCursor('end');\n        } else {\n          var line = cm.getLine(curStart.line);\n          replaceTo = curStart.ch + actionArgs.repeat;\n          if (replaceTo > line.length) {\n            replaceTo=line.length;\n          }\n          curEnd = new Pos(curStart.line, replaceTo);\n        }\n        if (replaceWith=='\\n') {\n          if (!vim.visualMode) cm.replaceRange('', curStart, curEnd);\n          // special case, where vim help says to replace by just one line-break\n          (CodeMirror.commands.newlineAndIndentContinueComment || CodeMirror.commands.newlineAndIndent)(cm);\n        } else {\n          var replaceWithStr = cm.getRange(curStart, curEnd);\n          //replace all characters in range by selected, but keep linebreaks\n          replaceWithStr = replaceWithStr.replace(/[^\\n]/g, replaceWith);\n          if (vim.visualBlock) {\n            // Tabs are split in visua block before replacing\n            var spaces = new Array(cm.getOption(\"tabSize\")+1).join(' ');\n            replaceWithStr = cm.getSelection();\n            replaceWithStr = replaceWithStr.replace(/\\t/g, spaces).replace(/[^\\n]/g, replaceWith).split('\\n');\n            cm.replaceSelections(replaceWithStr);\n          } else {\n            cm.replaceRange(replaceWithStr, curStart, curEnd);\n          }\n          if (vim.visualMode) {\n            curStart = cursorIsBefore(selections[0].anchor, selections[0].head) ?\n                         selections[0].anchor : selections[0].head;\n            cm.setCursor(curStart);\n            exitVisualMode(cm, false);\n          } else {\n            cm.setCursor(offsetCursor(curEnd, 0, -1));\n          }\n        }\n      },\n      incrementNumberToken: function(cm, actionArgs) {\n        var cur = cm.getCursor();\n        var lineStr = cm.getLine(cur.line);\n        var re = /(-?)(?:(0x)([\\da-f]+)|(0b|0|)(\\d+))/gi;\n        var match;\n        var start;\n        var end;\n        var numberStr;\n        while ((match = re.exec(lineStr)) !== null) {\n          start = match.index;\n          end = start + match[0].length;\n          if (cur.ch < end)break;\n        }\n        if (!actionArgs.backtrack && (end <= cur.ch))return;\n        if (match) {\n          var baseStr = match[2] || match[4];\n          var digits = match[3] || match[5];\n          var increment = actionArgs.increase ? 1 : -1;\n          var base = {'0b': 2, '0': 8, '': 10, '0x': 16}[baseStr.toLowerCase()];\n          var number = parseInt(match[1] + digits, base) + (increment * actionArgs.repeat);\n          numberStr = number.toString(base);\n          var zeroPadding = baseStr ? new Array(digits.length - numberStr.length + 1 + match[1].length).join('0') : '';\n          if (numberStr.charAt(0) === '-') {\n            numberStr = '-' + baseStr + zeroPadding + numberStr.substr(1);\n          } else {\n            numberStr = baseStr + zeroPadding + numberStr;\n          }\n          var from = new Pos(cur.line, start);\n          var to = new Pos(cur.line, end);\n          cm.replaceRange(numberStr, from, to);\n        } else {\n          return;\n        }\n        cm.setCursor(new Pos(cur.line, start + numberStr.length - 1));\n      },\n      repeatLastEdit: function(cm, actionArgs, vim) {\n        var lastEditInputState = vim.lastEditInputState;\n        if (!lastEditInputState) { return; }\n        var repeat = actionArgs.repeat;\n        if (repeat && actionArgs.repeatIsExplicit) {\n          vim.lastEditInputState.repeatOverride = repeat;\n        } else {\n          repeat = vim.lastEditInputState.repeatOverride || repeat;\n        }\n        repeatLastEdit(cm, vim, repeat, false /** repeatForInsert */);\n      },\n      indent: function(cm, actionArgs) {\n        cm.indentLine(cm.getCursor().line, actionArgs.indentRight);\n      },\n      exitInsertMode: exitInsertMode\n    };\n\n    function defineAction(name, fn) {\n      actions[name] = fn;\n    }\n\n    /*\n     * Below are miscellaneous utility functions used by vim.js\n     */\n\n    /**\n     * Clips cursor to ensure that line is within the buffer's range\n     * If includeLineBreak is true, then allow cur.ch == lineLength.\n     */\n    function clipCursorToContent(cm, cur) {\n      var vim = cm.state.vim;\n      var includeLineBreak = vim.insertMode || vim.visualMode;\n      var line = Math.min(Math.max(cm.firstLine(), cur.line), cm.lastLine() );\n      var maxCh = lineLength(cm, line) - 1 + !!includeLineBreak;\n      var ch = Math.min(Math.max(0, cur.ch), maxCh);\n      return new Pos(line, ch);\n    }\n    function copyArgs(args) {\n      var ret = {};\n      for (var prop in args) {\n        if (args.hasOwnProperty(prop)) {\n          ret[prop] = args[prop];\n        }\n      }\n      return ret;\n    }\n    function offsetCursor(cur, offsetLine, offsetCh) {\n      if (typeof offsetLine === 'object') {\n        offsetCh = offsetLine.ch;\n        offsetLine = offsetLine.line;\n      }\n      return new Pos(cur.line + offsetLine, cur.ch + offsetCh);\n    }\n    function commandMatches(keys, keyMap, context, inputState) {\n      // Partial matches are not applied. They inform the key handler\n      // that the current key sequence is a subsequence of a valid key\n      // sequence, so that the key buffer is not cleared.\n      var match, partial = [], full = [];\n      for (var i = 0; i < keyMap.length; i++) {\n        var command = keyMap[i];\n        if (context == 'insert' && command.context != 'insert' ||\n            command.context && command.context != context ||\n            inputState.operator && command.type == 'action' ||\n            !(match = commandMatch(keys, command.keys))) { continue; }\n        if (match == 'partial') { partial.push(command); }\n        if (match == 'full') { full.push(command); }\n      }\n      return {\n        partial: partial.length && partial,\n        full: full.length && full\n      };\n    }\n    function commandMatch(pressed, mapped) {\n      if (mapped.slice(-11) == '<character>') {\n        // Last character matches anything.\n        var prefixLen = mapped.length - 11;\n        var pressedPrefix = pressed.slice(0, prefixLen);\n        var mappedPrefix = mapped.slice(0, prefixLen);\n        return pressedPrefix == mappedPrefix && pressed.length > prefixLen ? 'full' :\n               mappedPrefix.indexOf(pressedPrefix) == 0 ? 'partial' : false;\n      } else {\n        return pressed == mapped ? 'full' :\n               mapped.indexOf(pressed) == 0 ? 'partial' : false;\n      }\n    }\n    function lastChar(keys) {\n      var match = /^.*(<[^>]+>)$/.exec(keys);\n      var selectedCharacter = match ? match[1] : keys.slice(-1);\n      if (selectedCharacter.length > 1){\n        switch(selectedCharacter){\n          case '<CR>':\n            selectedCharacter='\\n';\n            break;\n          case '<Space>':\n            selectedCharacter=' ';\n            break;\n          default:\n            selectedCharacter='';\n            break;\n        }\n      }\n      return selectedCharacter;\n    }\n    function repeatFn(cm, fn, repeat) {\n      return function() {\n        for (var i = 0; i < repeat; i++) {\n          fn(cm);\n        }\n      };\n    }\n    function copyCursor(cur) {\n      return new Pos(cur.line, cur.ch);\n    }\n    function cursorEqual(cur1, cur2) {\n      return cur1.ch == cur2.ch && cur1.line == cur2.line;\n    }\n    function cursorIsBefore(cur1, cur2) {\n      if (cur1.line < cur2.line) {\n        return true;\n      }\n      if (cur1.line == cur2.line && cur1.ch < cur2.ch) {\n        return true;\n      }\n      return false;\n    }\n    function cursorMin(cur1, cur2) {\n      if (arguments.length > 2) {\n        cur2 = cursorMin.apply(undefined, Array.prototype.slice.call(arguments, 1));\n      }\n      return cursorIsBefore(cur1, cur2) ? cur1 : cur2;\n    }\n    function cursorMax(cur1, cur2) {\n      if (arguments.length > 2) {\n        cur2 = cursorMax.apply(undefined, Array.prototype.slice.call(arguments, 1));\n      }\n      return cursorIsBefore(cur1, cur2) ? cur2 : cur1;\n    }\n    function cursorIsBetween(cur1, cur2, cur3) {\n      // returns true if cur2 is between cur1 and cur3.\n      var cur1before2 = cursorIsBefore(cur1, cur2);\n      var cur2before3 = cursorIsBefore(cur2, cur3);\n      return cur1before2 && cur2before3;\n    }\n    function lineLength(cm, lineNum) {\n      return cm.getLine(lineNum).length;\n    }\n    function trim(s) {\n      if (s.trim) {\n        return s.trim();\n      }\n      return s.replace(/^\\s+|\\s+$/g, '');\n    }\n    function escapeRegex(s) {\n      return s.replace(/([.?*+$\\[\\]\\/\\\\(){}|\\-])/g, '\\\\$1');\n    }\n    function extendLineToColumn(cm, lineNum, column) {\n      var endCh = lineLength(cm, lineNum);\n      var spaces = new Array(column-endCh+1).join(' ');\n      cm.setCursor(new Pos(lineNum, endCh));\n      cm.replaceRange(spaces, cm.getCursor());\n    }\n    // This functions selects a rectangular block\n    // of text with selectionEnd as any of its corner\n    // Height of block:\n    // Difference in selectionEnd.line and first/last selection.line\n    // Width of the block:\n    // Distance between selectionEnd.ch and any(first considered here) selection.ch\n    function selectBlock(cm, selectionEnd) {\n      var selections = [], ranges = cm.listSelections();\n      var head = copyCursor(cm.clipPos(selectionEnd));\n      var isClipped = !cursorEqual(selectionEnd, head);\n      var curHead = cm.getCursor('head');\n      var primIndex = getIndex(ranges, curHead);\n      var wasClipped = cursorEqual(ranges[primIndex].head, ranges[primIndex].anchor);\n      var max = ranges.length - 1;\n      var index = max - primIndex > primIndex ? max : 0;\n      var base = ranges[index].anchor;\n\n      var firstLine = Math.min(base.line, head.line);\n      var lastLine = Math.max(base.line, head.line);\n      var baseCh = base.ch, headCh = head.ch;\n\n      var dir = ranges[index].head.ch - baseCh;\n      var newDir = headCh - baseCh;\n      if (dir > 0 && newDir <= 0) {\n        baseCh++;\n        if (!isClipped) { headCh--; }\n      } else if (dir < 0 && newDir >= 0) {\n        baseCh--;\n        if (!wasClipped) { headCh++; }\n      } else if (dir < 0 && newDir == -1) {\n        baseCh--;\n        headCh++;\n      }\n      for (var line = firstLine; line <= lastLine; line++) {\n        var range = {anchor: new Pos(line, baseCh), head: new Pos(line, headCh)};\n        selections.push(range);\n      }\n      cm.setSelections(selections);\n      selectionEnd.ch = headCh;\n      base.ch = baseCh;\n      return base;\n    }\n    function selectForInsert(cm, head, height) {\n      var sel = [];\n      for (var i = 0; i < height; i++) {\n        var lineHead = offsetCursor(head, i, 0);\n        sel.push({anchor: lineHead, head: lineHead});\n      }\n      cm.setSelections(sel, 0);\n    }\n    // getIndex returns the index of the cursor in the selections.\n    function getIndex(ranges, cursor, end) {\n      for (var i = 0; i < ranges.length; i++) {\n        var atAnchor = end != 'head' && cursorEqual(ranges[i].anchor, cursor);\n        var atHead = end != 'anchor' && cursorEqual(ranges[i].head, cursor);\n        if (atAnchor || atHead) {\n          return i;\n        }\n      }\n      return -1;\n    }\n    function getSelectedAreaRange(cm, vim) {\n      var lastSelection = vim.lastSelection;\n      var getCurrentSelectedAreaRange = function() {\n        var selections = cm.listSelections();\n        var start =  selections[0];\n        var end = selections[selections.length-1];\n        var selectionStart = cursorIsBefore(start.anchor, start.head) ? start.anchor : start.head;\n        var selectionEnd = cursorIsBefore(end.anchor, end.head) ? end.head : end.anchor;\n        return [selectionStart, selectionEnd];\n      };\n      var getLastSelectedAreaRange = function() {\n        var selectionStart = cm.getCursor();\n        var selectionEnd = cm.getCursor();\n        var block = lastSelection.visualBlock;\n        if (block) {\n          var width = block.width;\n          var height = block.height;\n          selectionEnd = new Pos(selectionStart.line + height, selectionStart.ch + width);\n          var selections = [];\n          // selectBlock creates a 'proper' rectangular block.\n          // We do not want that in all cases, so we manually set selections.\n          for (var i = selectionStart.line; i < selectionEnd.line; i++) {\n            var anchor = new Pos(i, selectionStart.ch);\n            var head = new Pos(i, selectionEnd.ch);\n            var range = {anchor: anchor, head: head};\n            selections.push(range);\n          }\n          cm.setSelections(selections);\n        } else {\n          var start = lastSelection.anchorMark.find();\n          var end = lastSelection.headMark.find();\n          var line = end.line - start.line;\n          var ch = end.ch - start.ch;\n          selectionEnd = {line: selectionEnd.line + line, ch: line ? selectionEnd.ch : ch + selectionEnd.ch};\n          if (lastSelection.visualLine) {\n            selectionStart = new Pos(selectionStart.line, 0);\n            selectionEnd = new Pos(selectionEnd.line, lineLength(cm, selectionEnd.line));\n          }\n          cm.setSelection(selectionStart, selectionEnd);\n        }\n        return [selectionStart, selectionEnd];\n      };\n      if (!vim.visualMode) {\n      // In case of replaying the action.\n        return getLastSelectedAreaRange();\n      } else {\n        return getCurrentSelectedAreaRange();\n      }\n    }\n    // Updates the previous selection with the current selection's values. This\n    // should only be called in visual mode.\n    function updateLastSelection(cm, vim) {\n      var anchor = vim.sel.anchor;\n      var head = vim.sel.head;\n      // To accommodate the effect of lastPastedText in the last selection\n      if (vim.lastPastedText) {\n        head = cm.posFromIndex(cm.indexFromPos(anchor) + vim.lastPastedText.length);\n        vim.lastPastedText = null;\n      }\n      vim.lastSelection = {'anchorMark': cm.setBookmark(anchor),\n                           'headMark': cm.setBookmark(head),\n                           'anchor': copyCursor(anchor),\n                           'head': copyCursor(head),\n                           'visualMode': vim.visualMode,\n                           'visualLine': vim.visualLine,\n                           'visualBlock': vim.visualBlock};\n    }\n    function expandSelection(cm, start, end) {\n      var sel = cm.state.vim.sel;\n      var head = sel.head;\n      var anchor = sel.anchor;\n      var tmp;\n      if (cursorIsBefore(end, start)) {\n        tmp = end;\n        end = start;\n        start = tmp;\n      }\n      if (cursorIsBefore(head, anchor)) {\n        head = cursorMin(start, head);\n        anchor = cursorMax(anchor, end);\n      } else {\n        anchor = cursorMin(start, anchor);\n        head = cursorMax(head, end);\n        head = offsetCursor(head, 0, -1);\n        if (head.ch == -1 && head.line != cm.firstLine()) {\n          head = new Pos(head.line - 1, lineLength(cm, head.line - 1));\n        }\n      }\n      return [anchor, head];\n    }\n    /**\n     * Updates the CodeMirror selection to match the provided vim selection.\n     * If no arguments are given, it uses the current vim selection state.\n     */\n    function updateCmSelection(cm, sel, mode) {\n      var vim = cm.state.vim;\n      sel = sel || vim.sel;\n      var mode = mode ||\n        vim.visualLine ? 'line' : vim.visualBlock ? 'block' : 'char';\n      var cmSel = makeCmSelection(cm, sel, mode);\n      cm.setSelections(cmSel.ranges, cmSel.primary);\n    }\n    function makeCmSelection(cm, sel, mode, exclusive) {\n      var head = copyCursor(sel.head);\n      var anchor = copyCursor(sel.anchor);\n      if (mode == 'char') {\n        var headOffset = !exclusive && !cursorIsBefore(sel.head, sel.anchor) ? 1 : 0;\n        var anchorOffset = cursorIsBefore(sel.head, sel.anchor) ? 1 : 0;\n        head = offsetCursor(sel.head, 0, headOffset);\n        anchor = offsetCursor(sel.anchor, 0, anchorOffset);\n        return {\n          ranges: [{anchor: anchor, head: head}],\n          primary: 0\n        };\n      } else if (mode == 'line') {\n        if (!cursorIsBefore(sel.head, sel.anchor)) {\n          anchor.ch = 0;\n\n          var lastLine = cm.lastLine();\n          if (head.line > lastLine) {\n            head.line = lastLine;\n          }\n          head.ch = lineLength(cm, head.line);\n        } else {\n          head.ch = 0;\n          anchor.ch = lineLength(cm, anchor.line);\n        }\n        return {\n          ranges: [{anchor: anchor, head: head}],\n          primary: 0\n        };\n      } else if (mode == 'block') {\n        var top = Math.min(anchor.line, head.line),\n            fromCh = anchor.ch,\n            bottom = Math.max(anchor.line, head.line),\n            toCh = head.ch;\n        if (fromCh < toCh) { toCh += 1; }\n        else { fromCh += 1; }        var height = bottom - top + 1;\n        var primary = head.line == top ? 0 : height - 1;\n        var ranges = [];\n        for (var i = 0; i < height; i++) {\n          ranges.push({\n            anchor: new Pos(top + i, fromCh),\n            head: new Pos(top + i, toCh)\n          });\n        }\n        return {\n          ranges: ranges,\n          primary: primary\n        };\n      }\n    }\n    function getHead(cm) {\n      var cur = cm.getCursor('head');\n      if (cm.getSelection().length == 1) {\n        // Small corner case when only 1 character is selected. The \"real\"\n        // head is the left of head and anchor.\n        cur = cursorMin(cur, cm.getCursor('anchor'));\n      }\n      return cur;\n    }\n\n    /**\n     * If moveHead is set to false, the CodeMirror selection will not be\n     * touched. The caller assumes the responsibility of putting the cursor\n    * in the right place.\n     */\n    function exitVisualMode(cm, moveHead) {\n      var vim = cm.state.vim;\n      if (moveHead !== false) {\n        cm.setCursor(clipCursorToContent(cm, vim.sel.head));\n      }\n      updateLastSelection(cm, vim);\n      vim.visualMode = false;\n      vim.visualLine = false;\n      vim.visualBlock = false;\n      if (!vim.insertMode) CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n    }\n\n    // Remove any trailing newlines from the selection. For\n    // example, with the caret at the start of the last word on the line,\n    // 'dw' should word, but not the newline, while 'w' should advance the\n    // caret to the first character of the next line.\n    function clipToLine(cm, curStart, curEnd) {\n      var selection = cm.getRange(curStart, curEnd);\n      // Only clip if the selection ends with trailing newline + whitespace\n      if (/\\n\\s*$/.test(selection)) {\n        var lines = selection.split('\\n');\n        // We know this is all whitespace.\n        lines.pop();\n\n        // Cases:\n        // 1. Last word is an empty line - do not clip the trailing '\\n'\n        // 2. Last word is not an empty line - clip the trailing '\\n'\n        var line;\n        // Find the line containing the last word, and clip all whitespace up\n        // to it.\n        for (var line = lines.pop(); lines.length > 0 && line && isWhiteSpaceString(line); line = lines.pop()) {\n          curEnd.line--;\n          curEnd.ch = 0;\n        }\n        // If the last word is not an empty line, clip an additional newline\n        if (line) {\n          curEnd.line--;\n          curEnd.ch = lineLength(cm, curEnd.line);\n        } else {\n          curEnd.ch = 0;\n        }\n      }\n    }\n\n    // Expand the selection to line ends.\n    function expandSelectionToLine(_cm, curStart, curEnd) {\n      curStart.ch = 0;\n      curEnd.ch = 0;\n      curEnd.line++;\n    }\n\n    function findFirstNonWhiteSpaceCharacter(text) {\n      if (!text) {\n        return 0;\n      }\n      var firstNonWS = text.search(/\\S/);\n      return firstNonWS == -1 ? text.length : firstNonWS;\n    }\n\n    function expandWordUnderCursor(cm, inclusive, _forward, bigWord, noSymbol) {\n      var cur = getHead(cm);\n      var line = cm.getLine(cur.line);\n      var idx = cur.ch;\n\n      // Seek to first word or non-whitespace character, depending on if\n      // noSymbol is true.\n      var test = noSymbol ? wordCharTest[0] : bigWordCharTest [0];\n      while (!test(line.charAt(idx))) {\n        idx++;\n        if (idx >= line.length) { return null; }\n      }\n\n      if (bigWord) {\n        test = bigWordCharTest[0];\n      } else {\n        test = wordCharTest[0];\n        if (!test(line.charAt(idx))) {\n          test = wordCharTest[1];\n        }\n      }\n\n      var end = idx, start = idx;\n      while (test(line.charAt(end)) && end < line.length) { end++; }\n      while (test(line.charAt(start)) && start >= 0) { start--; }\n      start++;\n\n      if (inclusive) {\n        // If present, include all whitespace after word.\n        // Otherwise, include all whitespace before word, except indentation.\n        var wordEnd = end;\n        while (/\\s/.test(line.charAt(end)) && end < line.length) { end++; }\n        if (wordEnd == end) {\n          var wordStart = start;\n          while (/\\s/.test(line.charAt(start - 1)) && start > 0) { start--; }\n          if (!start) { start = wordStart; }\n        }\n      }\n      return { start: new Pos(cur.line, start), end: new Pos(cur.line, end) };\n    }\n\n    /**\n     * Depends on the following:\n     *\n     * - editor mode should be htmlmixedmode / xml\n     * - mode/xml/xml.js should be loaded\n     * - addon/fold/xml-fold.js should be loaded\n     *\n     * If any of the above requirements are not true, this function noops.\n     *\n     * This is _NOT_ a 100% accurate implementation of vim tag text objects.\n     * The following caveats apply (based off cursory testing, I'm sure there\n     * are other discrepancies):\n     *\n     * - Does not work inside comments:\n     *   ```\n     *   <!-- <div>broken</div> -->\n     *   ```\n     * - Does not work when tags have different cases:\n     *   ```\n     *   <div>broken</DIV>\n     *   ```\n     * - Does not work when cursor is inside a broken tag:\n     *   ```\n     *   <div><brok><en></div>\n     *   ```\n     */\n    function expandTagUnderCursor(cm, head, inclusive) {\n      var cur = head;\n      if (!CodeMirror.findMatchingTag || !CodeMirror.findEnclosingTag) {\n        return { start: cur, end: cur };\n      }\n\n      var tags = CodeMirror.findMatchingTag(cm, head) || CodeMirror.findEnclosingTag(cm, head);\n      if (!tags || !tags.open || !tags.close) {\n        return { start: cur, end: cur };\n      }\n\n      if (inclusive) {\n        return { start: tags.open.from, end: tags.close.to };\n      }\n      return { start: tags.open.to, end: tags.close.from };\n    }\n\n    function recordJumpPosition(cm, oldCur, newCur) {\n      if (!cursorEqual(oldCur, newCur)) {\n        vimGlobalState.jumpList.add(cm, oldCur, newCur);\n      }\n    }\n\n    function recordLastCharacterSearch(increment, args) {\n        vimGlobalState.lastCharacterSearch.increment = increment;\n        vimGlobalState.lastCharacterSearch.forward = args.forward;\n        vimGlobalState.lastCharacterSearch.selectedCharacter = args.selectedCharacter;\n    }\n\n    var symbolToMode = {\n        '(': 'bracket', ')': 'bracket', '{': 'bracket', '}': 'bracket',\n        '[': 'section', ']': 'section',\n        '*': 'comment', '/': 'comment',\n        'm': 'method', 'M': 'method',\n        '#': 'preprocess'\n    };\n    var findSymbolModes = {\n      bracket: {\n        isComplete: function(state) {\n          if (state.nextCh === state.symb) {\n            state.depth++;\n            if (state.depth >= 1)return true;\n          } else if (state.nextCh === state.reverseSymb) {\n            state.depth--;\n          }\n          return false;\n        }\n      },\n      section: {\n        init: function(state) {\n          state.curMoveThrough = true;\n          state.symb = (state.forward ? ']' : '[') === state.symb ? '{' : '}';\n        },\n        isComplete: function(state) {\n          return state.index === 0 && state.nextCh === state.symb;\n        }\n      },\n      comment: {\n        isComplete: function(state) {\n          var found = state.lastCh === '*' && state.nextCh === '/';\n          state.lastCh = state.nextCh;\n          return found;\n        }\n      },\n      // TODO: The original Vim implementation only operates on level 1 and 2.\n      // The current implementation doesn't check for code block level and\n      // therefore it operates on any levels.\n      method: {\n        init: function(state) {\n          state.symb = (state.symb === 'm' ? '{' : '}');\n          state.reverseSymb = state.symb === '{' ? '}' : '{';\n        },\n        isComplete: function(state) {\n          if (state.nextCh === state.symb)return true;\n          return false;\n        }\n      },\n      preprocess: {\n        init: function(state) {\n          state.index = 0;\n        },\n        isComplete: function(state) {\n          if (state.nextCh === '#') {\n            var token = state.lineText.match(/^#(\\w+)/)[1];\n            if (token === 'endif') {\n              if (state.forward && state.depth === 0) {\n                return true;\n              }\n              state.depth++;\n            } else if (token === 'if') {\n              if (!state.forward && state.depth === 0) {\n                return true;\n              }\n              state.depth--;\n            }\n            if (token === 'else' && state.depth === 0)return true;\n          }\n          return false;\n        }\n      }\n    };\n    function findSymbol(cm, repeat, forward, symb) {\n      var cur = copyCursor(cm.getCursor());\n      var increment = forward ? 1 : -1;\n      var endLine = forward ? cm.lineCount() : -1;\n      var curCh = cur.ch;\n      var line = cur.line;\n      var lineText = cm.getLine(line);\n      var state = {\n        lineText: lineText,\n        nextCh: lineText.charAt(curCh),\n        lastCh: null,\n        index: curCh,\n        symb: symb,\n        reverseSymb: (forward ?  { ')': '(', '}': '{' } : { '(': ')', '{': '}' })[symb],\n        forward: forward,\n        depth: 0,\n        curMoveThrough: false\n      };\n      var mode = symbolToMode[symb];\n      if (!mode)return cur;\n      var init = findSymbolModes[mode].init;\n      var isComplete = findSymbolModes[mode].isComplete;\n      if (init) { init(state); }\n      while (line !== endLine && repeat) {\n        state.index += increment;\n        state.nextCh = state.lineText.charAt(state.index);\n        if (!state.nextCh) {\n          line += increment;\n          state.lineText = cm.getLine(line) || '';\n          if (increment > 0) {\n            state.index = 0;\n          } else {\n            var lineLen = state.lineText.length;\n            state.index = (lineLen > 0) ? (lineLen-1) : 0;\n          }\n          state.nextCh = state.lineText.charAt(state.index);\n        }\n        if (isComplete(state)) {\n          cur.line = line;\n          cur.ch = state.index;\n          repeat--;\n        }\n      }\n      if (state.nextCh || state.curMoveThrough) {\n        return new Pos(line, state.index);\n      }\n      return cur;\n    }\n\n    /*\n     * Returns the boundaries of the next word. If the cursor in the middle of\n     * the word, then returns the boundaries of the current word, starting at\n     * the cursor. If the cursor is at the start/end of a word, and we are going\n     * forward/backward, respectively, find the boundaries of the next word.\n     *\n     * @param {CodeMirror} cm CodeMirror object.\n     * @param {Cursor} cur The cursor position.\n     * @param {boolean} forward True to search forward. False to search\n     *     backward.\n     * @param {boolean} bigWord True if punctuation count as part of the word.\n     *     False if only [a-zA-Z0-9] characters count as part of the word.\n     * @param {boolean} emptyLineIsWord True if empty lines should be treated\n     *     as words.\n     * @return {Object{from:number, to:number, line: number}} The boundaries of\n     *     the word, or null if there are no more words.\n     */\n    function findWord(cm, cur, forward, bigWord, emptyLineIsWord) {\n      var lineNum = cur.line;\n      var pos = cur.ch;\n      var line = cm.getLine(lineNum);\n      var dir = forward ? 1 : -1;\n      var charTests = bigWord ? bigWordCharTest: wordCharTest;\n\n      if (emptyLineIsWord && line == '') {\n        lineNum += dir;\n        line = cm.getLine(lineNum);\n        if (!isLine(cm, lineNum)) {\n          return null;\n        }\n        pos = (forward) ? 0 : line.length;\n      }\n\n      while (true) {\n        if (emptyLineIsWord && line == '') {\n          return { from: 0, to: 0, line: lineNum };\n        }\n        var stop = (dir > 0) ? line.length : -1;\n        var wordStart = stop, wordEnd = stop;\n        // Find bounds of next word.\n        while (pos != stop) {\n          var foundWord = false;\n          for (var i = 0; i < charTests.length && !foundWord; ++i) {\n            if (charTests[i](line.charAt(pos))) {\n              wordStart = pos;\n              // Advance to end of word.\n              while (pos != stop && charTests[i](line.charAt(pos))) {\n                pos += dir;\n              }\n              wordEnd = pos;\n              foundWord = wordStart != wordEnd;\n              if (wordStart == cur.ch && lineNum == cur.line &&\n                  wordEnd == wordStart + dir) {\n                // We started at the end of a word. Find the next one.\n                continue;\n              } else {\n                return {\n                  from: Math.min(wordStart, wordEnd + 1),\n                  to: Math.max(wordStart, wordEnd),\n                  line: lineNum };\n              }\n            }\n          }\n          if (!foundWord) {\n            pos += dir;\n          }\n        }\n        // Advance to next/prev line.\n        lineNum += dir;\n        if (!isLine(cm, lineNum)) {\n          return null;\n        }\n        line = cm.getLine(lineNum);\n        pos = (dir > 0) ? 0 : line.length;\n      }\n    }\n\n    /**\n     * @param {CodeMirror} cm CodeMirror object.\n     * @param {Pos} cur The position to start from.\n     * @param {int} repeat Number of words to move past.\n     * @param {boolean} forward True to search forward. False to search\n     *     backward.\n     * @param {boolean} wordEnd True to move to end of word. False to move to\n     *     beginning of word.\n     * @param {boolean} bigWord True if punctuation count as part of the word.\n     *     False if only alphabet characters count as part of the word.\n     * @return {Cursor} The position the cursor should move to.\n     */\n    function moveToWord(cm, cur, repeat, forward, wordEnd, bigWord) {\n      var curStart = copyCursor(cur);\n      var words = [];\n      if (forward && !wordEnd || !forward && wordEnd) {\n        repeat++;\n      }\n      // For 'e', empty lines are not considered words, go figure.\n      var emptyLineIsWord = !(forward && wordEnd);\n      for (var i = 0; i < repeat; i++) {\n        var word = findWord(cm, cur, forward, bigWord, emptyLineIsWord);\n        if (!word) {\n          var eodCh = lineLength(cm, cm.lastLine());\n          words.push(forward\n              ? {line: cm.lastLine(), from: eodCh, to: eodCh}\n              : {line: 0, from: 0, to: 0});\n          break;\n        }\n        words.push(word);\n        cur = new Pos(word.line, forward ? (word.to - 1) : word.from);\n      }\n      var shortCircuit = words.length != repeat;\n      var firstWord = words[0];\n      var lastWord = words.pop();\n      if (forward && !wordEnd) {\n        // w\n        if (!shortCircuit && (firstWord.from != curStart.ch || firstWord.line != curStart.line)) {\n          // We did not start in the middle of a word. Discard the extra word at the end.\n          lastWord = words.pop();\n        }\n        return new Pos(lastWord.line, lastWord.from);\n      } else if (forward && wordEnd) {\n        return new Pos(lastWord.line, lastWord.to - 1);\n      } else if (!forward && wordEnd) {\n        // ge\n        if (!shortCircuit && (firstWord.to != curStart.ch || firstWord.line != curStart.line)) {\n          // We did not start in the middle of a word. Discard the extra word at the end.\n          lastWord = words.pop();\n        }\n        return new Pos(lastWord.line, lastWord.to);\n      } else {\n        // b\n        return new Pos(lastWord.line, lastWord.from);\n      }\n    }\n\n    function moveToEol(cm, head, motionArgs, vim, keepHPos) {\n      var cur = head;\n      var retval= new Pos(cur.line + motionArgs.repeat - 1, Infinity);\n      var end=cm.clipPos(retval);\n      end.ch--;\n      if (!keepHPos) {\n        vim.lastHPos = Infinity;\n        vim.lastHSPos = cm.charCoords(end,'div').left;\n      }\n      return retval;\n    }\n\n    function moveToCharacter(cm, repeat, forward, character) {\n      var cur = cm.getCursor();\n      var start = cur.ch;\n      var idx;\n      for (var i = 0; i < repeat; i ++) {\n        var line = cm.getLine(cur.line);\n        idx = charIdxInLine(start, line, character, forward, true);\n        if (idx == -1) {\n          return null;\n        }\n        start = idx;\n      }\n      return new Pos(cm.getCursor().line, idx);\n    }\n\n    function moveToColumn(cm, repeat) {\n      // repeat is always >= 1, so repeat - 1 always corresponds\n      // to the column we want to go to.\n      var line = cm.getCursor().line;\n      return clipCursorToContent(cm, new Pos(line, repeat - 1));\n    }\n\n    function updateMark(cm, vim, markName, pos) {\n      if (!inArray(markName, validMarks)) {\n        return;\n      }\n      if (vim.marks[markName]) {\n        vim.marks[markName].clear();\n      }\n      vim.marks[markName] = cm.setBookmark(pos);\n    }\n\n    function charIdxInLine(start, line, character, forward, includeChar) {\n      // Search for char in line.\n      // motion_options: {forward, includeChar}\n      // If includeChar = true, include it too.\n      // If forward = true, search forward, else search backwards.\n      // If char is not found on this line, do nothing\n      var idx;\n      if (forward) {\n        idx = line.indexOf(character, start + 1);\n        if (idx != -1 && !includeChar) {\n          idx -= 1;\n        }\n      } else {\n        idx = line.lastIndexOf(character, start - 1);\n        if (idx != -1 && !includeChar) {\n          idx += 1;\n        }\n      }\n      return idx;\n    }\n\n    function findParagraph(cm, head, repeat, dir, inclusive) {\n      var line = head.line;\n      var min = cm.firstLine();\n      var max = cm.lastLine();\n      var start, end, i = line;\n      function isEmpty(i) { return !cm.getLine(i); }\n      function isBoundary(i, dir, any) {\n        if (any) { return isEmpty(i) != isEmpty(i + dir); }\n        return !isEmpty(i) && isEmpty(i + dir);\n      }\n      if (dir) {\n        while (min <= i && i <= max && repeat > 0) {\n          if (isBoundary(i, dir)) { repeat--; }\n          i += dir;\n        }\n        return new Pos(i, 0);\n      }\n\n      var vim = cm.state.vim;\n      if (vim.visualLine && isBoundary(line, 1, true)) {\n        var anchor = vim.sel.anchor;\n        if (isBoundary(anchor.line, -1, true)) {\n          if (!inclusive || anchor.line != line) {\n            line += 1;\n          }\n        }\n      }\n      var startState = isEmpty(line);\n      for (i = line; i <= max && repeat; i++) {\n        if (isBoundary(i, 1, true)) {\n          if (!inclusive || isEmpty(i) != startState) {\n            repeat--;\n          }\n        }\n      }\n      end = new Pos(i, 0);\n      // select boundary before paragraph for the last one\n      if (i > max && !startState) { startState = true; }\n      else { inclusive = false; }\n      for (i = line; i > min; i--) {\n        if (!inclusive || isEmpty(i) == startState || i == line) {\n          if (isBoundary(i, -1, true)) { break; }\n        }\n      }\n      start = new Pos(i, 0);\n      return { start: start, end: end };\n    }\n\n    /**\n     * Based on {@link findSentence}. The internal functions have the same names,\n     * but their behaviour is different. findSentence() crosses line breaks and \n     * is used for jumping to sentence beginnings before or after the current cursor position, \n     * whereas getSentence() is for getting the beginning or end of the sentence \n     * at the current cursor position, either including (a) or excluding (i) whitespace.\n     */\n    function getSentence(cm, cur, repeat, dir, inclusive /*includes whitespace*/) {\n\n      /*\n        Takes an index object\n        {\n          line: the line string,\n          ln: line number,\n          pos: index in line,\n          dir: direction of traversal (-1 or 1)\n        }\n        and modifies the pos member to represent the\n        next valid position or sets the line to null if there are\n        no more valid positions.\n       */\n      function nextChar(curr) {\n        if (curr.pos + curr.dir < 0 || curr.pos + curr.dir >= curr.line.length) {\n          curr.line = null;\n        }\n        else {\n          curr.pos += curr.dir;\n        }\n      }\n      /*\n        Performs one iteration of traversal in forward direction\n        Returns an index object of the sentence end\n       */\n      function forward(cm, ln, pos, dir) {\n        var line = cm.getLine(ln);\n\n        var curr = {\n          line: line,\n          ln: ln,\n          pos: pos,\n          dir: dir,\n        };\n\n        if (curr.line === \"\") {\n          return { ln: curr.ln, pos: curr.pos };\n        }\n\n        var lastSentencePos = curr.pos;\n\n        // Move one step to skip character we start on\n        nextChar(curr);\n\n        while (curr.line !== null) {\n          lastSentencePos = curr.pos;\n          if (isEndOfSentenceSymbol(curr.line[curr.pos])) {\n            if (!inclusive) {\n              return { ln: curr.ln, pos: curr.pos + 1 };\n            } \n            else {\n              nextChar(curr);\n              while (curr.line !== null ) {\n                if (isWhiteSpaceString(curr.line[curr.pos])) {\n                  lastSentencePos = curr.pos;\n                  nextChar(curr);\n                } \n                else {\n                  break;\n                }\n              }\n              return { ln: curr.ln, pos: lastSentencePos + 1 };\n            }\n          }\n          nextChar(curr);\n        }\n        return { ln: curr.ln, pos: lastSentencePos + 1 };\n      }\n\n      /*\n        Performs one iteration of traversal in reverse direction\n        Returns an index object of the sentence start\n       */\n      function reverse(cm, ln, pos, dir) {\n        var line = cm.getLine(ln);\n\n        var curr = {\n          line: line,\n          ln: ln,\n          pos: pos,\n          dir: dir,\n        };\n\n        if (curr.line === \"\") {\n          return { ln: curr.ln, pos: curr.pos };\n        }\n\n        var lastSentencePos = curr.pos;\n\n        // Move one step to skip character we start on\n        nextChar(curr);\n\n        while (curr.line !== null) {\n          if (!isWhiteSpaceString(curr.line[curr.pos]) && !isEndOfSentenceSymbol(curr.line[curr.pos])) {\n            lastSentencePos = curr.pos;\n          }\n\n          else if (isEndOfSentenceSymbol(curr.line[curr.pos]) ) {\n            if (!inclusive) {\n              return { ln: curr.ln, pos: lastSentencePos };\n            } \n            else {\n              if (isWhiteSpaceString(curr.line[curr.pos + 1])) {\n                return { ln: curr.ln, pos: curr.pos + 1 };\n              } \n              else {\n                return { ln: curr.ln, pos: lastSentencePos };\n              }\n            }\n          }\n\n          nextChar(curr);\n        }\n        curr.line = line;\n        if (inclusive && isWhiteSpaceString(curr.line[curr.pos])) {\n          return { ln: curr.ln, pos: curr.pos };\n        } \n        else {\n          return { ln: curr.ln, pos: lastSentencePos };\n        }\n\n      }\n\n      var curr_index = {\n        ln: cur.line,\n        pos: cur.ch,\n      };\n\n      while (repeat > 0) {\n        if (dir < 0) {\n          curr_index = reverse(cm, curr_index.ln, curr_index.pos, dir);\n        }\n        else {\n          curr_index = forward(cm, curr_index.ln, curr_index.pos, dir);\n        }\n        repeat--;\n      }\n\n      return new Pos(curr_index.ln, curr_index.pos);\n    }\n\n    function findSentence(cm, cur, repeat, dir) {\n\n       /*\n         Takes an index object\n         {\n           line: the line string,\n           ln: line number,\n           pos: index in line,\n           dir: direction of traversal (-1 or 1)\n         }\n         and modifies the line, ln, and pos members to represent the\n         next valid position or sets them to null if there are\n         no more valid positions.\n       */\n      function nextChar(cm, idx) {\n        if (idx.pos + idx.dir < 0 || idx.pos + idx.dir >= idx.line.length) {\n          idx.ln += idx.dir;\n          if (!isLine(cm, idx.ln)) {\n            idx.line = null;\n            idx.ln = null;\n            idx.pos = null;\n            return;\n          }\n          idx.line = cm.getLine(idx.ln);\n          idx.pos = (idx.dir > 0) ? 0 : idx.line.length - 1;\n        }\n        else {\n          idx.pos += idx.dir;\n        }\n      }\n\n      /*\n        Performs one iteration of traversal in forward direction\n        Returns an index object of the new location\n       */\n      function forward(cm, ln, pos, dir) {\n        var line = cm.getLine(ln);\n        var stop = (line === \"\");\n\n        var curr = {\n          line: line,\n          ln: ln,\n          pos: pos,\n          dir: dir,\n        };\n\n        var last_valid = {\n          ln: curr.ln,\n          pos: curr.pos,\n        };\n\n        var skip_empty_lines = (curr.line === \"\");\n\n        // Move one step to skip character we start on\n        nextChar(cm, curr);\n\n        while (curr.line !== null) {\n          last_valid.ln = curr.ln;\n          last_valid.pos = curr.pos;\n\n          if (curr.line === \"\" && !skip_empty_lines) {\n            return { ln: curr.ln, pos: curr.pos, };\n          }\n          else if (stop && curr.line !== \"\" && !isWhiteSpaceString(curr.line[curr.pos])) {\n            return { ln: curr.ln, pos: curr.pos, };\n          }\n          else if (isEndOfSentenceSymbol(curr.line[curr.pos])\n            && !stop\n            && (curr.pos === curr.line.length - 1\n              || isWhiteSpaceString(curr.line[curr.pos + 1]))) {\n            stop = true;\n          }\n\n          nextChar(cm, curr);\n        }\n\n        /*\n          Set the position to the last non whitespace character on the last\n          valid line in the case that we reach the end of the document.\n        */\n        var line = cm.getLine(last_valid.ln);\n        last_valid.pos = 0;\n        for(var i = line.length - 1; i >= 0; --i) {\n          if (!isWhiteSpaceString(line[i])) {\n            last_valid.pos = i;\n            break;\n          }\n        }\n\n        return last_valid;\n\n      }\n\n      /*\n        Performs one iteration of traversal in reverse direction\n        Returns an index object of the new location\n       */\n      function reverse(cm, ln, pos, dir) {\n        var line = cm.getLine(ln);\n\n        var curr = {\n          line: line,\n          ln: ln,\n          pos: pos,\n          dir: dir,\n        };\n\n        var last_valid = {\n          ln: curr.ln,\n          pos: null,\n        };\n\n        var skip_empty_lines = (curr.line === \"\");\n\n        // Move one step to skip character we start on\n        nextChar(cm, curr);\n\n        while (curr.line !== null) {\n\n          if (curr.line === \"\" && !skip_empty_lines) {\n            if (last_valid.pos !== null) {\n              return last_valid;\n            }\n            else {\n              return { ln: curr.ln, pos: curr.pos };\n            }\n          }\n          else if (isEndOfSentenceSymbol(curr.line[curr.pos])\n              && last_valid.pos !== null\n              && !(curr.ln === last_valid.ln && curr.pos + 1 === last_valid.pos)) {\n            return last_valid;\n          }\n          else if (curr.line !== \"\" && !isWhiteSpaceString(curr.line[curr.pos])) {\n            skip_empty_lines = false;\n            last_valid = { ln: curr.ln, pos: curr.pos };\n          }\n\n          nextChar(cm, curr);\n        }\n\n        /*\n          Set the position to the first non whitespace character on the last\n          valid line in the case that we reach the beginning of the document.\n        */\n        var line = cm.getLine(last_valid.ln);\n        last_valid.pos = 0;\n        for(var i = 0; i < line.length; ++i) {\n          if (!isWhiteSpaceString(line[i])) {\n            last_valid.pos = i;\n            break;\n          }\n        }\n        return last_valid;\n      }\n\n      var curr_index = {\n        ln: cur.line,\n        pos: cur.ch,\n      };\n\n      while (repeat > 0) {\n        if (dir < 0) {\n          curr_index = reverse(cm, curr_index.ln, curr_index.pos, dir);\n        }\n        else {\n          curr_index = forward(cm, curr_index.ln, curr_index.pos, dir);\n        }\n        repeat--;\n      }\n\n      return new Pos(curr_index.ln, curr_index.pos);\n    }\n\n    // TODO: perhaps this finagling of start and end positions belongs\n    // in codemirror/replaceRange?\n    function selectCompanionObject(cm, head, symb, inclusive) {\n      var cur = head, start, end;\n\n      var bracketRegexp = ({\n        '(': /[()]/, ')': /[()]/,\n        '[': /[[\\]]/, ']': /[[\\]]/,\n        '{': /[{}]/, '}': /[{}]/,\n        '<': /[<>]/, '>': /[<>]/})[symb];\n      var openSym = ({\n        '(': '(', ')': '(',\n        '[': '[', ']': '[',\n        '{': '{', '}': '{',\n        '<': '<', '>': '<'})[symb];\n      var curChar = cm.getLine(cur.line).charAt(cur.ch);\n      // Due to the behavior of scanForBracket, we need to add an offset if the\n      // cursor is on a matching open bracket.\n      var offset = curChar === openSym ? 1 : 0;\n\n      start = cm.scanForBracket(new Pos(cur.line, cur.ch + offset), -1, undefined, {'bracketRegex': bracketRegexp});\n      end = cm.scanForBracket(new Pos(cur.line, cur.ch + offset), 1, undefined, {'bracketRegex': bracketRegexp});\n\n      if (!start || !end) {\n        return { start: cur, end: cur };\n      }\n\n      start = start.pos;\n      end = end.pos;\n\n      if ((start.line == end.line && start.ch > end.ch)\n          || (start.line > end.line)) {\n        var tmp = start;\n        start = end;\n        end = tmp;\n      }\n\n      if (inclusive) {\n        end.ch += 1;\n      } else {\n        start.ch += 1;\n      }\n\n      return { start: start, end: end };\n    }\n\n    // Takes in a symbol and a cursor and tries to simulate text objects that\n    // have identical opening and closing symbols\n    // TODO support across multiple lines\n    function findBeginningAndEnd(cm, head, symb, inclusive) {\n      var cur = copyCursor(head);\n      var line = cm.getLine(cur.line);\n      var chars = line.split('');\n      var start, end, i, len;\n      var firstIndex = chars.indexOf(symb);\n\n      // the decision tree is to always look backwards for the beginning first,\n      // but if the cursor is in front of the first instance of the symb,\n      // then move the cursor forward\n      if (cur.ch < firstIndex) {\n        cur.ch = firstIndex;\n        // Why is this line even here???\n        // cm.setCursor(cur.line, firstIndex+1);\n      }\n      // otherwise if the cursor is currently on the closing symbol\n      else if (firstIndex < cur.ch && chars[cur.ch] == symb) {\n        end = cur.ch; // assign end to the current cursor\n        --cur.ch; // make sure to look backwards\n      }\n\n      // if we're currently on the symbol, we've got a start\n      if (chars[cur.ch] == symb && !end) {\n        start = cur.ch + 1; // assign start to ahead of the cursor\n      } else {\n        // go backwards to find the start\n        for (i = cur.ch; i > -1 && !start; i--) {\n          if (chars[i] == symb) {\n            start = i + 1;\n          }\n        }\n      }\n\n      // look forwards for the end symbol\n      if (start && !end) {\n        for (i = start, len = chars.length; i < len && !end; i++) {\n          if (chars[i] == symb) {\n            end = i;\n          }\n        }\n      }\n\n      // nothing found\n      if (!start || !end) {\n        return { start: cur, end: cur };\n      }\n\n      // include the symbols\n      if (inclusive) {\n        --start; ++end;\n      }\n\n      return {\n        start: new Pos(cur.line, start),\n        end: new Pos(cur.line, end)\n      };\n    }\n\n    // Search functions\n    defineOption('pcre', true, 'boolean');\n    function SearchState() {}\n    SearchState.prototype = {\n      getQuery: function() {\n        return vimGlobalState.query;\n      },\n      setQuery: function(query) {\n        vimGlobalState.query = query;\n      },\n      getOverlay: function() {\n        return this.searchOverlay;\n      },\n      setOverlay: function(overlay) {\n        this.searchOverlay = overlay;\n      },\n      isReversed: function() {\n        return vimGlobalState.isReversed;\n      },\n      setReversed: function(reversed) {\n        vimGlobalState.isReversed = reversed;\n      },\n      getScrollbarAnnotate: function() {\n        return this.annotate;\n      },\n      setScrollbarAnnotate: function(annotate) {\n        this.annotate = annotate;\n      }\n    };\n    function getSearchState(cm) {\n      var vim = cm.state.vim;\n      return vim.searchState_ || (vim.searchState_ = new SearchState());\n    }\n    function splitBySlash(argString) {\n      return splitBySeparator(argString, '/');\n    }\n\n    function findUnescapedSlashes(argString) {\n      return findUnescapedSeparators(argString, '/');\n    }\n\n    function splitBySeparator(argString, separator) {\n      var slashes = findUnescapedSeparators(argString, separator) || [];\n      if (!slashes.length) return [];\n      var tokens = [];\n      // in case of strings like foo/bar\n      if (slashes[0] !== 0) return;\n      for (var i = 0; i < slashes.length; i++) {\n        if (typeof slashes[i] == 'number')\n          tokens.push(argString.substring(slashes[i] + 1, slashes[i+1]));\n      }\n      return tokens;\n    }\n\n    function findUnescapedSeparators(str, separator) {\n      if (!separator)\n        separator = '/';\n\n      var escapeNextChar = false;\n      var slashes = [];\n      for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (!escapeNextChar && c == separator) {\n          slashes.push(i);\n        }\n        escapeNextChar = !escapeNextChar && (c == '\\\\');\n      }\n      return slashes;\n    }\n\n    // Translates a search string from ex (vim) syntax into javascript form.\n    function translateRegex(str) {\n      // When these match, add a '\\' if unescaped or remove one if escaped.\n      var specials = '|(){';\n      // Remove, but never add, a '\\' for these.\n      var unescape = '}';\n      var escapeNextChar = false;\n      var out = [];\n      for (var i = -1; i < str.length; i++) {\n        var c = str.charAt(i) || '';\n        var n = str.charAt(i+1) || '';\n        var specialComesNext = (n && specials.indexOf(n) != -1);\n        if (escapeNextChar) {\n          if (c !== '\\\\' || !specialComesNext) {\n            out.push(c);\n          }\n          escapeNextChar = false;\n        } else {\n          if (c === '\\\\') {\n            escapeNextChar = true;\n            // Treat the unescape list as special for removing, but not adding '\\'.\n            if (n && unescape.indexOf(n) != -1) {\n              specialComesNext = true;\n            }\n            // Not passing this test means removing a '\\'.\n            if (!specialComesNext || n === '\\\\') {\n              out.push(c);\n            }\n          } else {\n            out.push(c);\n            if (specialComesNext && n !== '\\\\') {\n              out.push('\\\\');\n            }\n          }\n        }\n      }\n      return out.join('');\n    }\n\n    // Translates the replace part of a search and replace from ex (vim) syntax into\n    // javascript form.  Similar to translateRegex, but additionally fixes back references\n    // (translates '\\[0..9]' to '$[0..9]') and follows different rules for escaping '$'.\n    var charUnescapes = {'\\\\n': '\\n', '\\\\r': '\\r', '\\\\t': '\\t'};\n    function translateRegexReplace(str) {\n      var escapeNextChar = false;\n      var out = [];\n      for (var i = -1; i < str.length; i++) {\n        var c = str.charAt(i) || '';\n        var n = str.charAt(i+1) || '';\n        if (charUnescapes[c + n]) {\n          out.push(charUnescapes[c+n]);\n          i++;\n        } else if (escapeNextChar) {\n          // At any point in the loop, escapeNextChar is true if the previous\n          // character was a '\\' and was not escaped.\n          out.push(c);\n          escapeNextChar = false;\n        } else {\n          if (c === '\\\\') {\n            escapeNextChar = true;\n            if ((isNumber(n) || n === '$')) {\n              out.push('$');\n            } else if (n !== '/' && n !== '\\\\') {\n              out.push('\\\\');\n            }\n          } else {\n            if (c === '$') {\n              out.push('$');\n            }\n            out.push(c);\n            if (n === '/') {\n              out.push('\\\\');\n            }\n          }\n        }\n      }\n      return out.join('');\n    }\n\n    // Unescape \\ and / in the replace part, for PCRE mode.\n    var unescapes = {'\\\\/': '/', '\\\\\\\\': '\\\\', '\\\\n': '\\n', '\\\\r': '\\r', '\\\\t': '\\t', '\\\\&':'&'};\n    function unescapeRegexReplace(str) {\n      var stream = new CodeMirror.StringStream(str);\n      var output = [];\n      while (!stream.eol()) {\n        // Search for \\.\n        while (stream.peek() && stream.peek() != '\\\\') {\n          output.push(stream.next());\n        }\n        var matched = false;\n        for (var matcher in unescapes) {\n          if (stream.match(matcher, true)) {\n            matched = true;\n            output.push(unescapes[matcher]);\n            break;\n          }\n        }\n        if (!matched) {\n          // Don't change anything\n          output.push(stream.next());\n        }\n      }\n      return output.join('');\n    }\n\n    /**\n     * Extract the regular expression from the query and return a Regexp object.\n     * Returns null if the query is blank.\n     * If ignoreCase is passed in, the Regexp object will have the 'i' flag set.\n     * If smartCase is passed in, and the query contains upper case letters,\n     *   then ignoreCase is overridden, and the 'i' flag will not be set.\n     * If the query contains the /i in the flag part of the regular expression,\n     *   then both ignoreCase and smartCase are ignored, and 'i' will be passed\n     *   through to the Regex object.\n     */\n    function parseQuery(query, ignoreCase, smartCase) {\n      // First update the last search register\n      var lastSearchRegister = vimGlobalState.registerController.getRegister('/');\n      lastSearchRegister.setText(query);\n      // Check if the query is already a regex.\n      if (query instanceof RegExp) { return query; }\n      // First try to extract regex + flags from the input. If no flags found,\n      // extract just the regex. IE does not accept flags directly defined in\n      // the regex string in the form /regex/flags\n      var slashes = findUnescapedSlashes(query);\n      var regexPart;\n      var forceIgnoreCase;\n      if (!slashes.length) {\n        // Query looks like 'regexp'\n        regexPart = query;\n      } else {\n        // Query looks like 'regexp/...'\n        regexPart = query.substring(0, slashes[0]);\n        var flagsPart = query.substring(slashes[0]);\n        forceIgnoreCase = (flagsPart.indexOf('i') != -1);\n      }\n      if (!regexPart) {\n        return null;\n      }\n      if (!getOption('pcre')) {\n        regexPart = translateRegex(regexPart);\n      }\n      if (smartCase) {\n        ignoreCase = (/^[^A-Z]*$/).test(regexPart);\n      }\n      var regexp = new RegExp(regexPart,\n          (ignoreCase || forceIgnoreCase) ? 'im' : 'm');\n      return regexp;\n    }\n\n    /**\n     * dom - Document Object Manipulator\n     * Usage:\n     *   dom('<tag>'|<node>[, ...{<attributes>|<$styles>}|<child-node>|'<text>'])\n     * Examples:\n     *   dom('div', {id:'xyz'}, dom('p', 'CM rocks!', {$color:'red'}))\n     *   dom(document.head, dom('script', 'alert(\"hello!\")'))\n     * Not supported:\n     *   dom('p', ['arrays are objects'], Error('objects specify attributes'))\n     */\n    function dom(n) {\n      if (typeof n === 'string') n = document.createElement(n);\n      for (var a, i = 1; i < arguments.length; i++) {\n        if (!(a = arguments[i])) continue;\n        if (typeof a !== 'object') a = document.createTextNode(a);\n        if (a.nodeType) n.appendChild(a);\n        else for (var key in a) {\n          if (!Object.prototype.hasOwnProperty.call(a, key)) continue;\n          if (key[0] === '$') n.style[key.slice(1)] = a[key];\n          else n.setAttribute(key, a[key]);\n        }\n      }\n      return n;\n    }\n\n    function showConfirm(cm, template) {\n      var pre = dom('div', {$color: 'red', $whiteSpace: 'pre', class: 'cm-vim-message'}, template);\n      if (cm.openNotification) {\n        cm.openNotification(pre, {bottom: true, duration: 5000});\n      } else {\n        alert(pre.innerText);\n      }\n    }\n\n    function makePrompt(prefix, desc) {\n      return dom(document.createDocumentFragment(),\n               dom('span', {$fontFamily: 'monospace', $whiteSpace: 'pre'},\n                 prefix,\n                 dom('input', {type: 'text', autocorrect: 'off',\n                               autocapitalize: 'off', spellcheck: 'false'})),\n               desc && dom('span', {$color: '#888'}, desc));\n    }\n\n    function showPrompt(cm, options) {\n      var template = makePrompt(options.prefix, options.desc);\n      if (cm.openDialog) {\n        cm.openDialog(template, options.onClose, {\n          onKeyDown: options.onKeyDown, onKeyUp: options.onKeyUp,\n          bottom: true, selectValueOnOpen: false, value: options.value\n        });\n      }\n      else {\n        var shortText = '';\n        if (typeof options.prefix != \"string\" && options.prefix) shortText += options.prefix.textContent;\n        if (options.desc) shortText += \" \" + options.desc;\n        options.onClose(prompt(shortText, ''));\n      }\n    }\n\n    function regexEqual(r1, r2) {\n      if (r1 instanceof RegExp && r2 instanceof RegExp) {\n          var props = ['global', 'multiline', 'ignoreCase', 'source'];\n          for (var i = 0; i < props.length; i++) {\n              var prop = props[i];\n              if (r1[prop] !== r2[prop]) {\n                  return false;\n              }\n          }\n          return true;\n      }\n      return false;\n    }\n    // Returns true if the query is valid.\n    function updateSearchQuery(cm, rawQuery, ignoreCase, smartCase) {\n      if (!rawQuery) {\n        return;\n      }\n      var state = getSearchState(cm);\n      var query = parseQuery(rawQuery, !!ignoreCase, !!smartCase);\n      if (!query) {\n        return;\n      }\n      highlightSearchMatches(cm, query);\n      if (regexEqual(query, state.getQuery())) {\n        return query;\n      }\n      state.setQuery(query);\n      return query;\n    }\n    function searchOverlay(query) {\n      if (query.source.charAt(0) == '^') {\n        var matchSol = true;\n      }\n      return {\n        token: function(stream) {\n          if (matchSol && !stream.sol()) {\n            stream.skipToEnd();\n            return;\n          }\n          var match = stream.match(query, false);\n          if (match) {\n            if (match[0].length == 0) {\n              // Matched empty string, skip to next.\n              stream.next();\n              return 'searching';\n            }\n            if (!stream.sol()) {\n              // Backtrack 1 to match \\b\n              stream.backUp(1);\n              if (!query.exec(stream.next() + match[0])) {\n                stream.next();\n                return null;\n              }\n            }\n            stream.match(query);\n            return 'searching';\n          }\n          while (!stream.eol()) {\n            stream.next();\n            if (stream.match(query, false)) break;\n          }\n        },\n        query: query\n      };\n    }\n    var highlightTimeout = 0;\n    function highlightSearchMatches(cm, query) {\n      clearTimeout(highlightTimeout);\n      highlightTimeout = setTimeout(function() {\n        if (!cm.state.vim) return;\n        var searchState = getSearchState(cm);\n        var overlay = searchState.getOverlay();\n        if (!overlay || query != overlay.query) {\n          if (overlay) {\n            cm.removeOverlay(overlay);\n          }\n          overlay = searchOverlay(query);\n          cm.addOverlay(overlay);\n          if (cm.showMatchesOnScrollbar) {\n            if (searchState.getScrollbarAnnotate()) {\n              searchState.getScrollbarAnnotate().clear();\n            }\n            searchState.setScrollbarAnnotate(cm.showMatchesOnScrollbar(query));\n          }\n          searchState.setOverlay(overlay);\n        }\n      }, 50);\n    }\n    function findNext(cm, prev, query, repeat) {\n      if (repeat === undefined) { repeat = 1; }\n      return cm.operation(function() {\n        var pos = cm.getCursor();\n        var cursor = cm.getSearchCursor(query, pos);\n        for (var i = 0; i < repeat; i++) {\n          var found = cursor.find(prev);\n          if (i == 0 && found && cursorEqual(cursor.from(), pos)) {\n            var lastEndPos = prev ? cursor.from() : cursor.to();\n            found = cursor.find(prev);\n            if (found && !found[0] && cursorEqual(cursor.from(), lastEndPos)) {\n              if (cm.getLine(lastEndPos.line).length == lastEndPos.ch)\n                found = cursor.find(prev);\n            }\n          }\n          if (!found) {\n            // SearchCursor may have returned null because it hit EOF, wrap\n            // around and try again.\n            cursor = cm.getSearchCursor(query,\n                (prev) ? new Pos(cm.lastLine()) : new Pos(cm.firstLine(), 0) );\n            if (!cursor.find(prev)) {\n              return;\n            }\n          }\n        }\n        return cursor.from();\n      });\n    }\n    /**\n     * Pretty much the same as `findNext`, except for the following differences:\n     *\n     * 1. Before starting the search, move to the previous search. This way if our cursor is\n     * already inside a match, we should return the current match.\n     * 2. Rather than only returning the cursor's from, we return the cursor's from and to as a tuple.\n     */\n    function findNextFromAndToInclusive(cm, prev, query, repeat, vim) {\n      if (repeat === undefined) { repeat = 1; }\n      return cm.operation(function() {\n        var pos = cm.getCursor();\n        var cursor = cm.getSearchCursor(query, pos);\n\n        // Go back one result to ensure that if the cursor is currently a match, we keep it.\n        var found = cursor.find(!prev);\n\n        // If we haven't moved, go back one more (similar to if i==0 logic in findNext).\n        if (!vim.visualMode && found && cursorEqual(cursor.from(), pos)) {\n          cursor.find(!prev);\n        }\n\n        for (var i = 0; i < repeat; i++) {\n          found = cursor.find(prev);\n          if (!found) {\n            // SearchCursor may have returned null because it hit EOF, wrap\n            // around and try again.\n            cursor = cm.getSearchCursor(query,\n                (prev) ? new Pos(cm.lastLine()) : new Pos(cm.firstLine(), 0) );\n            if (!cursor.find(prev)) {\n              return;\n            }\n          }\n        }\n        return [cursor.from(), cursor.to()];\n      });\n    }\n    function clearSearchHighlight(cm) {\n      var state = getSearchState(cm);\n      cm.removeOverlay(getSearchState(cm).getOverlay());\n      state.setOverlay(null);\n      if (state.getScrollbarAnnotate()) {\n        state.getScrollbarAnnotate().clear();\n        state.setScrollbarAnnotate(null);\n      }\n    }\n    /**\n     * Check if pos is in the specified range, INCLUSIVE.\n     * Range can be specified with 1 or 2 arguments.\n     * If the first range argument is an array, treat it as an array of line\n     * numbers. Match pos against any of the lines.\n     * If the first range argument is a number,\n     *   if there is only 1 range argument, check if pos has the same line\n     *       number\n     *   if there are 2 range arguments, then check if pos is in between the two\n     *       range arguments.\n     */\n    function isInRange(pos, start, end) {\n      if (typeof pos != 'number') {\n        // Assume it is a cursor position. Get the line number.\n        pos = pos.line;\n      }\n      if (start instanceof Array) {\n        return inArray(pos, start);\n      } else {\n        if (typeof end == 'number') {\n          return (pos >= start && pos <= end);\n        } else {\n          return pos == start;\n        }\n      }\n    }\n    function getUserVisibleLines(cm) {\n      var scrollInfo = cm.getScrollInfo();\n      var occludeToleranceTop = 6;\n      var occludeToleranceBottom = 10;\n      var from = cm.coordsChar({left:0, top: occludeToleranceTop + scrollInfo.top}, 'local');\n      var bottomY = scrollInfo.clientHeight - occludeToleranceBottom + scrollInfo.top;\n      var to = cm.coordsChar({left:0, top: bottomY}, 'local');\n      return {top: from.line, bottom: to.line};\n    }\n\n    function getMarkPos(cm, vim, markName) {\n      if (markName == '\\'' || markName == '`') {\n        return vimGlobalState.jumpList.find(cm, -1) || new Pos(0, 0);\n      } else if (markName == '.') {\n        return getLastEditPos(cm);\n      }\n\n      var mark = vim.marks[markName];\n      return mark && mark.find();\n    }\n\n    function getLastEditPos(cm) {\n      var done = cm.doc.history.done;\n      for (var i = done.length; i--;) {\n        if (done[i].changes) {\n          return copyCursor(done[i].changes[0].to);\n        }\n      }\n    }\n\n    var ExCommandDispatcher = function() {\n      this.buildCommandMap_();\n    };\n    ExCommandDispatcher.prototype = {\n      processCommand: function(cm, input, opt_params) {\n        var that = this;\n        cm.operation(function () {\n          cm.curOp.isVimOp = true;\n          that._processCommand(cm, input, opt_params);\n        });\n      },\n      _processCommand: function(cm, input, opt_params) {\n        var vim = cm.state.vim;\n        var commandHistoryRegister = vimGlobalState.registerController.getRegister(':');\n        var previousCommand = commandHistoryRegister.toString();\n        if (vim.visualMode) {\n          exitVisualMode(cm);\n        }\n        var inputStream = new CodeMirror.StringStream(input);\n        // update \": with the latest command whether valid or invalid\n        commandHistoryRegister.setText(input);\n        var params = opt_params || {};\n        params.input = input;\n        try {\n          this.parseInput_(cm, inputStream, params);\n        } catch(e) {\n          showConfirm(cm, e.toString());\n          throw e;\n        }\n        var command;\n        var commandName;\n        if (!params.commandName) {\n          // If only a line range is defined, move to the line.\n          if (params.line !== undefined) {\n            commandName = 'move';\n          }\n        } else {\n          command = this.matchCommand_(params.commandName);\n          if (command) {\n            commandName = command.name;\n            if (command.excludeFromCommandHistory) {\n              commandHistoryRegister.setText(previousCommand);\n            }\n            this.parseCommandArgs_(inputStream, params, command);\n            if (command.type == 'exToKey') {\n              // Handle Ex to Key mapping.\n              for (var i = 0; i < command.toKeys.length; i++) {\n                vimApi.handleKey(cm, command.toKeys[i], 'mapping');\n              }\n              return;\n            } else if (command.type == 'exToEx') {\n              // Handle Ex to Ex mapping.\n              this.processCommand(cm, command.toInput);\n              return;\n            }\n          }\n        }\n        if (!commandName) {\n          showConfirm(cm, 'Not an editor command \":' + input + '\"');\n          return;\n        }\n        try {\n          exCommands[commandName](cm, params);\n          // Possibly asynchronous commands (e.g. substitute, which might have a\n          // user confirmation), are responsible for calling the callback when\n          // done. All others have it taken care of for them here.\n          if ((!command || !command.possiblyAsync) && params.callback) {\n            params.callback();\n          }\n        } catch(e) {\n          showConfirm(cm, e.toString());\n          throw e;\n        }\n      },\n      parseInput_: function(cm, inputStream, result) {\n        inputStream.eatWhile(':');\n        // Parse range.\n        if (inputStream.eat('%')) {\n          result.line = cm.firstLine();\n          result.lineEnd = cm.lastLine();\n        } else {\n          result.line = this.parseLineSpec_(cm, inputStream);\n          if (result.line !== undefined && inputStream.eat(',')) {\n            result.lineEnd = this.parseLineSpec_(cm, inputStream);\n          }\n        }\n\n        // Parse command name.\n        var commandMatch = inputStream.match(/^(\\w+|!!|@@|[!#&*<=>@~])/);\n        if (commandMatch) {\n          result.commandName = commandMatch[1];\n        } else {\n          result.commandName = inputStream.match(/.*/)[0];\n        }\n\n        return result;\n      },\n      parseLineSpec_: function(cm, inputStream) {\n        var numberMatch = inputStream.match(/^(\\d+)/);\n        if (numberMatch) {\n          // Absolute line number plus offset (N+M or N-M) is probably a typo,\n          // not something the user actually wanted. (NB: vim does allow this.)\n          return parseInt(numberMatch[1], 10) - 1;\n        }\n        switch (inputStream.next()) {\n          case '.':\n            return this.parseLineSpecOffset_(inputStream, cm.getCursor().line);\n          case '$':\n            return this.parseLineSpecOffset_(inputStream, cm.lastLine());\n          case '\\'':\n            var markName = inputStream.next();\n            var markPos = getMarkPos(cm, cm.state.vim, markName);\n            if (!markPos) throw new Error('Mark not set');\n            return this.parseLineSpecOffset_(inputStream, markPos.line);\n          case '-':\n          case '+':\n            inputStream.backUp(1);\n            // Offset is relative to current line if not otherwise specified.\n            return this.parseLineSpecOffset_(inputStream, cm.getCursor().line);\n          default:\n            inputStream.backUp(1);\n            return undefined;\n        }\n      },\n      parseLineSpecOffset_: function(inputStream, line) {\n        var offsetMatch = inputStream.match(/^([+-])?(\\d+)/);\n        if (offsetMatch) {\n          var offset = parseInt(offsetMatch[2], 10);\n          if (offsetMatch[1] == \"-\") {\n            line -= offset;\n          } else {\n            line += offset;\n          }\n        }\n        return line;\n      },\n      parseCommandArgs_: function(inputStream, params, command) {\n        if (inputStream.eol()) {\n          return;\n        }\n        params.argString = inputStream.match(/.*/)[0];\n        // Parse command-line arguments\n        var delim = command.argDelimiter || /\\s+/;\n        var args = trim(params.argString).split(delim);\n        if (args.length && args[0]) {\n          params.args = args;\n        }\n      },\n      matchCommand_: function(commandName) {\n        // Return the command in the command map that matches the shortest\n        // prefix of the passed in command name. The match is guaranteed to be\n        // unambiguous if the defaultExCommandMap's shortNames are set up\n        // correctly. (see @code{defaultExCommandMap}).\n        for (var i = commandName.length; i > 0; i--) {\n          var prefix = commandName.substring(0, i);\n          if (this.commandMap_[prefix]) {\n            var command = this.commandMap_[prefix];\n            if (command.name.indexOf(commandName) === 0) {\n              return command;\n            }\n          }\n        }\n        return null;\n      },\n      buildCommandMap_: function() {\n        this.commandMap_ = {};\n        for (var i = 0; i < defaultExCommandMap.length; i++) {\n          var command = defaultExCommandMap[i];\n          var key = command.shortName || command.name;\n          this.commandMap_[key] = command;\n        }\n      },\n      map: function(lhs, rhs, ctx) {\n        if (lhs != ':' && lhs.charAt(0) == ':') {\n          if (ctx) { throw Error('Mode not supported for ex mappings'); }\n          var commandName = lhs.substring(1);\n          if (rhs != ':' && rhs.charAt(0) == ':') {\n            // Ex to Ex mapping\n            this.commandMap_[commandName] = {\n              name: commandName,\n              type: 'exToEx',\n              toInput: rhs.substring(1),\n              user: true\n            };\n          } else {\n            // Ex to key mapping\n            this.commandMap_[commandName] = {\n              name: commandName,\n              type: 'exToKey',\n              toKeys: rhs,\n              user: true\n            };\n          }\n        } else {\n          if (rhs != ':' && rhs.charAt(0) == ':') {\n            // Key to Ex mapping.\n            var mapping = {\n              keys: lhs,\n              type: 'keyToEx',\n              exArgs: { input: rhs.substring(1) }\n            };\n            if (ctx) { mapping.context = ctx; }\n            defaultKeymap.unshift(mapping);\n          } else {\n            // Key to key mapping\n            var mapping = {\n              keys: lhs,\n              type: 'keyToKey',\n              toKeys: rhs\n            };\n            if (ctx) { mapping.context = ctx; }\n            defaultKeymap.unshift(mapping);\n          }\n        }\n      },\n      unmap: function(lhs, ctx) {\n        if (lhs != ':' && lhs.charAt(0) == ':') {\n          // Ex to Ex or Ex to key mapping\n          if (ctx) { throw Error('Mode not supported for ex mappings'); }\n          var commandName = lhs.substring(1);\n          if (this.commandMap_[commandName] && this.commandMap_[commandName].user) {\n            delete this.commandMap_[commandName];\n            return true;\n          }\n        } else {\n          // Key to Ex or key to key mapping\n          var keys = lhs;\n          for (var i = 0; i < defaultKeymap.length; i++) {\n            if (keys == defaultKeymap[i].keys\n                && defaultKeymap[i].context === ctx) {\n              defaultKeymap.splice(i, 1);\n              return true;\n            }\n          }\n        }\n      }\n    };\n\n    var exCommands = {\n      colorscheme: function(cm, params) {\n        if (!params.args || params.args.length < 1) {\n          showConfirm(cm, cm.getOption('theme'));\n          return;\n        }\n        cm.setOption('theme', params.args[0]);\n      },\n      map: function(cm, params, ctx) {\n        var mapArgs = params.args;\n        if (!mapArgs || mapArgs.length < 2) {\n          if (cm) {\n            showConfirm(cm, 'Invalid mapping: ' + params.input);\n          }\n          return;\n        }\n        exCommandDispatcher.map(mapArgs[0], mapArgs[1], ctx);\n      },\n      imap: function(cm, params) { this.map(cm, params, 'insert'); },\n      nmap: function(cm, params) { this.map(cm, params, 'normal'); },\n      vmap: function(cm, params) { this.map(cm, params, 'visual'); },\n      unmap: function(cm, params, ctx) {\n        var mapArgs = params.args;\n        if (!mapArgs || mapArgs.length < 1 || !exCommandDispatcher.unmap(mapArgs[0], ctx)) {\n          if (cm) {\n            showConfirm(cm, 'No such mapping: ' + params.input);\n          }\n        }\n      },\n      move: function(cm, params) {\n        commandDispatcher.processCommand(cm, cm.state.vim, {\n            type: 'motion',\n            motion: 'moveToLineOrEdgeOfDocument',\n            motionArgs: { forward: false, explicitRepeat: true,\n              linewise: true },\n            repeatOverride: params.line+1});\n      },\n      set: function(cm, params) {\n        var setArgs = params.args;\n        // Options passed through to the setOption/getOption calls. May be passed in by the\n        // local/global versions of the set command\n        var setCfg = params.setCfg || {};\n        if (!setArgs || setArgs.length < 1) {\n          if (cm) {\n            showConfirm(cm, 'Invalid mapping: ' + params.input);\n          }\n          return;\n        }\n        var expr = setArgs[0].split('=');\n        var optionName = expr[0];\n        var value = expr[1];\n        var forceGet = false;\n\n        if (optionName.charAt(optionName.length - 1) == '?') {\n          // If post-fixed with ?, then the set is actually a get.\n          if (value) { throw Error('Trailing characters: ' + params.argString); }\n          optionName = optionName.substring(0, optionName.length - 1);\n          forceGet = true;\n        }\n        if (value === undefined && optionName.substring(0, 2) == 'no') {\n          // To set boolean options to false, the option name is prefixed with\n          // 'no'.\n          optionName = optionName.substring(2);\n          value = false;\n        }\n\n        var optionIsBoolean = options[optionName] && options[optionName].type == 'boolean';\n        if (optionIsBoolean && value == undefined) {\n          // Calling set with a boolean option sets it to true.\n          value = true;\n        }\n        // If no value is provided, then we assume this is a get.\n        if (!optionIsBoolean && value === undefined || forceGet) {\n          var oldValue = getOption(optionName, cm, setCfg);\n          if (oldValue instanceof Error) {\n            showConfirm(cm, oldValue.message);\n          } else if (oldValue === true || oldValue === false) {\n            showConfirm(cm, ' ' + (oldValue ? '' : 'no') + optionName);\n          } else {\n            showConfirm(cm, '  ' + optionName + '=' + oldValue);\n          }\n        } else {\n          var setOptionReturn = setOption(optionName, value, cm, setCfg);\n          if (setOptionReturn instanceof Error) {\n            showConfirm(cm, setOptionReturn.message);\n          }\n        }\n      },\n      setlocal: function (cm, params) {\n        // setCfg is passed through to setOption\n        params.setCfg = {scope: 'local'};\n        this.set(cm, params);\n      },\n      setglobal: function (cm, params) {\n        // setCfg is passed through to setOption\n        params.setCfg = {scope: 'global'};\n        this.set(cm, params);\n      },\n      registers: function(cm, params) {\n        var regArgs = params.args;\n        var registers = vimGlobalState.registerController.registers;\n        var regInfo = '----------Registers----------\\n\\n';\n        if (!regArgs) {\n          for (var registerName in registers) {\n            var text = registers[registerName].toString();\n            if (text.length) {\n              regInfo += '\"' + registerName + '    ' + text + '\\n';\n            }\n          }\n        } else {\n          var registerName;\n          regArgs = regArgs.join('');\n          for (var i = 0; i < regArgs.length; i++) {\n            registerName = regArgs.charAt(i);\n            if (!vimGlobalState.registerController.isValidRegister(registerName)) {\n              continue;\n            }\n            var register = registers[registerName] || new Register();\n            regInfo += '\"' + registerName + '    ' + register.toString() + '\\n';\n          }\n        }\n        showConfirm(cm, regInfo);\n      },\n      sort: function(cm, params) {\n        var reverse, ignoreCase, unique, number, pattern;\n        function parseArgs() {\n          if (params.argString) {\n            var args = new CodeMirror.StringStream(params.argString);\n            if (args.eat('!')) { reverse = true; }\n            if (args.eol()) { return; }\n            if (!args.eatSpace()) { return 'Invalid arguments'; }\n            var opts = args.match(/([dinuox]+)?\\s*(\\/.+\\/)?\\s*/);\n            if (!opts && !args.eol()) { return 'Invalid arguments'; }\n            if (opts[1]) {\n              ignoreCase = opts[1].indexOf('i') != -1;\n              unique = opts[1].indexOf('u') != -1;\n              var decimal = opts[1].indexOf('d') != -1 || opts[1].indexOf('n') != -1 && 1;\n              var hex = opts[1].indexOf('x') != -1 && 1;\n              var octal = opts[1].indexOf('o') != -1 && 1;\n              if (decimal + hex + octal > 1) { return 'Invalid arguments'; }\n              number = decimal && 'decimal' || hex && 'hex' || octal && 'octal';\n            }\n            if (opts[2]) {\n              pattern = new RegExp(opts[2].substr(1, opts[2].length - 2), ignoreCase ? 'i' : '');\n            }\n          }\n        }\n        var err = parseArgs();\n        if (err) {\n          showConfirm(cm, err + ': ' + params.argString);\n          return;\n        }\n        var lineStart = params.line || cm.firstLine();\n        var lineEnd = params.lineEnd || params.line || cm.lastLine();\n        if (lineStart == lineEnd) { return; }\n        var curStart = new Pos(lineStart, 0);\n        var curEnd = new Pos(lineEnd, lineLength(cm, lineEnd));\n        var text = cm.getRange(curStart, curEnd).split('\\n');\n        var numberRegex = pattern ? pattern :\n           (number == 'decimal') ? /(-?)([\\d]+)/ :\n           (number == 'hex') ? /(-?)(?:0x)?([0-9a-f]+)/i :\n           (number == 'octal') ? /([0-7]+)/ : null;\n        var radix = (number == 'decimal') ? 10 : (number == 'hex') ? 16 : (number == 'octal') ? 8 : null;\n        var numPart = [], textPart = [];\n        if (number || pattern) {\n          for (var i = 0; i < text.length; i++) {\n            var matchPart = pattern ? text[i].match(pattern) : null;\n            if (matchPart && matchPart[0] != '') {\n              numPart.push(matchPart);\n            } else if (!pattern && numberRegex.exec(text[i])) {\n              numPart.push(text[i]);\n            } else {\n              textPart.push(text[i]);\n            }\n          }\n        } else {\n          textPart = text;\n        }\n        function compareFn(a, b) {\n          if (reverse) { var tmp; tmp = a; a = b; b = tmp; }\n          if (ignoreCase) { a = a.toLowerCase(); b = b.toLowerCase(); }\n          var anum = number && numberRegex.exec(a);\n          var bnum = number && numberRegex.exec(b);\n          if (!anum) { return a < b ? -1 : 1; }\n          anum = parseInt((anum[1] + anum[2]).toLowerCase(), radix);\n          bnum = parseInt((bnum[1] + bnum[2]).toLowerCase(), radix);\n          return anum - bnum;\n        }\n        function comparePatternFn(a, b) {\n          if (reverse) { var tmp; tmp = a; a = b; b = tmp; }\n          if (ignoreCase) { a[0] = a[0].toLowerCase(); b[0] = b[0].toLowerCase(); }\n          return (a[0] < b[0]) ? -1 : 1;\n        }\n        numPart.sort(pattern ? comparePatternFn : compareFn);\n        if (pattern) {\n          for (var i = 0; i < numPart.length; i++) {\n            numPart[i] = numPart[i].input;\n          }\n        } else if (!number) { textPart.sort(compareFn); }\n        text = (!reverse) ? textPart.concat(numPart) : numPart.concat(textPart);\n        if (unique) { // Remove duplicate lines\n          var textOld = text;\n          var lastLine;\n          text = [];\n          for (var i = 0; i < textOld.length; i++) {\n            if (textOld[i] != lastLine) {\n              text.push(textOld[i]);\n            }\n            lastLine = textOld[i];\n          }\n        }\n        cm.replaceRange(text.join('\\n'), curStart, curEnd);\n      },\n      vglobal: function(cm, params) {\n        // global inspects params.commandName\n        this.global(cm, params);\n      },\n      global: function(cm, params) {\n        // a global command is of the form\n        // :[range]g/pattern/[cmd]\n        // argString holds the string /pattern/[cmd]\n        var argString = params.argString;\n        if (!argString) {\n          showConfirm(cm, 'Regular Expression missing from global');\n          return;\n        }\n        var inverted = params.commandName[0] === 'v';\n        // range is specified here\n        var lineStart = (params.line !== undefined) ? params.line : cm.firstLine();\n        var lineEnd = params.lineEnd || params.line || cm.lastLine();\n        // get the tokens from argString\n        var tokens = splitBySlash(argString);\n        var regexPart = argString, cmd;\n        if (tokens.length) {\n          regexPart = tokens[0];\n          cmd = tokens.slice(1, tokens.length).join('/');\n        }\n        if (regexPart) {\n          // If regex part is empty, then use the previous query. Otherwise\n          // use the regex part as the new query.\n          try {\n           updateSearchQuery(cm, regexPart, true /** ignoreCase */,\n             true /** smartCase */);\n          } catch (e) {\n           showConfirm(cm, 'Invalid regex: ' + regexPart);\n           return;\n          }\n        }\n        // now that we have the regexPart, search for regex matches in the\n        // specified range of lines\n        var query = getSearchState(cm).getQuery();\n        var matchedLines = [];\n        for (var i = lineStart; i <= lineEnd; i++) {\n          var line = cm.getLineHandle(i);\n          var matched = query.test(line.text);\n          if (matched !== inverted) {\n            matchedLines.push(cmd ? line : line.text);\n          }\n        }\n        // if there is no [cmd], just display the list of matched lines\n        if (!cmd) {\n          showConfirm(cm, matchedLines.join('\\n'));\n          return;\n        }\n        var index = 0;\n        var nextCommand = function() {\n          if (index < matchedLines.length) {\n            var line = matchedLines[index++];\n            var lineNum = cm.getLineNumber(line);\n            if (lineNum == null) {\n              nextCommand();\n              return;\n            }\n            var command = (lineNum + 1) + cmd;\n            exCommandDispatcher.processCommand(cm, command, {\n              callback: nextCommand\n            });\n          }\n        };\n        nextCommand();\n      },\n      substitute: function(cm, params) {\n        if (!cm.getSearchCursor) {\n          throw new Error('Search feature not available. Requires searchcursor.js or ' +\n              'any other getSearchCursor implementation.');\n        }\n        var argString = params.argString;\n        var tokens = argString ? splitBySeparator(argString, argString[0]) : [];\n        var regexPart, replacePart = '', trailing, flagsPart, count;\n        var confirm = false; // Whether to confirm each replace.\n        var global = false; // True to replace all instances on a line, false to replace only 1.\n        if (tokens.length) {\n          regexPart = tokens[0];\n          if (getOption('pcre') && regexPart !== '') {\n              regexPart = new RegExp(regexPart).source; //normalize not escaped characters\n          }\n          replacePart = tokens[1];\n          if (replacePart !== undefined) {\n            if (getOption('pcre')) {\n              replacePart = unescapeRegexReplace(replacePart.replace(/([^\\\\])&/g,\"$1$$&\"));\n            } else {\n              replacePart = translateRegexReplace(replacePart);\n            }\n            vimGlobalState.lastSubstituteReplacePart = replacePart;\n          }\n          trailing = tokens[2] ? tokens[2].split(' ') : [];\n        } else {\n          // either the argString is empty or its of the form ' hello/world'\n          // actually splitBySlash returns a list of tokens\n          // only if the string starts with a '/'\n          if (argString && argString.length) {\n            showConfirm(cm, 'Substitutions should be of the form ' +\n                ':s/pattern/replace/');\n            return;\n          }\n        }\n        // After the 3rd slash, we can have flags followed by a space followed\n        // by count.\n        if (trailing) {\n          flagsPart = trailing[0];\n          count = parseInt(trailing[1]);\n          if (flagsPart) {\n            if (flagsPart.indexOf('c') != -1) {\n              confirm = true;\n            }\n            if (flagsPart.indexOf('g') != -1) {\n              global = true;\n            }\n            if (getOption('pcre')) {\n               regexPart = regexPart + '/' + flagsPart;\n            } else {\n               regexPart = regexPart.replace(/\\//g, \"\\\\/\") + '/' + flagsPart;\n            }\n          }\n        }\n        if (regexPart) {\n          // If regex part is empty, then use the previous query. Otherwise use\n          // the regex part as the new query.\n          try {\n            updateSearchQuery(cm, regexPart, true /** ignoreCase */,\n              true /** smartCase */);\n          } catch (e) {\n            showConfirm(cm, 'Invalid regex: ' + regexPart);\n            return;\n          }\n        }\n        replacePart = replacePart || vimGlobalState.lastSubstituteReplacePart;\n        if (replacePart === undefined) {\n          showConfirm(cm, 'No previous substitute regular expression');\n          return;\n        }\n        var state = getSearchState(cm);\n        var query = state.getQuery();\n        var lineStart = (params.line !== undefined) ? params.line : cm.getCursor().line;\n        var lineEnd = params.lineEnd || lineStart;\n        if (lineStart == cm.firstLine() && lineEnd == cm.lastLine()) {\n          lineEnd = Infinity;\n        }\n        if (count) {\n          lineStart = lineEnd;\n          lineEnd = lineStart + count - 1;\n        }\n        var startPos = clipCursorToContent(cm, new Pos(lineStart, 0));\n        var cursor = cm.getSearchCursor(query, startPos);\n        doReplace(cm, confirm, global, lineStart, lineEnd, cursor, query, replacePart, params.callback);\n      },\n      redo: CodeMirror.commands.redo,\n      undo: CodeMirror.commands.undo,\n      write: function(cm) {\n        if (CodeMirror.commands.save) {\n          // If a save command is defined, call it.\n          CodeMirror.commands.save(cm);\n        } else if (cm.save) {\n          // Saves to text area if no save command is defined and cm.save() is available.\n          cm.save();\n        }\n      },\n      nohlsearch: function(cm) {\n        clearSearchHighlight(cm);\n      },\n      yank: function (cm) {\n        var cur = copyCursor(cm.getCursor());\n        var line = cur.line;\n        var lineText = cm.getLine(line);\n        vimGlobalState.registerController.pushText(\n          '0', 'yank', lineText, true, true);\n      },\n      delmarks: function(cm, params) {\n        if (!params.argString || !trim(params.argString)) {\n          showConfirm(cm, 'Argument required');\n          return;\n        }\n\n        var state = cm.state.vim;\n        var stream = new CodeMirror.StringStream(trim(params.argString));\n        while (!stream.eol()) {\n          stream.eatSpace();\n\n          // Record the streams position at the beginning of the loop for use\n          // in error messages.\n          var count = stream.pos;\n\n          if (!stream.match(/[a-zA-Z]/, false)) {\n            showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n            return;\n          }\n\n          var sym = stream.next();\n          // Check if this symbol is part of a range\n          if (stream.match('-', true)) {\n            // This symbol is part of a range.\n\n            // The range must terminate at an alphabetic character.\n            if (!stream.match(/[a-zA-Z]/, false)) {\n              showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n              return;\n            }\n\n            var startMark = sym;\n            var finishMark = stream.next();\n            // The range must terminate at an alphabetic character which\n            // shares the same case as the start of the range.\n            if (isLowerCase(startMark) && isLowerCase(finishMark) ||\n                isUpperCase(startMark) && isUpperCase(finishMark)) {\n              var start = startMark.charCodeAt(0);\n              var finish = finishMark.charCodeAt(0);\n              if (start >= finish) {\n                showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n                return;\n              }\n\n              // Because marks are always ASCII values, and we have\n              // determined that they are the same case, we can use\n              // their char codes to iterate through the defined range.\n              for (var j = 0; j <= finish - start; j++) {\n                var mark = String.fromCharCode(start + j);\n                delete state.marks[mark];\n              }\n            } else {\n              showConfirm(cm, 'Invalid argument: ' + startMark + '-');\n              return;\n            }\n          } else {\n            // This symbol is a valid mark, and is not part of a range.\n            delete state.marks[sym];\n          }\n        }\n      }\n    };\n\n    var exCommandDispatcher = new ExCommandDispatcher();\n\n    /**\n    * @param {CodeMirror} cm CodeMirror instance we are in.\n    * @param {boolean} confirm Whether to confirm each replace.\n    * @param {Cursor} lineStart Line to start replacing from.\n    * @param {Cursor} lineEnd Line to stop replacing at.\n    * @param {RegExp} query Query for performing matches with.\n    * @param {string} replaceWith Text to replace matches with. May contain $1,\n    *     $2, etc for replacing captured groups using JavaScript replace.\n    * @param {function()} callback A callback for when the replace is done.\n    */\n    function doReplace(cm, confirm, global, lineStart, lineEnd, searchCursor, query,\n        replaceWith, callback) {\n      // Set up all the functions.\n      cm.state.vim.exMode = true;\n      var done = false;\n      var lastPos, modifiedLineNumber, joined;\n      function replaceAll() {\n        cm.operation(function() {\n          while (!done) {\n            replace();\n            next();\n          }\n          stop();\n        });\n      }\n      function replace() {\n        var text = cm.getRange(searchCursor.from(), searchCursor.to());\n        var newText = text.replace(query, replaceWith);\n        var unmodifiedLineNumber = searchCursor.to().line;\n        searchCursor.replace(newText);\n        modifiedLineNumber = searchCursor.to().line;\n        lineEnd += modifiedLineNumber - unmodifiedLineNumber;\n        joined = modifiedLineNumber < unmodifiedLineNumber;\n      }\n      function findNextValidMatch() {\n        var lastMatchTo = lastPos && copyCursor(searchCursor.to());\n        var match = searchCursor.findNext();\n        if (match && !match[0] && lastMatchTo && cursorEqual(searchCursor.from(), lastMatchTo)) {\n          match = searchCursor.findNext();\n        }\n        return match;\n      }\n      function next() {\n        // The below only loops to skip over multiple occurrences on the same\n        // line when 'global' is not true.\n        while(findNextValidMatch() &&\n              isInRange(searchCursor.from(), lineStart, lineEnd)) {\n          if (!global && searchCursor.from().line == modifiedLineNumber && !joined) {\n            continue;\n          }\n          cm.scrollIntoView(searchCursor.from(), 30);\n          cm.setSelection(searchCursor.from(), searchCursor.to());\n          lastPos = searchCursor.from();\n          done = false;\n          return;\n        }\n        done = true;\n      }\n      function stop(close) {\n        if (close) { close(); }\n        cm.focus();\n        if (lastPos) {\n          cm.setCursor(lastPos);\n          var vim = cm.state.vim;\n          vim.exMode = false;\n          vim.lastHPos = vim.lastHSPos = lastPos.ch;\n        }\n        if (callback) { callback(); }\n      }\n      function onPromptKeyDown(e, _value, close) {\n        // Swallow all keys.\n        CodeMirror.e_stop(e);\n        var keyName = CodeMirror.keyName(e);\n        switch (keyName) {\n          case 'Y':\n            replace(); next(); break;\n          case 'N':\n            next(); break;\n          case 'A':\n            // replaceAll contains a call to close of its own. We don't want it\n            // to fire too early or multiple times.\n            var savedCallback = callback;\n            callback = undefined;\n            cm.operation(replaceAll);\n            callback = savedCallback;\n            break;\n          case 'L':\n            replace();\n            // fall through and exit.\n          case 'Q':\n          case 'Esc':\n          case 'Ctrl-C':\n          case 'Ctrl-[':\n            stop(close);\n            break;\n        }\n        if (done) { stop(close); }\n        return true;\n      }\n\n      // Actually do replace.\n      next();\n      if (done) {\n        showConfirm(cm, 'No matches for ' + query.source);\n        return;\n      }\n      if (!confirm) {\n        replaceAll();\n        if (callback) { callback(); }\n        return;\n      }\n      showPrompt(cm, {\n        prefix: dom('span', 'replace with ', dom('strong', replaceWith), ' (y/n/a/q/l)'),\n        onKeyDown: onPromptKeyDown\n      });\n    }\n\n    CodeMirror.keyMap.vim = {\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    function exitInsertMode(cm) {\n      var vim = cm.state.vim;\n      var macroModeState = vimGlobalState.macroModeState;\n      var insertModeChangeRegister = vimGlobalState.registerController.getRegister('.');\n      var isPlaying = macroModeState.isPlaying;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      if (!isPlaying) {\n        cm.off('change', onChange);\n        CodeMirror.off(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown);\n      }\n      if (!isPlaying && vim.insertModeRepeat > 1) {\n        // Perform insert mode repeat for commands like 3,a and 3,o.\n        repeatLastEdit(cm, vim, vim.insertModeRepeat - 1,\n            true /** repeatForInsert */);\n        vim.lastEditInputState.repeatOverride = vim.insertModeRepeat;\n      }\n      delete vim.insertModeRepeat;\n      vim.insertMode = false;\n      cm.setCursor(cm.getCursor().line, cm.getCursor().ch-1);\n      cm.setOption('keyMap', 'vim');\n      cm.setOption('disableInput', true);\n      cm.toggleOverwrite(false); // exit replace mode if we were in it.\n      // update the \". register before exiting insert mode\n      insertModeChangeRegister.setText(lastChange.changes.join(''));\n      CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n      if (macroModeState.isRecording) {\n        logInsertModeChange(macroModeState);\n      }\n    }\n\n    function _mapCommand(command) {\n      defaultKeymap.unshift(command);\n    }\n\n    function mapCommand(keys, type, name, args, extra) {\n      var command = {keys: keys, type: type};\n      command[type] = name;\n      command[type + \"Args\"] = args;\n      for (var key in extra)\n        command[key] = extra[key];\n      _mapCommand(command);\n    }\n\n    // The timeout in milliseconds for the two-character ESC keymap should be\n    // adjusted according to your typing speed to prevent false positives.\n    defineOption('insertModeEscKeysTimeout', 200, 'number');\n\n    CodeMirror.keyMap['vim-insert'] = {\n      // TODO: override navigation keys so that Esc will cancel automatic\n      // indentation from o, O, i_<CR>\n      fallthrough: ['default'],\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    CodeMirror.keyMap['vim-replace'] = {\n      'Backspace': 'goCharLeft',\n      fallthrough: ['vim-insert'],\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    function executeMacroRegister(cm, vim, macroModeState, registerName) {\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (registerName == ':') {\n        // Read-only register containing last Ex command.\n        if (register.keyBuffer[0]) {\n          exCommandDispatcher.processCommand(cm, register.keyBuffer[0]);\n        }\n        macroModeState.isPlaying = false;\n        return;\n      }\n      var keyBuffer = register.keyBuffer;\n      var imc = 0;\n      macroModeState.isPlaying = true;\n      macroModeState.replaySearchQueries = register.searchQueries.slice(0);\n      for (var i = 0; i < keyBuffer.length; i++) {\n        var text = keyBuffer[i];\n        var match, key;\n        while (text) {\n          // Pull off one command key, which is either a single character\n          // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.\n          match = (/<\\w+-.+?>|<\\w+>|./).exec(text);\n          key = match[0];\n          text = text.substring(match.index + key.length);\n          vimApi.handleKey(cm, key, 'macro');\n          if (vim.insertMode) {\n            var changes = register.insertModeChanges[imc++].changes;\n            vimGlobalState.macroModeState.lastInsertModeChanges.changes =\n                changes;\n            repeatInsertModeChanges(cm, changes, 1);\n            exitInsertMode(cm);\n          }\n        }\n      }\n      macroModeState.isPlaying = false;\n    }\n\n    function logKey(macroModeState, key) {\n      if (macroModeState.isPlaying) { return; }\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register) {\n        register.pushText(key);\n      }\n    }\n\n    function logInsertModeChange(macroModeState) {\n      if (macroModeState.isPlaying) { return; }\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register && register.pushInsertModeChanges) {\n        register.pushInsertModeChanges(macroModeState.lastInsertModeChanges);\n      }\n    }\n\n    function logSearchQuery(macroModeState, query) {\n      if (macroModeState.isPlaying) { return; }\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register && register.pushSearchQuery) {\n        register.pushSearchQuery(query);\n      }\n    }\n\n    /**\n     * Listens for changes made in insert mode.\n     * Should only be active in insert mode.\n     */\n    function onChange(cm, changeObj) {\n      var macroModeState = vimGlobalState.macroModeState;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      if (!macroModeState.isPlaying) {\n        while(changeObj) {\n          lastChange.expectCursorActivityForChange = true;\n          if (lastChange.ignoreCount > 1) {\n            lastChange.ignoreCount--;\n          } else if (changeObj.origin == '+input' || changeObj.origin == 'paste'\n              || changeObj.origin === undefined /* only in testing */) {\n            var selectionCount = cm.listSelections().length;\n            if (selectionCount > 1)\n              lastChange.ignoreCount = selectionCount;\n            var text = changeObj.text.join('\\n');\n            if (lastChange.maybeReset) {\n              lastChange.changes = [];\n              lastChange.maybeReset = false;\n            }\n            if (text) {\n              if (cm.state.overwrite && !/\\n/.test(text)) {\n                lastChange.changes.push([text]);\n              } else {\n                lastChange.changes.push(text);\n              }\n            }\n          }\n          // Change objects may be chained with next.\n          changeObj = changeObj.next;\n        }\n      }\n    }\n\n    /**\n    * Listens for any kind of cursor activity on CodeMirror.\n    */\n    function onCursorActivity(cm) {\n      var vim = cm.state.vim;\n      if (vim.insertMode) {\n        // Tracking cursor activity in insert mode (for macro support).\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.isPlaying) { return; }\n        var lastChange = macroModeState.lastInsertModeChanges;\n        if (lastChange.expectCursorActivityForChange) {\n          lastChange.expectCursorActivityForChange = false;\n        } else {\n          // Cursor moved outside the context of an edit. Reset the change.\n          lastChange.maybeReset = true;\n        }\n      } else if (!cm.curOp.isVimOp) {\n        handleExternalSelection(cm, vim);\n      }\n    }\n    function handleExternalSelection(cm, vim) {\n      var anchor = cm.getCursor('anchor');\n      var head = cm.getCursor('head');\n      // Enter or exit visual mode to match mouse selection.\n      if (vim.visualMode && !cm.somethingSelected()) {\n        exitVisualMode(cm, false);\n      } else if (!vim.visualMode && !vim.insertMode && cm.somethingSelected()) {\n        vim.visualMode = true;\n        vim.visualLine = false;\n        CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\"});\n      }\n      if (vim.visualMode) {\n        // Bind CodeMirror selection model to vim selection model.\n        // Mouse selections are considered visual characterwise.\n        var headOffset = !cursorIsBefore(head, anchor) ? -1 : 0;\n        var anchorOffset = cursorIsBefore(head, anchor) ? -1 : 0;\n        head = offsetCursor(head, 0, headOffset);\n        anchor = offsetCursor(anchor, 0, anchorOffset);\n        vim.sel = {\n          anchor: anchor,\n          head: head\n        };\n        updateMark(cm, vim, '<', cursorMin(head, anchor));\n        updateMark(cm, vim, '>', cursorMax(head, anchor));\n      } else if (!vim.insertMode) {\n        // Reset lastHPos if selection was modified by something outside of vim mode e.g. by mouse.\n        vim.lastHPos = cm.getCursor().ch;\n      }\n    }\n\n    /** Wrapper for special keys pressed in insert mode */\n    function InsertModeKey(keyName) {\n      this.keyName = keyName;\n    }\n\n    /**\n    * Handles raw key down events from the text area.\n    * - Should only be active in insert mode.\n    * - For recording deletes in insert mode.\n    */\n    function onKeyEventTargetKeyDown(e) {\n      var macroModeState = vimGlobalState.macroModeState;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      var keyName = CodeMirror.keyName(e);\n      if (!keyName) { return; }\n      function onKeyFound() {\n        if (lastChange.maybeReset) {\n          lastChange.changes = [];\n          lastChange.maybeReset = false;\n        }\n        lastChange.changes.push(new InsertModeKey(keyName));\n        return true;\n      }\n      if (keyName.indexOf('Delete') != -1 || keyName.indexOf('Backspace') != -1) {\n        CodeMirror.lookupKey(keyName, 'vim-insert', onKeyFound);\n      }\n    }\n\n    /**\n     * Repeats the last edit, which includes exactly 1 command and at most 1\n     * insert. Operator and motion commands are read from lastEditInputState,\n     * while action commands are read from lastEditActionCommand.\n     *\n     * If repeatForInsert is true, then the function was called by\n     * exitInsertMode to repeat the insert mode changes the user just made. The\n     * corresponding enterInsertMode call was made with a count.\n     */\n    function repeatLastEdit(cm, vim, repeat, repeatForInsert) {\n      var macroModeState = vimGlobalState.macroModeState;\n      macroModeState.isPlaying = true;\n      var isAction = !!vim.lastEditActionCommand;\n      var cachedInputState = vim.inputState;\n      function repeatCommand() {\n        if (isAction) {\n          commandDispatcher.processAction(cm, vim, vim.lastEditActionCommand);\n        } else {\n          commandDispatcher.evalInput(cm, vim);\n        }\n      }\n      function repeatInsert(repeat) {\n        if (macroModeState.lastInsertModeChanges.changes.length > 0) {\n          // For some reason, repeat cw in desktop VIM does not repeat\n          // insert mode changes. Will conform to that behavior.\n          repeat = !vim.lastEditActionCommand ? 1 : repeat;\n          var changeObject = macroModeState.lastInsertModeChanges;\n          repeatInsertModeChanges(cm, changeObject.changes, repeat);\n        }\n      }\n      vim.inputState = vim.lastEditInputState;\n      if (isAction && vim.lastEditActionCommand.interlaceInsertRepeat) {\n        // o and O repeat have to be interlaced with insert repeats so that the\n        // insertions appear on separate lines instead of the last line.\n        for (var i = 0; i < repeat; i++) {\n          repeatCommand();\n          repeatInsert(1);\n        }\n      } else {\n        if (!repeatForInsert) {\n          // Hack to get the cursor to end up at the right place. If I is\n          // repeated in insert mode repeat, cursor will be 1 insert\n          // change set left of where it should be.\n          repeatCommand();\n        }\n        repeatInsert(repeat);\n      }\n      vim.inputState = cachedInputState;\n      if (vim.insertMode && !repeatForInsert) {\n        // Don't exit insert mode twice. If repeatForInsert is set, then we\n        // were called by an exitInsertMode call lower on the stack.\n        exitInsertMode(cm);\n      }\n      macroModeState.isPlaying = false;\n    }\n\n    function repeatInsertModeChanges(cm, changes, repeat) {\n      function keyHandler(binding) {\n        if (typeof binding == 'string') {\n          CodeMirror.commands[binding](cm);\n        } else {\n          binding(cm);\n        }\n        return true;\n      }\n      var head = cm.getCursor('head');\n      var visualBlock = vimGlobalState.macroModeState.lastInsertModeChanges.visualBlock;\n      if (visualBlock) {\n        // Set up block selection again for repeating the changes.\n        selectForInsert(cm, head, visualBlock + 1);\n        repeat = cm.listSelections().length;\n        cm.setCursor(head);\n      }\n      for (var i = 0; i < repeat; i++) {\n        if (visualBlock) {\n          cm.setCursor(offsetCursor(head, i, 0));\n        }\n        for (var j = 0; j < changes.length; j++) {\n          var change = changes[j];\n          if (change instanceof InsertModeKey) {\n            CodeMirror.lookupKey(change.keyName, 'vim-insert', keyHandler);\n          } else if (typeof change == \"string\") {\n            cm.replaceSelection(change);\n          } else {\n            var start = cm.getCursor();\n            var end = offsetCursor(start, 0, change[0].length);\n            cm.replaceRange(change[0], start, end);\n            cm.setCursor(end);\n          }\n        }\n      }\n      if (visualBlock) {\n        cm.setCursor(offsetCursor(head, 0, 1));\n      }\n    }\n\n    // multiselect support\n    function cloneVimState(state) {\n      var n = new state.constructor();\n      Object.keys(state).forEach(function(key) {\n        var o = state[key];\n        if (Array.isArray(o))\n          o = o.slice();\n        else if (o && typeof o == \"object\" && o.constructor != Object)\n          o = cloneVimState(o);\n        n[key] = o;\n      });\n      if (state.sel) {\n        n.sel = {\n          head: state.sel.head && copyCursor(state.sel.head),\n          anchor: state.sel.anchor && copyCursor(state.sel.anchor)\n        };\n      }\n      return n;\n    }\n    function multiSelectHandleKey(cm, key, origin) {\n      var isHandled = false;\n      var vim = vimApi.maybeInitVimState_(cm);\n      var visualBlock = vim.visualBlock || vim.wasInVisualBlock;\n\n      var wasMultiselect = cm.isInMultiSelectMode();\n      if (vim.wasInVisualBlock && !wasMultiselect) {\n        vim.wasInVisualBlock = false;\n      } else if (wasMultiselect && vim.visualBlock) {\n         vim.wasInVisualBlock = true;\n      }\n\n      if (key == '<Esc>' && !vim.insertMode && !vim.visualMode && wasMultiselect && vim.status == \"<Esc>\") {\n        // allow editor to exit multiselect\n        clearInputState(cm);\n      } else if (visualBlock || !wasMultiselect || cm.inVirtualSelectionMode) {\n        isHandled = vimApi.handleKey(cm, key, origin);\n      } else {\n        var old = cloneVimState(vim);\n\n        cm.operation(function() {\n          cm.curOp.isVimOp = true;\n          cm.forEachSelection(function() {\n            var head = cm.getCursor(\"head\");\n            var anchor = cm.getCursor(\"anchor\");\n            var headOffset = !cursorIsBefore(head, anchor) ? -1 : 0;\n            var anchorOffset = cursorIsBefore(head, anchor) ? -1 : 0;\n            head = offsetCursor(head, 0, headOffset);\n            anchor = offsetCursor(anchor, 0, anchorOffset);\n            cm.state.vim.sel.head = head;\n            cm.state.vim.sel.anchor = anchor;\n\n            isHandled = vimApi.handleKey(cm, key, origin);\n            if (cm.virtualSelection) {\n              cm.state.vim = cloneVimState(old);\n            }\n          });\n          if (cm.curOp.cursorActivity && !isHandled)\n            cm.curOp.cursorActivity = false;\n          cm.state.vim = vim;\n        }, true);\n      }\n      // some commands may bring visualMode and selection out of sync\n      if (isHandled && !vim.visualMode && !vim.insert && vim.visualMode != cm.somethingSelected()) {\n        handleExternalSelection(cm, vim);\n      }\n      return isHandled;\n    }\n    resetVimGlobalState();\n\n  return vimApi;\n}\n\nfunction indexFromPos(doc, pos) {\n    var ch = pos.ch;\n    var lineNumber = pos.line + 1;\n    if (lineNumber < 1) {\n        lineNumber = 1;\n        ch = 0;\n    }\n    if (lineNumber > doc.lines) {\n        lineNumber = doc.lines;\n        ch = Number.MAX_VALUE;\n    }\n    var line = doc.line(lineNumber);\n    return Math.min(line.from + Math.max(0, ch), line.to);\n}\nfunction posFromIndex(doc, offset) {\n    let line = doc.lineAt(offset);\n    return { line: line.number - 1, ch: offset - line.from };\n}\nclass Pos {\n    constructor(line, ch) {\n        this.line = line;\n        this.ch = ch;\n    }\n}\nfunction on(emitter, type, f) {\n    if (emitter.addEventListener) {\n        emitter.addEventListener(type, f, false);\n    }\n    else {\n        var map = emitter._handlers || (emitter._handlers = {});\n        map[type] = (map[type] || []).concat(f);\n    }\n}\nfunction off(emitter, type, f) {\n    if (emitter.removeEventListener) {\n        emitter.removeEventListener(type, f, false);\n    }\n    else {\n        var map = emitter._handlers, arr = map && map[type];\n        if (arr) {\n            var index = arr.indexOf(f);\n            if (index > -1) {\n                map[type] = arr.slice(0, index).concat(arr.slice(index + 1));\n            }\n        }\n    }\n}\nfunction signal(emitter, type, ...args) {\n    var _a;\n    var handlers = (_a = emitter._handlers) === null || _a === void 0 ? void 0 : _a[type];\n    if (!handlers)\n        return;\n    for (var i = 0; i < handlers.length; ++i) {\n        handlers[i](...args);\n    }\n}\nfunction signalTo(handlers, ...args) {\n    if (!handlers)\n        return;\n    for (var i = 0; i < handlers.length; ++i) {\n        handlers[i](...args);\n    }\n}\nvar specialKey = {\n    Return: 'CR', Backspace: 'BS', 'Delete': 'Del', Escape: 'Esc', Insert: 'Ins',\n    ArrowLeft: 'Left', ArrowRight: 'Right', ArrowUp: 'Up', ArrowDown: 'Down',\n    Enter: 'CR', ' ': 'Space'\n};\nvar ignoredKeys = { Shift: 1, Alt: 1, Command: 1, Control: 1, CapsLock: 1, AltGraph: 1 };\nlet wordChar;\ntry {\n    wordChar = /*@__PURE__*/new RegExp(\"[\\\\w\\\\p{Alphabetic}\\\\p{Number}_]\", \"u\");\n}\ncatch (_) {\n    wordChar = /[\\w]/;\n}\n// workaround for missing api for merging transactions\nfunction dispatchChange(cm, transaction) {\n    var view = cm.cm6;\n    var type = \"input.type.compose\";\n    if (cm.curOp) {\n        if (!cm.curOp.lastChange)\n            type = \"input.type.compose.start\";\n    }\n    if (transaction.annotations) {\n        try {\n            transaction.annotations.some(function (note) {\n                if (note.value == \"input\")\n                    note.value = type;\n            });\n        }\n        catch (e) {\n            console.error(e);\n        }\n    }\n    else {\n        transaction.userEvent = type;\n    }\n    return view.dispatch(transaction);\n}\nfunction runHistoryCommand(cm, revert) {\n    var _a;\n    if (cm.curOp) {\n        cm.curOp.$changeStart = undefined;\n    }\n    (revert ? undo : redo)(cm.cm6);\n    let changeStartIndex = (_a = cm.curOp) === null || _a === void 0 ? void 0 : _a.$changeStart;\n    // vim mode expects the changed text to be either selected or cursor placed at the start\n    if (changeStartIndex != null) {\n        cm.cm6.dispatch({ selection: { anchor: changeStartIndex } });\n    }\n}\nclass CodeMirror {\n    constructor(cm6) {\n        this.state = {};\n        this.marks = Object.create(null);\n        this.$mid = 0; // marker id counter\n        this.options = {};\n        this._handlers = {};\n        // TODO change vim.js to not use obscure api\n        this.doc = {\n            history: {\n                done: [\n                    {\n                        changes: [\n                            {\n                                cm: this,\n                                get to() {\n                                    return this.cm.posFromIndex(this.cm.$lastChangeEndOffset);\n                                }\n                            }\n                        ]\n                    }\n                ]\n            }\n        };\n        this.$lastChangeEndOffset = 0;\n        this.virtualSelection = null;\n        this.cm6 = cm6;\n        this.onChange = this.onChange.bind(this);\n        this.onSelectionChange = this.onSelectionChange.bind(this);\n    }\n    // --------------------------\n    openDialog(template, callback, options) {\n        return openDialog(this, template, callback, options);\n    }\n    ;\n    openNotification(template, options) {\n        return openNotification(this, template, options);\n    }\n    ;\n    ;\n    on(type, f) { on(this, type, f); }\n    off(type, f) { off(this, type, f); }\n    signal(type, e, handlers) { signal(this, type, e, handlers); }\n    indexFromPos(pos) {\n        return indexFromPos(this.cm6.state.doc, pos);\n    }\n    ;\n    posFromIndex(offset) {\n        return posFromIndex(this.cm6.state.doc, offset);\n    }\n    ;\n    foldCode(pos) {\n        let view = this.cm6;\n        let ranges = view.state.selection.ranges;\n        let doc = this.cm6.state.doc;\n        let index = indexFromPos(doc, pos);\n        let tmpRanges = EditorSelection.create([EditorSelection.range(index, index)], 0).ranges;\n        view.state.selection.ranges = tmpRanges;\n        foldCode(view);\n        view.state.selection.ranges = ranges;\n    }\n    firstLine() { return 0; }\n    ;\n    lastLine() { return this.cm6.state.doc.lines - 1; }\n    ;\n    lineCount() { return this.cm6.state.doc.lines; }\n    ;\n    setCursor(line, ch) {\n        if (typeof line === 'object') {\n            ch = line.ch;\n            line = line.line;\n        }\n        var offset = indexFromPos(this.cm6.state.doc, { line, ch });\n        this.cm6.dispatch({ selection: { anchor: offset } }, { scrollIntoView: !this.curOp });\n        if (this.curOp && !this.curOp.isVimOp)\n            this.onBeforeEndOperation();\n    }\n    ;\n    getCursor(p) {\n        var sel = this.cm6.state.selection.main;\n        var offset = p == \"head\" || !p\n            ? sel.head\n            : p == \"anchor\"\n                ? sel.anchor\n                : p == \"start\"\n                    ? sel.from\n                    : p == \"end\"\n                        ? sel.to\n                        : null;\n        if (offset == null)\n            throw new Error(\"Invalid cursor type\");\n        return this.posFromIndex(offset);\n    }\n    ;\n    listSelections() {\n        var doc = this.cm6.state.doc;\n        return this.cm6.state.selection.ranges.map(r => {\n            return {\n                anchor: posFromIndex(doc, r.anchor),\n                head: posFromIndex(doc, r.head),\n            };\n        });\n    }\n    ;\n    setSelections(p, primIndex) {\n        var doc = this.cm6.state.doc;\n        var ranges = p.map(x => {\n            return EditorSelection.range(indexFromPos(doc, x.anchor), indexFromPos(doc, x.head));\n        });\n        this.cm6.dispatch({\n            selection: EditorSelection.create(ranges, primIndex)\n        });\n    }\n    ;\n    setSelection(anchor, head, options) {\n        var doc = this.cm6.state.doc;\n        var ranges = [EditorSelection.range(indexFromPos(doc, anchor), indexFromPos(doc, head))];\n        this.cm6.dispatch({\n            selection: EditorSelection.create(ranges, 0)\n        });\n        if (options && options.origin == '*mouse') {\n            this.onBeforeEndOperation();\n        }\n    }\n    ;\n    getLine(row) {\n        var doc = this.cm6.state.doc;\n        if (row < 0 || row >= doc.lines)\n            return \"\";\n        return this.cm6.state.doc.line(row + 1).text;\n    }\n    ;\n    getLineHandle(row) {\n        return { text: this.getLine(row), row: row };\n    }\n    getLineNumber(handle) {\n        return handle.row;\n    }\n    getRange(s, e) {\n        var doc = this.cm6.state.doc;\n        return this.cm6.state.sliceDoc(indexFromPos(doc, s), indexFromPos(doc, e));\n    }\n    ;\n    replaceRange(text, s, e) {\n        if (!e)\n            e = s;\n        var doc = this.cm6.state.doc;\n        var from = indexFromPos(doc, s);\n        var to = indexFromPos(doc, e);\n        dispatchChange(this, { changes: { from, to, insert: text } });\n    }\n    ;\n    replaceSelection(text) {\n        dispatchChange(this, this.cm6.state.replaceSelection(text));\n    }\n    ;\n    replaceSelections(replacements) {\n        var ranges = this.cm6.state.selection.ranges;\n        var changes = ranges.map((r, i) => {\n            return { from: r.from, to: r.to, insert: replacements[i] || \"\" };\n        });\n        dispatchChange(this, { changes });\n    }\n    ;\n    getSelection() {\n        return this.getSelections().join(\"\\n\");\n    }\n    ;\n    getSelections() {\n        var cm = this.cm6;\n        return cm.state.selection.ranges.map(r => cm.state.sliceDoc(r.from, r.to));\n    }\n    ;\n    somethingSelected() {\n        return this.cm6.state.selection.ranges.some(r => !r.empty);\n    }\n    ;\n    getInputField() {\n        return this.cm6.contentDOM;\n    }\n    ;\n    clipPos(p) {\n        var doc = this.cm6.state.doc;\n        var ch = p.ch;\n        var lineNumber = p.line + 1;\n        if (lineNumber < 1) {\n            lineNumber = 1;\n            ch = 0;\n        }\n        if (lineNumber > doc.lines) {\n            lineNumber = doc.lines;\n            ch = Number.MAX_VALUE;\n        }\n        var line = doc.line(lineNumber);\n        ch = Math.min(Math.max(0, ch), line.to - line.from);\n        return new Pos(lineNumber - 1, ch);\n    }\n    ;\n    getValue() {\n        return this.cm6.state.doc.toString();\n    }\n    ;\n    setValue(text) {\n        var cm = this.cm6;\n        return cm.dispatch({\n            changes: { from: 0, to: cm.state.doc.length, insert: text },\n            selection: EditorSelection.range(0, 0)\n        });\n    }\n    ;\n    focus() {\n        return this.cm6.focus();\n    }\n    ;\n    blur() {\n        return this.cm6.contentDOM.blur();\n    }\n    ;\n    defaultTextHeight() {\n        return this.cm6.defaultLineHeight;\n    }\n    ;\n    findMatchingBracket(pos) {\n        var state = this.cm6.state;\n        var offset = indexFromPos(state.doc, pos);\n        var m = matchBrackets(state, offset + 1, -1);\n        if (m && m.end) {\n            return { to: posFromIndex(state.doc, m.end.from) };\n        }\n        m = matchBrackets(state, offset, 1);\n        if (m && m.end) {\n            return { to: posFromIndex(state.doc, m.end.from) };\n        }\n        return { to: undefined };\n    }\n    ;\n    scanForBracket(pos, dir, style, config) {\n        return scanForBracket(this, pos, dir, style, config);\n    }\n    ;\n    indentLine(line, more) {\n        // todo how to indent only one line instead of selection\n        if (more)\n            this.indentMore();\n        else\n            this.indentLess();\n    }\n    ;\n    indentMore() {\n        indentMore(this.cm6);\n    }\n    ;\n    indentLess() {\n        indentLess(this.cm6);\n    }\n    ;\n    execCommand(name) {\n        if (name == \"indentAuto\")\n            CodeMirror.commands.indentAuto(this);\n        else if (name == \"goLineLeft\")\n            cursorLineBoundaryBackward(this.cm6);\n        else if (name == \"goLineRight\") {\n            cursorLineBoundaryForward(this.cm6);\n            cursorCharBackward(this.cm6);\n        }\n        else\n            console.log(name + \" is not implemented\");\n    }\n    ;\n    setBookmark(cursor, options) {\n        var assoc = (options === null || options === void 0 ? void 0 : options.insertLeft) ? 1 : -1;\n        var offset = this.indexFromPos(cursor);\n        var bm = new Marker(this, offset, assoc);\n        return bm;\n    }\n    ;\n    addOverlay({ query }) {\n        let cm6Query = new SearchQuery({\n            regexp: true,\n            search: query.source,\n            caseSensitive: !/i/.test(query.flags),\n        });\n        if (cm6Query.valid) {\n            cm6Query.forVim = true;\n            this.cm6Query = cm6Query;\n            let effect = setSearchQuery.of(cm6Query);\n            this.cm6.dispatch({ effects: effect });\n            return cm6Query;\n        }\n    }\n    ;\n    removeOverlay(overlay) {\n        if (!this.cm6Query)\n            return;\n        this.cm6Query.forVim = false;\n        let effect = setSearchQuery.of(this.cm6Query);\n        this.cm6.dispatch({ effects: effect });\n    }\n    ;\n    getSearchCursor(query, pos) {\n        var cm = this;\n        var last = null;\n        var lastCM5Result = null;\n        if (pos.ch == undefined)\n            pos.ch = Number.MAX_VALUE;\n        var firstOffset = indexFromPos(cm.cm6.state.doc, pos);\n        var source = query.source.replace(/(\\\\.|{(?:\\d+(?:,\\d*)?|,\\d+)})|[{}]/g, function (a, b) {\n            if (!b)\n                return \"\\\\\" + a;\n            return b;\n        });\n        function rCursor(doc, from = 0, to = doc.length) {\n            return new RegExpCursor(doc, source, { ignoreCase: query.ignoreCase }, from, to);\n        }\n        function nextMatch(from) {\n            var doc = cm.cm6.state.doc;\n            if (from > doc.length)\n                return null;\n            let res = rCursor(doc, from).next();\n            return res.done ? null : res.value;\n        }\n        var ChunkSize = 10000;\n        function prevMatchInRange(from, to) {\n            var doc = cm.cm6.state.doc;\n            for (let size = 1;; size++) {\n                let start = Math.max(from, to - size * ChunkSize);\n                let cursor = rCursor(doc, start, to), range = null;\n                while (!cursor.next().done)\n                    range = cursor.value;\n                if (range && (start == from || range.from > start + 10))\n                    return range;\n                if (start == from)\n                    return null;\n            }\n        }\n        return {\n            findNext: function () { return this.find(false); },\n            findPrevious: function () { return this.find(true); },\n            find: function (back) {\n                var doc = cm.cm6.state.doc;\n                if (back) {\n                    let endAt = last ? (last.from == last.to ? last.to - 1 : last.from) : firstOffset;\n                    last = prevMatchInRange(0, endAt);\n                }\n                else {\n                    let startFrom = last ? (last.from == last.to ? last.to + 1 : last.to) : firstOffset;\n                    last = nextMatch(startFrom);\n                }\n                lastCM5Result = last && {\n                    from: posFromIndex(doc, last.from),\n                    to: posFromIndex(doc, last.to),\n                    match: last.match,\n                };\n                return last && last.match;\n            },\n            from: function () { return lastCM5Result === null || lastCM5Result === void 0 ? void 0 : lastCM5Result.from; },\n            to: function () { return lastCM5Result === null || lastCM5Result === void 0 ? void 0 : lastCM5Result.to; },\n            replace: function (text) {\n                if (last) {\n                    dispatchChange(cm, {\n                        changes: { from: last.from, to: last.to, insert: text }\n                    });\n                    last.to = last.from + text.length;\n                    if (lastCM5Result) {\n                        lastCM5Result.to = posFromIndex(cm.cm6.state.doc, last.to);\n                    }\n                }\n            }\n        };\n    }\n    ;\n    findPosV(start, amount, unit, goalColumn) {\n        let { cm6 } = this;\n        const doc = cm6.state.doc;\n        let pixels = unit == 'page' ? cm6.dom.clientHeight : 0;\n        const startOffset = indexFromPos(doc, start);\n        let range = EditorSelection.range(startOffset, startOffset, goalColumn);\n        let count = Math.round(Math.abs(amount));\n        for (let i = 0; i < count; i++) {\n            if (unit == 'page') {\n                range = cm6.moveVertically(range, amount > 0, pixels);\n            }\n            else if (unit == 'line') {\n                range = cm6.moveVertically(range, amount > 0);\n            }\n        }\n        let pos = posFromIndex(doc, range.head);\n        // set hitside to true if there was no place to move and cursor was clipped to the edge\n        // of document. Needed for gj/gk\n        if ((amount < 0 &&\n            range.head == 0 && goalColumn != 0 &&\n            start.line == 0 && start.ch != 0) || (amount > 0 &&\n            range.head == doc.length && pos.ch != goalColumn\n            && start.line == pos.line)) {\n            pos.hitSide = true;\n        }\n        return pos;\n    }\n    ;\n    charCoords(pos, mode) {\n        var rect = this.cm6.contentDOM.getBoundingClientRect();\n        var offset = indexFromPos(this.cm6.state.doc, pos);\n        var coords = this.cm6.coordsAtPos(offset);\n        var d = -rect.top;\n        return { left: ((coords === null || coords === void 0 ? void 0 : coords.left) || 0) - rect.left, top: ((coords === null || coords === void 0 ? void 0 : coords.top) || 0) + d, bottom: ((coords === null || coords === void 0 ? void 0 : coords.bottom) || 0) + d };\n    }\n    ;\n    coordsChar(coords, mode) {\n        var rect = this.cm6.contentDOM.getBoundingClientRect();\n        var offset = this.cm6.posAtCoords({ x: coords.left + rect.left, y: coords.top + rect.top }) || 0;\n        return posFromIndex(this.cm6.state.doc, offset);\n    }\n    ;\n    getScrollInfo() {\n        var scroller = this.cm6.scrollDOM;\n        return {\n            left: scroller.scrollLeft, top: scroller.scrollTop,\n            height: scroller.scrollHeight,\n            width: scroller.scrollWidth,\n            clientHeight: scroller.clientHeight, clientWidth: scroller.clientWidth\n        };\n    }\n    ;\n    scrollTo(x, y) {\n        if (x != null)\n            this.cm6.scrollDOM.scrollLeft = x;\n        if (y != null)\n            this.cm6.scrollDOM.scrollTop = y;\n    }\n    ;\n    scrollIntoView(pos, margin) {\n        if (pos) {\n            var offset = this.indexFromPos(pos);\n            this.cm6.dispatch({\n                effects: EditorView.scrollIntoView(offset)\n            });\n        }\n        else {\n            this.cm6.dispatch({ scrollIntoView: true, userEvent: \"scroll\" });\n        }\n    }\n    ;\n    getWrapperElement() {\n        return this.cm6.dom;\n    }\n    ;\n    // for tests\n    getMode() {\n        return { name: this.getOption(\"mode\") };\n    }\n    ;\n    setSize(w, h) {\n        this.cm6.dom.style.width = w + 4 + \"px\";\n        this.cm6.dom.style.height = h + \"px\";\n        this.refresh();\n    }\n    refresh() {\n        this.cm6.measure();\n    }\n    // event listeners\n    destroy() {\n        this.removeOverlay();\n    }\n    ;\n    onChange(update) {\n        for (let i in this.marks) {\n            let m = this.marks[i];\n            m.update(update.changes);\n        }\n        if (this.virtualSelection) {\n            this.virtualSelection.ranges = this.virtualSelection.ranges.map(range => range.map(update.changes));\n        }\n        var curOp = this.curOp = this.curOp || {};\n        update.changes.iterChanges((fromA, toA, fromB, toB, text) => {\n            if (curOp.$changeStart == null || curOp.$changeStart > fromB)\n                curOp.$changeStart = fromB;\n            this.$lastChangeEndOffset = toB;\n            var change = { text: text.toJSON() };\n            if (!curOp.lastChange) {\n                curOp.lastChange = curOp.change = change;\n            }\n            else {\n                curOp.lastChange.next = curOp.lastChange = change;\n            }\n        }, true);\n        if (!curOp.changeHandlers)\n            curOp.changeHandlers = this._handlers[\"change\"] && this._handlers[\"change\"].slice();\n    }\n    ;\n    onSelectionChange() {\n        var curOp = this.curOp = this.curOp || {};\n        if (!curOp.cursorActivityHandlers)\n            curOp.cursorActivityHandlers = this._handlers[\"cursorActivity\"] && this._handlers[\"cursorActivity\"].slice();\n        this.curOp.cursorActivity = true;\n    }\n    ;\n    operation(fn) {\n        if (!this.curOp)\n            this.curOp = { $d: 0 };\n        this.curOp.$d++;\n        try {\n            var result = fn();\n        }\n        finally {\n            if (this.curOp) {\n                this.curOp.$d--;\n                if (!this.curOp.$d)\n                    this.onBeforeEndOperation();\n            }\n        }\n        return result;\n    }\n    ;\n    onBeforeEndOperation() {\n        var op = this.curOp;\n        var scrollIntoView = false;\n        if (op) {\n            if (op.change) {\n                signalTo(op.changeHandlers, this, op.change);\n            }\n            if (op && op.cursorActivity) {\n                signalTo(op.cursorActivityHandlers, this, null);\n                if (op.isVimOp)\n                    scrollIntoView = true;\n            }\n            this.curOp = null;\n        }\n        if (scrollIntoView)\n            this.scrollIntoView();\n    }\n    ;\n    moveH(increment, unit) {\n        if (unit == 'char') {\n            // todo\n            var cur = this.getCursor();\n            this.setCursor(cur.line, cur.ch + increment);\n        }\n    }\n    ;\n    setOption(name, val) {\n        switch (name) {\n            case \"keyMap\":\n                this.state.keyMap = val;\n                break;\n        }\n    }\n    ;\n    getOption(name) {\n        switch (name) {\n            case \"firstLineNumber\": return 1;\n            case \"tabSize\": return this.cm6.state.tabSize || 4;\n            case \"readonly\": return this.cm6.state.readOnly;\n            case \"indentWithTabs\": return this.cm6.state.facet(indentUnit) == \"\\t\"; // TODO\n            case \"indentUnit\": return this.cm6.state.facet(indentUnit).length || 2;\n            // for tests\n            case \"keyMap\": return this.state.keyMap || \"vim\";\n        }\n    }\n    ;\n    toggleOverwrite(on) {\n        this.state.overwrite = on;\n    }\n    ;\n    getTokenTypeAt(pos) {\n        var _a;\n        // only comment|string are needed\n        var offset = this.indexFromPos(pos);\n        var tree = ensureSyntaxTree(this.cm6.state, offset);\n        var node = tree === null || tree === void 0 ? void 0 : tree.resolve(offset);\n        var type = ((_a = node === null || node === void 0 ? void 0 : node.type) === null || _a === void 0 ? void 0 : _a.name) || \"\";\n        if (/comment/i.test(type))\n            return \"comment\";\n        if (/string/i.test(type))\n            return \"string\";\n        return \"\";\n    }\n    ;\n    overWriteSelection(text) {\n        var doc = this.cm6.state.doc;\n        var sel = this.cm6.state.selection;\n        var ranges = sel.ranges.map(x => {\n            if (x.empty) {\n                var ch = x.to < doc.length ? doc.sliceString(x.from, x.to + 1) : \"\";\n                if (ch && !/\\n/.test(ch))\n                    return EditorSelection.range(x.from, x.to + 1);\n            }\n            return x;\n        });\n        this.cm6.dispatch({\n            selection: EditorSelection.create(ranges, sel.mainIndex)\n        });\n        this.replaceSelection(text);\n    }\n    /*** multiselect ****/\n    isInMultiSelectMode() {\n        return this.cm6.state.selection.ranges.length > 1;\n    }\n    virtualSelectionMode() {\n        return !!this.virtualSelection;\n    }\n    forEachSelection(command) {\n        var selection = this.cm6.state.selection;\n        this.virtualSelection = EditorSelection.create(selection.ranges, selection.mainIndex);\n        for (var i = 0; i < this.virtualSelection.ranges.length; i++) {\n            var range = this.virtualSelection.ranges[i];\n            if (!range)\n                continue;\n            this.cm6.dispatch({ selection: EditorSelection.create([range]) });\n            command();\n            this.virtualSelection.ranges[i] = this.cm6.state.selection.ranges[0];\n        }\n        this.cm6.dispatch({ selection: this.virtualSelection });\n        this.virtualSelection = null;\n    }\n}\n// --------------------------\nCodeMirror.Pos = Pos;\nCodeMirror.StringStream = StringStream;\nCodeMirror.commands = {\n    cursorCharLeft: function (cm) { cursorCharLeft(cm.cm6); },\n    redo: function (cm) { runHistoryCommand(cm, false); },\n    undo: function (cm) { runHistoryCommand(cm, true); },\n    newlineAndIndent: function (cm) {\n        insertNewlineAndIndent({\n            state: cm.cm6.state,\n            dispatch: (tr) => {\n                return dispatchChange(cm, tr);\n            }\n        });\n    },\n    indentAuto: function (cm) {\n        indentSelection(cm.cm6);\n    }\n};\nCodeMirror.defineOption = function (name, val, setter) { };\nCodeMirror.isWordChar = function (ch) {\n    return wordChar.test(ch);\n};\nCodeMirror.keys = {\n    Backspace: function (cm) {\n        deleteCharBackward(cm.cm6);\n    },\n    Delete: function (cm) {\n        deleteCharForward(cm.cm6);\n    }\n};\nCodeMirror.keyMap = {};\nCodeMirror.addClass = function () { };\nCodeMirror.rmClass = function () { };\nCodeMirror.e_preventDefault = function (e) {\n    e.preventDefault();\n};\nCodeMirror.e_stop = function (e) {\n    var _a, _b;\n    (_a = e === null || e === void 0 ? void 0 : e.stopPropagation) === null || _a === void 0 ? void 0 : _a.call(e);\n    (_b = e === null || e === void 0 ? void 0 : e.preventDefault) === null || _b === void 0 ? void 0 : _b.call(e);\n};\nCodeMirror.keyName = function (e) {\n    var key = e.key;\n    if (ignoredKeys[key])\n        return;\n    if (key == \"Escape\")\n        key = \"Esc\";\n    if (key == \" \")\n        key = \"Space\";\n    if (key.length > 1) {\n        key = key.replace(/Numpad|Arrow/, \"\");\n    }\n    if (key.length == 1)\n        key = key.toUpperCase();\n    var name = '';\n    if (e.ctrlKey) {\n        name += 'Ctrl-';\n    }\n    if (e.altKey) {\n        name += 'Alt-';\n    }\n    if ((name || key.length > 1) && e.shiftKey) {\n        name += 'Shift-';\n    }\n    name += key;\n    return name;\n};\nCodeMirror.vimKey = function vimKey(e) {\n    var key = e.key;\n    if (ignoredKeys[key])\n        return;\n    if (key.length > 1 && key[0] == \"n\") {\n        key = key.replace(\"Numpad\", \"\");\n    }\n    key = specialKey[key] || key;\n    var name = '';\n    if (e.ctrlKey) {\n        name += 'C-';\n    }\n    if (e.altKey) {\n        name += 'A-';\n    }\n    if (e.metaKey) {\n        name += 'M-';\n    }\n    if ((name || key.length > 1) && e.shiftKey) {\n        name += 'S-';\n    }\n    name += key;\n    if (name.length > 1) {\n        name = '<' + name + '>';\n    }\n    return name;\n};\nCodeMirror.lookupKey = function lookupKey(key, map, handle) {\n    var result = CodeMirror.keys[key];\n    if (result)\n        handle(result);\n};\nCodeMirror.on = on;\nCodeMirror.off = off;\nCodeMirror.signal = signal;\nCodeMirror.findMatchingTag = findMatchingTag;\nCodeMirror.findEnclosingTag = findEnclosingTag;\n/************* dialog *************/\nfunction dialogDiv(cm, template, bottom) {\n    var dialog = document.createElement(\"div\");\n    dialog.appendChild(template);\n    return dialog;\n}\nfunction closeNotification(cm, newVal) {\n    if (cm.state.currentNotificationClose)\n        cm.state.currentNotificationClose();\n    cm.state.currentNotificationClose = newVal;\n}\nfunction openNotification(cm, template, options) {\n    closeNotification(cm, close);\n    var dialog = dialogDiv(cm, template, options && options.bottom);\n    var closed = false;\n    var doneTimer;\n    var duration = options && typeof options.duration !== \"undefined\" ? options.duration : 5000;\n    function close() {\n        if (closed)\n            return;\n        closed = true;\n        clearTimeout(doneTimer);\n        dialog.remove();\n        hideDialog(cm, dialog);\n    }\n    dialog.onclick = function (e) {\n        e.preventDefault();\n        close();\n    };\n    showDialog(cm, dialog);\n    if (duration)\n        doneTimer = setTimeout(close, duration);\n    return close;\n}\nfunction showDialog(cm, dialog) {\n    var oldDialog = cm.state.dialog;\n    cm.state.dialog = dialog;\n    if (dialog && oldDialog !== dialog) {\n        if (oldDialog && oldDialog.contains(document.activeElement))\n            cm.focus();\n        if (oldDialog && oldDialog.parentElement) {\n            oldDialog.parentElement.replaceChild(dialog, oldDialog);\n        }\n        else if (oldDialog) {\n            oldDialog.remove();\n        }\n        CodeMirror.signal(cm, \"dialog\");\n    }\n}\nfunction hideDialog(cm, dialog) {\n    if (cm.state.dialog == dialog) {\n        cm.state.dialog = null;\n        CodeMirror.signal(cm, \"dialog\");\n    }\n}\nfunction openDialog(me, template, callback, options) {\n    if (!options)\n        options = {};\n    closeNotification(me, undefined);\n    var dialog = dialogDiv(me, template, options.bottom);\n    var closed = false;\n    showDialog(me, dialog);\n    function close(newVal) {\n        if (typeof newVal == 'string') {\n            inp.value = newVal;\n        }\n        else {\n            if (closed)\n                return;\n            closed = true;\n            hideDialog(me, dialog);\n            if (!me.state.dialog)\n                me.focus();\n            if (options.onClose)\n                options.onClose(dialog);\n        }\n    }\n    var inp = dialog.getElementsByTagName(\"input\")[0];\n    if (inp) {\n        if (options.value) {\n            inp.value = options.value;\n            if (options.selectValueOnOpen !== false)\n                inp.select();\n        }\n        if (options.onInput)\n            CodeMirror.on(inp, \"input\", function (e) { options.onInput(e, inp.value, close); });\n        if (options.onKeyUp)\n            CodeMirror.on(inp, \"keyup\", function (e) { options.onKeyUp(e, inp.value, close); });\n        CodeMirror.on(inp, \"keydown\", function (e) {\n            if (options && options.onKeyDown && options.onKeyDown(e, inp.value, close)) {\n                return;\n            }\n            if (e.keyCode == 13)\n                callback(inp.value);\n            if (e.keyCode == 27 || (options.closeOnEnter !== false && e.keyCode == 13)) {\n                inp.blur();\n                CodeMirror.e_stop(e);\n                close();\n            }\n        });\n        if (options.closeOnBlur !== false)\n            CodeMirror.on(inp, \"blur\", function () {\n                setTimeout(function () {\n                    if (document.activeElement === inp)\n                        return;\n                    close();\n                });\n            });\n        inp.focus();\n    }\n    return close;\n}\nvar matching = { \"(\": \")>\", \")\": \"(<\", \"[\": \"]>\", \"]\": \"[<\", \"{\": \"}>\", \"}\": \"{<\", \"<\": \">>\", \">\": \"<<\" };\nfunction bracketRegex(config) {\n    return config && config.bracketRegex || /[(){}[\\]]/;\n}\nfunction scanForBracket(cm, where, dir, style, config) {\n    var maxScanLen = (config && config.maxScanLineLength) || 10000;\n    var maxScanLines = (config && config.maxScanLines) || 1000;\n    var stack = [];\n    var re = bracketRegex(config);\n    var lineEnd = dir > 0 ? Math.min(where.line + maxScanLines, cm.lastLine() + 1)\n        : Math.max(cm.firstLine() - 1, where.line - maxScanLines);\n    for (var lineNo = where.line; lineNo != lineEnd; lineNo += dir) {\n        var line = cm.getLine(lineNo);\n        if (!line)\n            continue;\n        var pos = dir > 0 ? 0 : line.length - 1, end = dir > 0 ? line.length : -1;\n        if (line.length > maxScanLen)\n            continue;\n        if (lineNo == where.line)\n            pos = where.ch - (dir < 0 ? 1 : 0);\n        for (; pos != end; pos += dir) {\n            var ch = line.charAt(pos);\n            if (re.test(ch) /*&& (style === undefined ||\n                                (cm.getTokenTypeAt(new Pos(lineNo, pos + 1)) || \"\") == (style || \"\"))*/) {\n                var match = matching[ch];\n                if (match && (match.charAt(1) == \">\") == (dir > 0))\n                    stack.push(ch);\n                else if (!stack.length)\n                    return { pos: new Pos(lineNo, pos), ch: ch };\n                else\n                    stack.pop();\n            }\n        }\n    }\n    return lineNo - dir == (dir > 0 ? cm.lastLine() : cm.firstLine()) ? false : null;\n}\nfunction findMatchingTag(cm, pos) {\n    var state = cm.cm6.state;\n    var offset = cm.indexFromPos(pos);\n    var m = matchBrackets(state, offset + 1, -1, { brackets: \"\\n\\n\" });\n    if (m) {\n        if (!m.end || !m.start)\n            return;\n        return {\n            open: convertRange(state.doc, m.end),\n            close: convertRange(state.doc, m.start),\n        };\n    }\n    m = matchBrackets(state, offset, 1, { brackets: \"\\n\\n\" });\n    if (m) {\n        if (!m.end || !m.start)\n            return;\n        return {\n            open: convertRange(state.doc, m.start),\n            close: convertRange(state.doc, m.end),\n        };\n    }\n}\nfunction convertRange(doc, cm6Range) {\n    return {\n        from: posFromIndex(doc, cm6Range.from),\n        to: posFromIndex(doc, cm6Range.to)\n    };\n}\nfunction findEnclosingTag(cm, pos) {\n    var state = cm.cm6.state;\n    var offset = cm.indexFromPos(pos);\n    var text = state.sliceDoc(0, offset);\n    var i = offset;\n    while (i > 0) {\n        var m = matchBrackets(state, i, 1, { brackets: \"\\n\\n\" });\n        if (m && m.start && m.end) {\n            return {\n                open: convertRange(state.doc, m.start),\n                close: convertRange(state.doc, m.end),\n            };\n        }\n        i = text.lastIndexOf(\">\", i - 1);\n    }\n}\nclass Marker {\n    constructor(cm, offset, assoc) {\n        this.cm = cm;\n        this.id = cm.$mid++;\n        this.offset = offset;\n        this.assoc = assoc;\n        cm.marks[this.id] = this;\n    }\n    ;\n    clear() { delete this.cm.marks[this.id]; }\n    ;\n    find() {\n        if (this.offset == null)\n            return null;\n        return this.cm.posFromIndex(this.offset);\n    }\n    ;\n    update(change) {\n        if (this.offset != null)\n            this.offset = change.mapPos(this.offset, this.assoc, MapMode.TrackDel);\n    }\n}\n\nclass Piece {\n    constructor(left, top, height, fontFamily, fontSize, fontWeight, color, className, letter, partial) {\n        this.left = left;\n        this.top = top;\n        this.height = height;\n        this.fontFamily = fontFamily;\n        this.fontSize = fontSize;\n        this.fontWeight = fontWeight;\n        this.color = color;\n        this.className = className;\n        this.letter = letter;\n        this.partial = partial;\n    }\n    draw() {\n        let elt = document.createElement(\"div\");\n        elt.className = this.className;\n        this.adjust(elt);\n        return elt;\n    }\n    adjust(elt) {\n        elt.style.left = this.left + \"px\";\n        elt.style.top = this.top + \"px\";\n        elt.style.height = this.height + \"px\";\n        elt.style.lineHeight = this.height + \"px\";\n        elt.style.fontFamily = this.fontFamily;\n        elt.style.fontSize = this.fontSize;\n        elt.style.fontWeight = this.fontWeight;\n        elt.style.color = this.partial ? \"transparent\" : this.color;\n        elt.className = this.className;\n        elt.textContent = this.letter;\n    }\n    eq(p) {\n        return this.left == p.left && this.top == p.top && this.height == p.height &&\n            this.fontFamily == p.fontFamily && this.fontSize == p.fontSize &&\n            this.fontWeight == p.fontWeight && this.color == p.color &&\n            this.className == p.className &&\n            this.letter == p.letter;\n    }\n}\nclass BlockCursorPlugin {\n    constructor(view, cm) {\n        this.view = view;\n        this.rangePieces = [];\n        this.cursors = [];\n        this.cm = cm;\n        this.measureReq = { read: this.readPos.bind(this), write: this.drawSel.bind(this) };\n        this.cursorLayer = view.scrollDOM.appendChild(document.createElement(\"div\"));\n        this.cursorLayer.className = \"cm-cursorLayer cm-vimCursorLayer\";\n        this.cursorLayer.setAttribute(\"aria-hidden\", \"true\");\n        view.requestMeasure(this.measureReq);\n        this.setBlinkRate();\n    }\n    setBlinkRate() {\n        this.cursorLayer.style.animationDuration = 1200 + \"ms\";\n    }\n    update(update) {\n        if (update.selectionSet || update.geometryChanged || update.viewportChanged) {\n            this.view.requestMeasure(this.measureReq);\n            this.cursorLayer.style.animationName = this.cursorLayer.style.animationName == \"cm-blink\" ? \"cm-blink2\" : \"cm-blink\";\n        }\n    }\n    scheduleRedraw() {\n        this.view.requestMeasure(this.measureReq);\n    }\n    readPos() {\n        let { state } = this.view;\n        let cursors = [];\n        for (let r of state.selection.ranges) {\n            let prim = r == state.selection.main;\n            let piece = measureCursor(this.cm, this.view, r, prim);\n            if (piece)\n                cursors.push(piece);\n        }\n        return { cursors };\n    }\n    drawSel({ cursors }) {\n        if (cursors.length != this.cursors.length || cursors.some((c, i) => !c.eq(this.cursors[i]))) {\n            let oldCursors = this.cursorLayer.children;\n            if (oldCursors.length !== cursors.length) {\n                this.cursorLayer.textContent = \"\";\n                for (const c of cursors)\n                    this.cursorLayer.appendChild(c.draw());\n            }\n            else {\n                cursors.forEach((c, idx) => c.adjust(oldCursors[idx]));\n            }\n            this.cursors = cursors;\n        }\n    }\n    destroy() {\n        this.cursorLayer.remove();\n    }\n}\nconst themeSpec = {\n    \".cm-vimMode .cm-line\": {\n        \"& ::selection\": { backgroundColor: \"transparent !important\" },\n        \"&::selection\": { backgroundColor: \"transparent !important\" },\n        caretColor: \"transparent !important\",\n    },\n    \".cm-fat-cursor\": {\n        position: \"absolute\",\n        background: \"#ff9696\",\n        border: \"none\",\n        whiteSpace: \"pre\",\n    },\n    \"&:not(.cm-focused) .cm-fat-cursor\": {\n        background: \"none\",\n        outline: \"solid 1px #ff9696\"\n    },\n};\nconst hideNativeSelection = /*@__PURE__*/Prec.highest(/*@__PURE__*/EditorView.theme(themeSpec));\nfunction getBase(view) {\n    let rect = view.scrollDOM.getBoundingClientRect();\n    let left = view.textDirection == Direction.LTR ? rect.left : rect.right - view.scrollDOM.clientWidth;\n    return { left: left - view.scrollDOM.scrollLeft, top: rect.top - view.scrollDOM.scrollTop };\n}\nfunction measureCursor(cm, view, cursor, primary) {\n    let head = cursor.head;\n    let fatCursor = false;\n    let hCoeff = 1;\n    let vim = cm.state.vim;\n    if (vim && (!vim.insertMode || cm.state.overwrite)) {\n        fatCursor = true;\n        if (vim.visualBlock && !primary)\n            return null;\n        if (cursor.anchor < cursor.head)\n            head--;\n        if (cm.state.overwrite)\n            hCoeff = 0.2;\n        else if (vim.status)\n            hCoeff = 0.5;\n    }\n    if (fatCursor) {\n        let pos = view.coordsAtPos(head, cursor.assoc || 1);\n        if (!pos)\n            return null;\n        let base = getBase(view);\n        let domAtPos = view.domAtPos(head);\n        let node = domAtPos ? domAtPos.node : view.contentDOM;\n        while (domAtPos && domAtPos.node instanceof HTMLElement) {\n            node = domAtPos.node;\n            domAtPos = { node: domAtPos.node.childNodes[domAtPos.offset], offset: 0 };\n        }\n        if (!(node instanceof HTMLElement)) {\n            node = node.parentNode;\n        }\n        let style = getComputedStyle(node);\n        let letter = head < view.state.doc.length && view.state.sliceDoc(head, head + 1);\n        if (!letter || letter == \"\\n\" || letter == \"\\r\")\n            letter = \"\\xa0\";\n        let h = (pos.bottom - pos.top);\n        return new Piece(pos.left - base.left, pos.top - base.top + h * (1 - hCoeff), h * hCoeff, style.fontFamily, style.fontSize, style.fontWeight, style.color, primary ? \"cm-fat-cursor cm-cursor-primary\" : \"cm-fat-cursor cm-cursor-secondary\", letter, hCoeff != 1);\n    }\n    else {\n        return null;\n    }\n}\n\nconst Vim = /*@__PURE__*/initVim(CodeMirror);\nconst HighlightMargin = 250;\nconst vimStyle = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-vimMode .cm-cursorLayer:not(.cm-vimCursorLayer)\": {\n        display: \"none\",\n    },\n    \".cm-vim-panel\": {\n        padding: \"0px 10px\",\n        fontFamily: \"monospace\",\n        minHeight: \"1.3em\",\n    },\n    \".cm-vim-panel input\": {\n        border: \"none\",\n        outline: \"none\",\n        backgroundColor: \"inherit\",\n    },\n    \"&light .cm-searchMatch\": { backgroundColor: \"#ffff0054\" },\n    \"&dark .cm-searchMatch\": { backgroundColor: \"#00ffff8a\" },\n});\nconst vimPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.status = \"\";\n        this.query = null;\n        this.decorations = Decoration.none;\n        this.view = view;\n        const cm = (this.cm = new CodeMirror(view));\n        Vim.enterVimMode(this.cm);\n        this.view.cm = this.cm;\n        this.cm.state.vimPlugin = this;\n        this.blockCursor = new BlockCursorPlugin(view, cm);\n        this.updateClass();\n        this.cm.on(\"vim-command-done\", () => {\n            if (cm.state.vim)\n                cm.state.vim.status = \"\";\n            this.blockCursor.scheduleRedraw();\n            this.updateStatus();\n        });\n        this.cm.on(\"vim-mode-change\", (e) => {\n            cm.state.vim.mode = e.mode;\n            if (e.subMode) {\n                cm.state.vim.mode += \" block\";\n            }\n            cm.state.vim.status = \"\";\n            this.blockCursor.scheduleRedraw();\n            this.updateClass();\n            this.updateStatus();\n        });\n        this.cm.on(\"dialog\", () => {\n            if (this.cm.state.statusbar) {\n                this.updateStatus();\n            }\n            else {\n                view.dispatch({\n                    effects: showVimPanel.of(!!this.cm.state.dialog),\n                });\n            }\n        });\n        this.dom = document.createElement(\"span\");\n        this.dom.style.cssText = \"position: absolute; right: 10px; top: 1px\";\n    }\n    update(update) {\n        var _a;\n        if ((update.viewportChanged || update.docChanged) && this.query) {\n            this.highlight(this.query);\n        }\n        if (update.docChanged) {\n            this.cm.onChange(update);\n        }\n        if (update.selectionSet) {\n            this.cm.onSelectionChange();\n        }\n        if (update.viewportChanged) ;\n        if (this.cm.curOp && !this.cm.curOp.isVimOp) {\n            this.cm.onBeforeEndOperation();\n        }\n        if (update.transactions) {\n            for (let tr of update.transactions)\n                for (let effect of tr.effects) {\n                    if (effect.is(setSearchQuery)) {\n                        let forVim = (_a = effect.value) === null || _a === void 0 ? void 0 : _a.forVim;\n                        if (!forVim) {\n                            this.highlight(null);\n                        }\n                        else {\n                            let query = effect.value.create();\n                            this.highlight(query);\n                        }\n                    }\n                }\n        }\n        this.blockCursor.update(update);\n    }\n    updateClass() {\n        const state = this.cm.state;\n        if (!state.vim || (state.vim.insertMode && !state.overwrite))\n            this.view.scrollDOM.classList.remove(\"cm-vimMode\");\n        else\n            this.view.scrollDOM.classList.add(\"cm-vimMode\");\n    }\n    updateStatus() {\n        let dom = this.cm.state.statusbar;\n        let vim = this.cm.state.vim;\n        if (!dom || !vim)\n            return;\n        let dialog = this.cm.state.dialog;\n        if (dialog) {\n            if (dialog.parentElement != dom) {\n                dom.textContent = \"\";\n                dom.appendChild(dialog);\n            }\n        }\n        else {\n            dom.textContent = `--${(vim.mode || \"normal\").toUpperCase()}--`;\n        }\n        this.dom.textContent = vim.status;\n        dom.appendChild(this.dom);\n    }\n    destroy() {\n        Vim.leaveVimMode(this.cm);\n        this.updateClass();\n        this.blockCursor.destroy();\n        delete this.view.cm;\n    }\n    highlight(query) {\n        this.query = query;\n        if (!query)\n            return (this.decorations = Decoration.none);\n        let { view } = this;\n        let builder = new RangeSetBuilder();\n        for (let i = 0, ranges = view.visibleRanges, l = ranges.length; i < l; i++) {\n            let { from, to } = ranges[i];\n            while (i < l - 1 && to > ranges[i + 1].from - 2 * HighlightMargin)\n                to = ranges[++i].to;\n            query.highlight(view.state, from, to, (from, to) => {\n                builder.add(from, to, matchMark);\n            });\n        }\n        return (this.decorations = builder.finish());\n    }\n}, {\n    eventHandlers: {\n        keydown: function (e, view) {\n            const key = CodeMirror.vimKey(e);\n            const cm = this.cm;\n            if (!key)\n                return;\n            let vim = cm.state.vim;\n            if (!vim)\n                return;\n            // clear search highlight\n            if (key == \"<Esc>\" &&\n                !vim.insertMode &&\n                !vim.visualMode &&\n                this.query /* && !cm.inMultiSelectMode*/) {\n                const searchState = vim.searchState_;\n                if (searchState) {\n                    cm.removeOverlay(searchState.getOverlay());\n                    searchState.setOverlay(null);\n                }\n            }\n            vim.status = (vim.status || \"\") + key;\n            let result = Vim.multiSelectHandleKey(cm, key, \"user\");\n            vim = cm.state.vim; // the object can change if there is an exception in handleKey\n            // insert mode\n            if (!result && vim.insertMode && cm.state.overwrite) {\n                if (e.key && e.key.length == 1 && !/\\n/.test(e.key)) {\n                    result = true;\n                    cm.overWriteSelection(e.key);\n                }\n                else if (e.key == \"Backspace\") {\n                    result = true;\n                    CodeMirror.commands.cursorCharLeft(cm);\n                }\n            }\n            if (result) {\n                CodeMirror.signal(this.cm, 'vim-keypress', key);\n                e.preventDefault();\n                e.stopPropagation();\n                this.blockCursor.scheduleRedraw();\n            }\n            this.updateStatus();\n            return !!result;\n        },\n    },\n    decorations: (v) => v.decorations,\n});\nconst matchMark = /*@__PURE__*/Decoration.mark({ class: \"cm-searchMatch\" });\nconst showVimPanel = /*@__PURE__*/StateEffect.define();\nconst vimPanelState = /*@__PURE__*/StateField.define({\n    create: () => false,\n    update(value, tr) {\n        for (let e of tr.effects)\n            if (e.is(showVimPanel))\n                value = e.value;\n        return value;\n    },\n    provide: (f) => {\n        return showPanel.from(f, (on) => (on ? createVimPanel : null));\n    },\n});\nfunction createVimPanel(view) {\n    let dom = document.createElement(\"div\");\n    dom.className = \"cm-vim-panel\";\n    let cm = view.cm;\n    if (cm.state.dialog) {\n        dom.appendChild(cm.state.dialog);\n    }\n    return { top: false, dom };\n}\nfunction statusPanel(view) {\n    let dom = document.createElement(\"div\");\n    dom.className = \"cm-vim-panel\";\n    let cm = view.cm;\n    cm.state.statusbar = dom;\n    cm.state.vimPlugin.updateStatus();\n    return { dom };\n}\nfunction vim(options = {}) {\n    return [\n        vimStyle,\n        vimPlugin,\n        hideNativeSelection,\n        options.status ? showPanel.of(statusPanel) : vimPanelState,\n    ];\n}\nfunction getCM(view) {\n    return view.cm || null;\n}\n\nexport { CodeMirror, Vim, getCM, vim };\n"],"names":["off","CodeMirror","Pos","vim","vimKey","ctx","query","macroModeState","e","i","dir","cm","options","commandMatch","numberRegex","line","repeat","on","from","to"],"mappings":"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"}